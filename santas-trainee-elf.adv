######################################
#  Santa's Trainee Elf
#  Copyright © 2021 Garry Francis
######################################
loading_screen = title
start_at = room01
start_theme = my_theme

######################################
#  Game information
######################################
game_information {
   copyright_message = Copyright © 2021 Garry Francis
   game_name = Santa's Trainee Elf
   game_version = 0.0.8
   short_synopsis = You are a trainee elf. Today is your first day on the job and Santa has some chores for you to do.
   uuid = c883e1a1-9db0-4d51-a29e-000231fbf194
   written_by = Garry Francis
   year_of_original = 2020
   year_of_release = 2021
}

######################################
#  Game settings
######################################
game_settings {
   add_standard_prepositions = false
   auto_pluralize_nouns = false
   dark_expression = is_dark
   enable_standard_all_behaviour = false
   experimental_auto_propogate_known = true
   experimental_new_parser = true
   experimental_new_scoping = true
   inventory_items_limit_var = max_carried
   inventory_worn_items_limit_var = max_worn
   rewind_enabled = true
   rollback_enabled = true
}

######################################
#  Booleans
######################################
booleans {
   has_asked_about_afram : boolean "false";
   has_asked_about_arya : boolean "false";
   has_asked_about_cindy : boolean "false";
   has_asked_about_jennifer : boolean "false";
   has_asked_about_jimmy : boolean "false";
   has_asked_about_li : boolean "false";
   has_asked_about_oliver : boolean "false";
   has_asked_about_samantha : boolean "false";
   has_fed_reindeer : boolean "false";
   has_given_gingerbread : boolean "false";
   has_moved_coal : boolean "false";
   has_talked_to_arlayna : boolean "false";
   has_talked_to_brayern : boolean "false";
   has_talked_to_jandor : boolean "false";
   has_talked_to_liluth : boolean "false";
   has_talked_to_mrs_claus : boolean "false";
   has_talked_to_neldor : boolean "false";
   has_talked_to_santa : boolean "false";
   has_talked_to_volodar : boolean "false";
   has_used_toilet : boolean "false";
   is_amusing : boolean "false";
   is_bottle_open : boolean "false";
   is_box_open : boolean "false";
   is_candle_lit : boolean "false";
   is_dark : dynamic_boolean {(is_at "dark_zone" && (!is_present "candle" || !is_candle_lit))}
   is_foot_locker_open : boolean "false";
   is_on_box : boolean "false";
   is_refresh : boolean "false";
   is_text_book_open : boolean "false";
}

######################################
#  Integers
######################################
integers {
   max_carried : integer_const "10";
   max_worn : integer_const "2";
   score : integer "0";
   turns : integer "0";
   bottle_item_limit : integer_const "3";
   bunk_item_limit : integer_const "10";
   cookie_box_item_limit : integer_const "5";
   dining_table_item_limit : integer_const "10";
   foot_locker_item_limit : integer_const "5";
   hand_basin_item_limit : integer_const "5";
   jam_tin_item_limit : integer_const "3";
   mantelpiece_item_limit : integer_const "5";
   shelves_item_limit : integer_const "10";
   sleigh_item_limit : integer_const "10";
   waste_basket_item_limit : integer_const "5";
}

######################################
#  Strings
######################################
strings {
   def_noun1_phrase : dynamic_string {(definite(d(s1())) )}
   uc_def_noun1_phrase : dynamic_string {(first_cap(definite(d(s1()))) )}
   def_noun2_phrase : dynamic_string {(definite(d(s2())) )}
   uc_def_noun2_phrase : dynamic_string {(first_cap(definite(d(s2()))) )}
   header_score : dynamic_string {(score + "/100")}
   is_or_are : dynamic_string {(s1_has_trait "plural_t" ? "are" : "is")}
   it_or_them : dynamic_string {(s1_has_trait "plural_t" ? "them" : s1_has_trait "male_t" ? "him" : s1_has_trait "female_t" ? "her" : "it")}
   that_or_those : dynamic_string {(s1_has_trait "plural_t" ? "those" : s1_has_trait "male_t" ? "him" : s1_has_trait "female_t" ? "her" : "that")}
   message : string "";
   not_carried : dynamic_string {("You're not carrying any " + original "noun1" + ".")}
   not_present : dynamic_string {("You can't see any " + original "noun1" + " here.")}
   verb_phrase : string "";
   you_can : dynamic_string {("You {verb_phrase} {def_noun1_phrase}.")}
   you_cant : dynamic_string {("You can't {verb_phrase} {def_noun1_phrase}.")}
}

######################################
#  Collections
######################################
collections {
   list_object_buffer : list;
}

######################################
#  Traits
######################################
traits {
   craft_t : trait;
   character_t : trait;
   fabric_t : trait;
   female_t : trait;
   male_t : trait;
   metal_t : trait;
   plural_t : trait;
   treasure_t : trait;
   wood_t : trait;
}

######################################
#  Locations
######################################
locations {
   room01 : location "This is the lounge room in Santa's workshop. It's warm and cosy thanks to the crackling fire in the fireplace. Santa is sitting in the lounge chair in front of the fire. The room is tastefully decorated with a Christmas tree and Christmas decorations above the mantelpiece." header = "Lounge Room";
   room02 : location "This is the elves' dining hall. It is dominated by a row of dining tables and bench seats and not much else." header = "Dining Hall";
   room03 : location "This is the kitchen. It's full of all the normal cooking utensils and accoutrements, but nothing that will help you finish your chores for Santa." header = "Kitchen";
   room04 : location "This is the kitchen's large walk-in pantry. The stock looks to be a bit low at the moment." header = "Pantry";
   room05 : location "You're at the eastern end of the upstairs hallway. The hall from the west ends at a set of stairs." header = "Upstairs Hallway";
   room06 : location "You're in the western end of the upstairs hallway. The hall from the east ends at a window overlooking the countryside to the west. There's a closed door to the south." header = "Upstairs Hallway";
   room07 : location "You're in the elves' bunkroom. There are two rows of double-decker bunks along the east and west walls of the room. This is where the elves sleep at night, including you." header = "Elves' Bunkroom";
   room08 : location "This is the lavatory. Yes, believe it or not, even elves have to use the lavatory. It contains all the standard fixtures including a toilet and hand basin." header = "Lavatory";
   room09 : location "You're at the eastern end of the downstairs hallway. The hall from the west ends at a set of stairs." header = "Downstairs Hallway";
   room10 : location "You're at the western end of the downstairs hallway. The hall from the east ends at a window overlooking the countryside to the west." header = "Downstairs Hallway";
   room11 : location "This is the elves' classroom. There's no one here at the moment, but there's still some text books and things scattered about. There are no classes prior to Christmas because everyone is busy helping to make toys or keep the workshop going." header = "Classroom";
   room12 : location "This is Santa's mailroom. All the children's letters to Santa are delivered here. They are sorted into naughty and nice and orders are placed for the toys requested by the nice children." header = "Mailroom";
   room13 : location "This is the assembly area where all the toys are made. It has all the tools and machines needed to make the toys. There are hammers and nails, screws and screwdrivers, and just about anything else you could need to make a toy once you have the basic materials." header = "Assembly Area";
   room14 : location "This is where the finished toys are stored after they leave the assembly area. Most of the shelves are empty at the moment, as all the toys have been loaded onto Santa's sleigh ready for delivery on Christmas Eve." header = "Toy Storage";
   room15 : location "You're at the eastern end of the supplies area. The hallway continues to the west." header = "Supplies Hallway";
   room16 : location "It's pretty obvious that this is woodwork supplies, as pieces of timber are scattered all over the place." header = "Woodwork Supplies";
   room17 : location "This is craft supplies. It feels like it has a distinctly feminine touch, as the walls are decorated with various shades of pink wallpaper." header = "Craft Supplies";
   room18 : location "You're at the western end of the supplies area. A window overlooks the countryside to the west." header = "Supplies Hallway";
   room19 : location "You're in fabric supplies. It is dominated by a large counter and shelves of brightly-coloured fabrics." header = "Fabric Supplies";
   room20 : location "You're in metalwork supplies. The decor is plain and functional." header = "Metalwork Supplies";
   room21 : location "This is the barn where Santa keeps his sleigh. During the year, the sleigh only comes out for maintenance and training runs. The barn doors are to the east, but they're locked tight. The rear exit goes back to the workshop." header = "Barn";
   room22 : location "You're outside Santa's workshop. You can re-enter the workshop to the north. If you're silly enough, you can  wander through the snow in the other directions." header = "Outside Santa's Workshop";
   room23 : location "You're at the North Pole, surrounded by snowy wilderness in all directions apart from the warmth and security of Santa's workshop to the north." header = "North Pole";
   room24 : location "You're outside the reindeer stable. The entry is to the north." header = "Outside Stable";
   room25 : location "This is the stable where Santa keeps his reindeer. It's nice and warm in here, compared to the cold outside, thanks to the brazier. The reindeer are guarded 24 hours per day. It looks like Volodar is on duty at the moment." header = "Inside Stable";
   room26 : location "These are the reindeer stalls. There are eight stalls, one for each of the reindeer." header = "Reindeer Stalls";
   room27 : location "You're in the hay loft. The only exit is back down the ladder." header = "Hay Loft";
   room28 : location "You're at the southwest corner of Santa's workshop. You can only follow the walls of the workshop. The other directions have nothing but formidable snow." header = "SW of Santa's Workshop";
   room29 : location "This is Mrs Claus' vegetable garden. You wouldn't think that it's possible to grow vegetables in the Arctic, but a little bit of elvish magic can work wonders. Even so, there's not much chance of finding any vegetables in the middle of winter, as the garden is covered in deep snow and the ground is frozen." header = "Vegetable Garden";
   room30 : location "You're at the dump outside Santa's workshop." header = "Dump";
   room31 : location "You're outside the elves' coal mine. It is littered with mining equipment. The entrance looks very dark." header = "Outside Coal Mine";
   room32 : location "You're inside the coal mine. It's dimly illuminated by your candle. Even so, you don't dare venture any further or you might get eaten by a grue." header = "Inside Coal Mine";
   limbo : location "You're inside Santa's bedroom. How did you get in here?" header = "Santa's Bedroom";
}

######################################
#  Zones
######################################
zones {
   cold_zone : zone {
      locations = [room22, room23, room24, room28, room29, room30, room31]
   }
   dark_zone : zone {
      locations = [room32]
   }
   hall_zone : zone {
      locations = [room05, room06, room09, room10, room15, room18]
   }
   window_zone : zone {
      locations = [room02, room03, room06, room10, room18, room21, room22, room28, room29, room30]
   }
   workshop_zone : zone {
      locations  = [room01, room02, room03, room04, room05, room06, room07, room08, room09, room10, room11, room12, room13, room14, room15, room16, room17, room18, room19, room20, room21, room22, room23, room28, room29, room30]
   }
}

######################################
#  Connections
######################################
connections {
   from, direction, to = [
      room01, south_oneway, room05,
      room01, east_oneway, room02,

      room02, south_oneway, room03,
      room02, west_oneway, room01,

      room03, north_oneway, room02,
      room03, south_oneway, room04,
      room03, west_oneway, room05,

      room04, north_oneway, room03,

      room05, north_oneway, room01,
      room05, east_oneway, room03,
      room05, west_oneway, room06,
      room05, down_oneway, room09,

      room06, north_oneway, room07,
      room06, south_oneway, limbo,
      room06, east_oneway, room05,

      room07, north_oneway, room08,
      room07, south_oneway, room06,

      room08, south_oneway, room07,

      room09, north_oneway, room13,
      room09, south_oneway, room12,
      room09, west_oneway, room10,
      room09, up_oneway, room05,

      room10, south_oneway, room11,
      room10, east_oneway, room09,

      room11, north_oneway, room10,

      room12, north_oneway, room09,
      room12, south_oneway, room22,

      room13, north_oneway, room14,
      room13, south_oneway, room09,
      room13, east_oneway, room21,
      room13, west_oneway, room15,

      room14, south_oneway, room13,

      room15, north_oneway, room16,
      room15, south_oneway, room17,
      room15, east_oneway, room13,
      room15, west_oneway, room18,

      room16, south_oneway, room15,

      room17, north_oneway, room15,

      room18, north_oneway, room19,
      room18, south_oneway, room20,
      room18, east_oneway, room15,

      room19, south_oneway, room18,

      room20, north_oneway, room18,

      room21, west_oneway, room13,

      room22, north_oneway, room12,
      room22, south_oneway, room23,
      room22, east_oneway, room24,
      room22, west_oneway, room28,

      room23, north_oneway, room22,

      room24, north_oneway, room25,
      room24, west_oneway, room22,

      room25, north_oneway, room26,
      room25, south_oneway, room24,
      room25, up_oneway, room27,

      room26, south_oneway, room25,

      room27, down_oneway, room25,

      room28, north_oneway, room29,
      room28, east_oneway, room22,

      room29, north_oneway, room30,
      room29, south_oneway, room28,

      room30, north_oneway, room31,
      room30, south_oneway, room29,

      room31, north_oneway, room32,
      room31, south_oneway, room30,

      room32, south_oneway, room31,

      limbo, north_oneway, room06,
   ]
}

######################################
#  Barriers
######################################
barriers {
   barrier_room01_east : block_path {
      from = room01
      to = room02
      block_when_not = has_talked_to_santa
      message = You can't leave until you get your instructions from Santa.
      show_blocked_exit = true
   }
   barrier_room01_south : block_path {
      from = room01
      to = room05
      block_when_not = has_talked_to_santa
      message = You can't leave until you get your instructions from Santa.
      show_blocked_exit = true
   }
   barrier_room06_south : block_path {
      from = room06
      to = limbo
      block_when = has_talked_to_santa
      message = That's Santa's bedroom. That room is private and off limits to all elves. Only Santa and Mrs Claus can go in there.
      show_blocked_exit = true
   }
   barrier_room12_south : block_path {
      from = room12
      to = room22
      block_when_not_worn = jumper
      message = You can't go outside without something warm or you'll freeze to death.
      show_blocked_exit = true
   }
   barrier_room25_south : block_path {
      from = room25
      to = room24
      block_when_not_worn = jumper
      message = You can't go outside without something warm or you'll freeze to death.
      show_blocked_exit = true
   }
   barrier_room25_up : block_path {
      from = room25
      to = room27
      block_when_not = has_fed_reindeer
      message = Volodar stops you. \"You ain't goin' up there unless ya fed them reindeer.\"
      show_blocked_exit = true
   }
   barrier_room32_south : block_path {
      from = room32
      to = room31
      block_when_not_worn = jumper
      message = You can't go outside without something warm or you'll freeze to death.
      show_blocked_exit = true
   }
}

######################################
#  Objects
######################################
objects {
   // Room 1: Lounge Room
   lounge_room : scenery "the lounge room" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["lounge room", "room"]};
   wall : scenery "a wall" at = "room01" conspicuous = "false";
   walls : scenery "some walls" at = "room01" conspicuous = "false" {traits = [plural_t]}
   floor : scenery "a floor" at = "room01" conspicuous = "false";
   roof : scenery "a roof" at = "room01" conspicuous = "false";
   fireplace : scenery "a fireplace" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["fireplace", "fire", "flame"]}
   mantelpiece : scenery "a mantelpiece" at = "room01" conspicuous = "false" container_type = "surface" {experimental_matching_text_sequences = ["mantelpiece", "mantel"]}
   candle : object "a candle" at = "mantelpiece" weight = "2";
   christmas_decoration : scenery "a Christmas decoration" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["bauble", "christmas decoration", "decoration", "tinsel"]}
   christmas_decorations : scenery "some Christmas decorations" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["baubles", "christmas decorations", "decorations"] traits = [plural_t]}
   lounge_chair : scenery "a lounge chair" at = "room01" {experimental_matching_text_sequences = ["lounge chair", "lounge", "chair"]}
   santa_claus : scenery "Santa Claus" at = "room01"  is_requires_capitalization = "true" {experimental_matching_text_sequences = ["santa claus", "mr claus", "santa", "claus"] traits = [character_t, male_t]}
   beard : scenery "Santa's beard" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["santa's beard", "beard"]}
   belly : scenery "Santa's belly" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["santa's belly", "belly"]}
   belt : scenery "Santa's belt" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["santa's belt", "belt"]}
   buckle : scenery "Santa's buckle" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["santa's buckle", "buckle"]}
   fur : scenery "some fur" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["trim", "fur"]}
   suit : scenery "Santa's suit" at = "room01" conspicuous = "false" {experimental_matching_text_sequences = ["santa's suit", "suit"]}
   list : object "a list" weight = "2";
   christmas_tree : scenery "a Christmas tree" at = "room01"  {experimental_matching_text_sequences = ["christmas tree", "tree"]}
   christmas_presents : scenery "some Christmas presents" at = "room01" {traits = [plural_t]}

   // Room 2: Dining Hall
   dining_hall : scenery "a dining hall" at = "room02" conspicuous = "false";
   dining_tables : scenery "some dining tables" at = "room02" container_type = "surface" {experimental_matching_text_sequences = ["dining table", "dining tables", "table", "tables"] traits = [plural_t]}
   bench_seats : scenery "some bench seats" at = "room02" {experimental_matching_text_sequences = ["bench seats", "benches", "seats"] traits = [plural_t]}
   bench_seat : scenery "a bench seat" at = "room02" conspicuous = "false" {experimental_matching_text_sequences = ["bench seat", "bench", "seat"]}
   wine_bottle : object "a wine bottle" at = "dining_tables" container_type = "bag" weight = "2";
   cork : object "a cork" at = "wine_bottle" weight = "1";
   balloon : object "a balloon" at = "room02" weight = "5";
   rubber : object "a sheet of rubber" weight = "2" {experimental_matching_text_sequences = ["sheet of rubber", "rubber"]}

   // Room 3: Kitchen
   kitchen : scenery "a kitchen" at = "room03" conspicuous = "false";
   mrs_claus : scenery "Mrs Claus" at = "room03" {experimental_matching_text_sequences = ["mrs claus", "mrs", "claus"] traits = [character_t, female_t]}
   cooking_utensils : scenery "some cooking utensils" at = "room03" conspicuous = "false" {traits = [plural_t]}
   cooking_utensil : scenery "a cooking utensil" at = "room03" conspicuous = "false";

   // Room 4: Pantry
   pantry : scenery "a pantry" at = "room04" conspicuous = "false";
   pantry_shelves : scenery "some pantry shelves" at = "room04" container_type = "surface" {traits = [plural_t]}
   gingerbread : object "some gingerbread" weight = "2";
   cookie_box : object "a cookie box" at = "room04" container_type = "bag";
   cookies : object "some cookies" at = "cookie_box" weight = "6" {traits = [plural_t]}
   jam_tin : object "a jam tin" at = "pantry_shelves" container_type = "bag" weight = "3";
   carrots : object "some carrots" at = "jam_tin" weight = "2" {traits = [plural_t]}

   // Room 5: Upstairs Hallway (east)
   hallway : scenery "a hallway" at = "room05" conspicuous = "false"; //floating object
   stairs : scenery "some stairs" at = "room05" conspicuous = "false" {traits = [plural_t]} //floating object

   // Room 6: Upstairs Hallway (west)
   window : scenery "a window" at = "room06" conspicuous = "false"; //floating object
   door : scenery "a door" at = "room06" conspicuous = "false";

   // Room 7: Elves' Bunkroom
   elves_bunkroom : scenery "an elves' bunkroom" at = "room07" conspicuous = "false" {experimental_matching_text_sequences = ["elves' bunkroom", "elves bunkroom", "bunkroom", "room"]}
   rows_bunks : scenery "some rows of bunks" at = "room07" {experimental_matching_text_sequences = ["rows of bunks", "bunks"] traits = [plural_t]}
   bunk : scenery "a bunk" at = "room07" conspicuous = "false" container_type = "surface";
   pillow : scenery "a pillow" at = "bunk";
   sheets : scenery "some sheets" at = "bunk" {traits = [plural_t]}
   blanket : scenery "a blanket" at = "bunk";
   spring : object "a spring" weight = "2";
   foot_locker : scenery "a foot locker" at = "room07" container_type = "bag";
   jumper : object "a jumper" at = "foot_locker" wearable = "true" weight = "3";

   // Room 8: Lavatory
   fixtures : scenery "some fixtures" at = "room08" conspicuous = "false" {traits = [plural_t]}
   toilet : scenery "a toilet" at = "room08";
   toilet_paper : scenery "some toilet paper" at = "room08";
   cabinet : scenery "a cabinet" at = "room08";
   hand_basin : scenery "a hand basin" at = "room08" container_type = "bag";
   water : scenery "some water";
   waste_basket : scenery "a waste basket" at = "room08" container_type = "bag";
   used_tissues : object "some used tissues" at = "waste_basket" weight = "2" {traits = [plural_t]}
   cardboard_cylinder : object "a cardboard cylinder" at = "waste_basket" weight = "2";

   // Room 9: Downstairs Hallway (east)
   // See room 5 for stairs

   // Room 10: Downstairs Hallway (west)
   // See room 6 for window

   // Room 11: Classroom
   classroom : scenery "a classroom" at = "room11" conspicuous = "false";
   text_book : object "a text book" at = "room11" weight = "2" {experimental_matching_text_sequences = ["text book", "textbook", "book"]}
   blackboard : scenery "a blackboard" at = "room11";
   desks : scenery "some desks" at = "room11" {traits = [plural_t]}
   chairs : scenery "some chairs" at = "room11" {traits = [plural_t]}
   bookcase : scenery "a bookcase" at = "room11";

   // Room 12: Mailroom
   mailroom : scenery "a mailroom" at = "room12" conspicuous = "false" {experimental_matching_text_sequences = ["mailroom", "mail room", "room"]}
   neldor : scenery "Neldor" at = "room12" {traits = [character_t, male_t]}
   twine : object "a ball of twine" at = "room12" weight = "2" {experimental_matching_text_sequences = ["ball of twine", "twine"]}
   letter : scenery "a letter" at = "room12" conspicuous = "false" {experimental_matching_text_sequences = ["letter"]}
   letters : scenery "some letters" at = "room12" {experimental_matching_text_sequences = ["mail", "letters"] traits = [plural_t]}
   mailbag : scenery "a mailbag" at = "room12" conspicuous = "false" {experimental_matching_text_sequences = ["bag of mail", "mail bag", "mailbag", "bag"]}
   mailbags : scenery "some mailbags" at = "room12" {experimental_matching_text_sequences = ["bags of mail", "mail bags", "mailbags", "bags"] traits = [plural_t]}

   // Room 13: Assembly Area
   assembly_area : scenery "an assembly area" at = "room13" conspicuous = "false";
   toy : scenery "a toy" at = "room13" conspicuous = "false";
   toys : scenery "some toys" at = "room13" conspicuous = "false" {traits = [plural_t]}
   tool : scenery "a tool" at = "room13" conspicuous = "false";
   tools : scenery "some tools" at = "room13" conspicuous = "false" {traits = [plural_t]}
   elves : scenery "some elves" at = "room13" conspicuous = "false" {traits = [plural_t]}
   jack_box : object "a <j<12>><a<10>><c<12>><k<10>><-<12>><i<10>><n<12>><-<10>><t<12>><h<10>><e<12>><-<10>><b<12>><o<10>><x<12>>" weight = "6" {experimental_matching_text_sequences = ["jack-in-the-box", "jack in the box", "jack-in-box", "jack in box", "jack box", "jack", "box"] traits = [treasure_t]}
   kite : object "a <k<12>><i<10>><t<12>><e<10>>" weight = "5" {traits = [treasure_t]}
   piggy_bank : object "a <p<12>><i<10>><g<12>><g<10>><y<12>> <b<10>><a<12>><n<10>><k<12>>" weight = "2" {experimental_matching_text_sequences = ["piggy bank", "piggy", "bank"] traits = [treasure_t]}
   pop_gun : object "a <p<12>><o<10>><p<12>> <g<10>><u<12>><n<10>>" weight = "2" {experimental_matching_text_sequences = ["pop gun", "pop", "gun"] traits = [treasure_t]}
   skipping_rope : object "a <s<12>><k<10>><i<12>><p<10>><p<12>><i<10>><n<12>><g<10>> <r<12>><o<10>><p<12>><e<10>>" weight = "3" {experimental_matching_text_sequences = ["skipping rope", "skipping", "rope"] traits = [treasure_t]}
   teddy_bear : object "a <t<12>><e<10>><d<12>><d<10>><y<12>> <b<10>><e<12>><a<10>><r<12>>" weight = "2" {experimental_matching_text_sequences = ["teddy bear", "teddy", "bear"] traits = [treasure_t]}
   tin_drum : object "a <t<12>><i<10>><n<12>> <d<10>><r<12>><u<10>><m<12>>" weight = "3" {experimental_matching_text_sequences = ["tin drum", "drum"] traits = [treasure_t]}

   // Room 14: Toy Storage
   storage_room : scenery "a toy storage room" at = "room14" conspicuous = "false" {experimental_matching_text_sequences = ["toy storage room", "toy room", "storage room", "room"]}
   storage_shelves : scenery "some storage shelves" at = "room14" container_type = "surface" {traits = [plural_t]}
   hand_puppet : object "a hand puppet" at = "storage_shelves" wearable = "true" weight = "2";
   ice_skates : object "a pair of ice skates" at = "storage_shelves" wearable = "true" weight = "3"  {experimental_matching_text_sequences = ["a pair of ice skates", "pair of skates", "ice skates", "skates"] traits = [plural_t]}
   wooden_yoyo : object "a wooden yoyo" at = "storage_shelves" weight = "2";
   yoyo_string : object "a yoyo string" weight = "2" {traits = [craft_t]}

   // Room 15: Supplies Hallway (east)

   // Room 16: Woodwork Supplies
   woodwork_supplies : scenery "some woodwork supplies" at = "room16" conspicuous = "false" {traits = [plural_t]}
   brayern : scenery "Brayern" at = "room16" {traits = [character_t, male_t]}
   wooden_block : object "a wooden block" at = "limbo" weight = "2" {experimental_matching_text_sequences = ["wooden block", "wooden blocks", "wood block", "wood blocks", "block of wood", "blocks of wood", "block", "blocks"] traits = [wood_t]}
   wooden_board : object "a wooden board" at = "limbo" weight = "2" {experimental_matching_text_sequences = ["wooden board", "wooden boards", "wood board", "wood boards", "board of wood", "boards of wood", "board", "boards"] traits = [wood_t]}
   wooden_dowel : object "a wooden dowel" at = "limbo" weight = "2" {experimental_matching_text_sequences = ["wooden dowel", "wooden dowels", "wood dowel", "wood dowels", "dowel of wood", "dowels of wood", "dowel", "dowels"] traits = [wood_t]}
   wooden_rod : object "a wooden rod" at = "limbo" weight = "2" {experimental_matching_text_sequences = ["wooden rod", "wooden rods", "wood rod", "wood rods", "rod of wood", "rods of wood", "rod", "rods"] traits = [wood_t]}
   wooden_strip : object "a wooden strip" at = "limbo" weight = "2" {experimental_matching_text_sequences = ["wooden strip", "wooden strips", "wood strip", "wood strips", "strip of wood", "strips of wood", "strip", "strips"] traits = [wood_t]}
   plywood : object "a sheet of plywood" at = "limbo" weight = "4" {experimental_matching_text_sequences = ["sheet of plywood", "plywood", "sheet of ply", "ply"] traits = [wood_t]}

   // Room 17: Craft Supplies
   craft_supplies : scenery "some craft supplies" at = "room17" conspicuous = "false" {traits = [plural_t]}
   arlayna : scenery "Arlayna" at = "room17" {traits = [character_t, female_t]}
   cardboard : object "some cardboard" at = "limbo" weight = "2" {traits = [craft_t]}
   clay : object "some clay" at = "limbo" weight = "2" {traits = [craft_t]}
   glue : object "some glue" at = "limbo" weight = "2" {traits = [craft_t]}
   ink : object "some ink" at = "limbo" weight = "2" {traits = [craft_t]}
   paint : object "some paint" at = "limbo" weight = "2" {traits = [craft_t]}
   paper : object "some paper" at = "limbo" weight = "2" {traits = [craft_t]}

   // Room 18: Supplies Hallway (west)
   // See room 6 for window

   // Room 19: Fabric Supplies
   fabric_supplies : scenery "some fabric supplies" at = "room19" conspicuous = "false" {traits = [plural_t]}
   liluth : scenery "Liluth" at = "room19" {traits = [character_t, female_t]}
   calico : object "some calico" at = "limbo" weight = "2" {traits = [fabric_t]}
   cotton : object "some cotton thread" at = "limbo" weight = "2" {experimental_matching_text_sequences = ["cotton thread", "cotton", "thread"] traits = [fabric_t]}
   felt : object "some felt" at = "limbo" weight = "2" {traits = [fabric_t]}
   fluffy_fabric : object "some fluffy fabric" at = "limbo" weight = "2" {traits = [fabric_t]}
   leather : object "some leather" at = "limbo" weight = "2" {traits = [fabric_t]}
   linen : object "some linen" at = "limbo" weight = "2" {traits = [fabric_t]}
   stuffing : object "some stuffing" at = "limbo" weight = "2" {traits = [fabric_t]}

   // Room 20: Metalwork Supplies
   metalwork_supplies : scenery "some metalwork supplies" at = "room20" conspicuous = "false";
   jandor : scenery "Jandor" at = "room20" {traits = [character_t, male_t]}
   gears : object "some gears" at = "limbo" weight = "2" {traits = [metal_t, plural_t]}
   metal_bar : object "a metal bar" at = "limbo" weight = "2" {traits = [metal_t]}
   metal_tube : object "a metal tube" at = "limbo" weight = "2" {traits = [metal_t]}
   stainless_steel : object "some stainless steel" at = "limbo" weight = "2" {traits = [metal_t]}
   widgets : object "some widgets" at = "limbo" weight = "2" {traits = [metal_t, plural_t]}
   wire : object "some wire" at = "limbo" weight = "2" {traits = [metal_t]}
   tin : object "a sheet of tin" at = "limbo" weight = "2" {experimental_matching_text_sequences = ["sheets of tin", "sheet of tin", "tin"] traits = [metal_t]}

   // Room 21: Barn
   // See room 1 for presents
   barn : scenery "a barn" at = "room21" conspicuous = "false";
   sleigh : scenery "Santa's sleigh" at = "room21" container_type = "surface" {experimental_matching_text_sequences = ["santa's sleigh", "sleigh"]}

   // Room 22: Outside Santa's Workshop
   workshop : scenery "Santa's workshop" at = "room22" conspicuous = "false" {experimental_matching_text_sequences = ["santa's workshop", "workshop"]}
   snow : scenery "some snow" at = "room22";

   // Room 23: North Pole
   // See room 22 for snow
   north_pole : scenery "the North Pole" at = "room23";
   wilderness : scenery "the wilderness" at = "room23" conspicuous = "false";
   sign : scenery "a sign" at = "room23" conspicuous = "false"; // Floating object

   // Room 24: Outside Stable
   // See room 22 for snow
   stable : scenery "a stable" at = "room24" conspicuous = "false"; // Floating object

   // Room 25: Inside Stable
   // See room 24 for stable
   brazier : scenery "a brazier" at = "room25";
   ladder : scenery "a ladder" at = "room25"; // Floating object
   volodar : scenery "Volodar" at = "room25" {traits = [character_t, male_t]}
   sacks : scenery "some sacks" at = "room25" conspicuous = "false" {traits = [plural_t]}
   palettes : scenery "some palettes" at = "room25" conspicuous = "false" {traits = [plural_t]}

   // Room 26: Reindeer Stalls
   reindeer_stalls : scenery "some reindeer stalls" at = "room26" conspicuous = "false" {traits = [plural_t]}
   plaques : scenery "some plaques" at = "room26" conspicuous = "false" {traits = [plural_t]}
   reindeer : scenery "some reindeer" at = "room26" conspicuous = "false" {traits = [character_t, female_t, plural_t]}
   dasher : scenery "Dasher" at = "room26" {traits = [character_t, female_t]}
   dancer : scenery "Dancer" at = "room26" {traits = [character_t, female_t]}
   prancer : scenery "Prancer" at = "room26" {traits = [character_t, female_t]}
   vixen : scenery "Vixen" at = "room26" {traits = [character_t, female_t]}
   comet : scenery "Comet" at = "room26" {traits = [character_t, female_t]}
   cupid : scenery "Cupid" at = "room26" {traits = [character_t, female_t]}
   dunder : scenery "Dunder" at = "room26" {traits = [character_t, female_t]}
   blixem : scenery "Blixem" at = "room26" {traits = [character_t, female_t]}
   rope : object "a rope" at = "room26" weight = "3";

   // Room 27: Hay Loft
   // See room 25 for ladder
   hay_loft : scenery "a hay loft" at = "room27" conspicuous = "false";
   haystack : scenery "a haystack" at = "room27";
   handful_hay : object "a handful of hay" weight = "2" {experimental_matching_text_sequences = ["handful of hay", "hay"]}
   needle : object "a needle" weight = "1";

   // Room 28: Southwest of Santa's Workshop
   // See room 22 for snow

   // Room 29: Vegetable Garden
   // See room 22 for snow
   vegetable_garden : scenery "a vegetable garden" at = "room29" conspicuous = "false";
   fence : scenery "fence" at = "room29" conspicuous = "false";
   watering_can : scenery "watering can" at = "room29" conspicuous = "false";
   pole : object "a pole" at = "room29" weight = "7";
   gardening_spade : object "a gardening spade" weight = "7";

   // Room 30: Dump
   // See room 22 for snow
   dump : scenery "a dump" at = "room30" conspicuous = "false" {experimental_matching_text_sequences = ["dump", "rubbish", "reject toys", "food scraps", "scraps"]}
   plastic_pipe : object "a plastic pipe" weight = "2";
   broken_mould : object "a broken mould" weight = "2";
   mould : object "a mould" weight = "2";

   // Room 31: Outside Coal Mine
   // See room 22 for snow
   coal_mine : scenery "a coal mine" at = "room31" conspicuous = "false"; // Floating object
   mining_equipment : scenery "some mining equipment" at = "room31" conspicuous = "false";
   barrel : scenery "a barrel" at = "room31" conspicuous = "false";
   pickaxe : scenery "a pickaxe" at = "room31" conspicuous = "false";
   shovel : scenery "a shovel" at = "room31" conspicuous = "false";

   // Room 32: Inside Coal Mine
   // See room 31 for coal mine
   // See room 23 for sign
   coal : object "a <l<12>><u<10>><m<12>><p<10>> <o<12>><f<10>> <c<12>><o<10>><a<12>><l<10>>" at = "room32" weight = "2" {experimental_matching_text_sequences = ["lump of coal", "lump", "coal"] traits = [treasure_t]}
}

######################################
#  On startup
######################################
on_startup {
   : if (!is_mobile()) {
      : print "^c^<Before you start<10>>";
      : print "By default, Adventuron starts in full screen. If you have a really wide screen, this makes the text hard to read as the lines are too long. It is strongly recommended that you press <Esc<12>> and resize your browser window until the text is a comfortable width.";
      : print "^c^[[Click, tap or press <Enter<12>> to continue]]";
      : press_any_key;
      : clear_screen;
   }
   : print "^c^<Santa's Trainee Elf<12>>";
   : print "It's 23 December 2020.";
   : print "It's been a really tough year for many people with bush fires, floods and other natural disasters and then the Covid-19 pandemic. Many people are doing it tough, so it's up to Santa Claus to bring a smile to their faces and make sure that all the nice children get a present on Christmas Day, even if their parents can't afford it.";
   : print "Today also happens to be your birthday. You have just turned 16, which is the elvish coming-of-age. It's a very proud day when Santa's elves start their traineeship.";
   : print "You've been told to report to Santa in the lounge room to receive your instructions for your first day on the job. Good luck, young Eldrid.";
   : print "^c^[[Click, tap or press <Enter<12>> to begin]]";
   : press_any_key;
}

######################################
#  On pre command
######################################
on_pre_command {
   : match "_ _" {
      : disambiguate_s1 "present";
      : disambiguate_s2 "present";
      // Save original verb phrase
      : mask {
         : set_string var = "verb_phrase" {(original "verb")}
         : if (!preposition1_is "") {
            : set_string var = "verb_phrase" {(verb_phrase + " " + original "preposition1")}
         }
      }
      // Workaround for openable opaque container
      : if (is_exists (s1()) && ((parent_of(s1()) == "cookie_box" && !is_box_open) || (parent_of(s1()) == "foot_locker" && !is_foot_locker_open))) {
         : print {("You can't see any " + original "noun1" + " here.")}
         : done;
      }
   }
   // Blow out, put out
   : match "blow _;put _" {
      : disambiguate_s1 "present";
      : if (preposition1_is "out") {
         : set_sentence "extinguish $1";
      }
   }
   // Climb/get/jump/lie/stand/step on
   : match "climb _;get _;jump _;lie _;stand _;step _" {
      : disambiguate_s1 "present";
      : if (preposition1_is "on") {
         : set_sentence "mount $1";
      }
   }
   // Climb/get/jump/step down/off/up
   : match "climb _;get _;jump _;step _" {
      : if (preposition1_is "down") {
         : set_sentence "descend $1";
      }
      : if (preposition1_is "off") {
         : set_sentence "dismount $1";
      }
      : if (preposition1_is "up") {
         : set_sentence "ascend $1";
      }
   }
   // Let down
   : match "let _" {
      : if (preposition1_is "down") {
         : set_sentence "deflate $1";
      }
   }
   // Checks for diagonal movement
   : match "ne _;nw _;se _;sw _" {
      : print "There are no diagonal directions in this game.";
      : done;
   }
   // Checks for movement on cookie box or jack-in-the-box
   : match "n _;s _;e _;w _" {
      : if (is_on_box) {
         : print "You'll have to get off the box first.";
         : done;
      }
   }
   : match "u _" {
      : if (is_on_box) {
         : print "You can't go any higher.";
         : done;
      }
   }
   : match "d _" {
      : if (is_on_box) {
         : set_false "is_on_box";
         : if (has_not_created "jack_box") {
            : print "You get off the cookie box.";
            : done;
         }
         : print "You get off the jack-in-the-box.";
         : done;
      }
   }
   // Checks for entry to reindeer stalls
   : match "n _" {
      : if (is_at "room25" && !(is_carried "carrots" || has_fed_reindeer)) {
         : print "Volodar stops you. \"You ain't goin' in there unless ya got some feed for them reindeer.\"";
         : done;
      }
   }
   // Check for darkness
   : if (is_dark && !(is_movement_command() || verb_is "hint" || verb_is "inventory" || verb_is "load" || verb_is "look" || verb_is "quit" || verb_is "ramload" || verb_is "ramsave" || verb_is "save" || verb_is "score" || verb_is "turns")) {
      : print "You fumble about in the dark, but can't do anything useful without a light.";
      : done;
   }
   // Transitive verbs
   : match "ask -;attack -;feed -;kiss -;wake -" {
      : print "You'll have to tell me who or what to {verb_phrase}.";
      : done;
   }
   : match "ascend -;apply -;break -;burst -;clean -;climb -;close -;consult -;cut -;deflate -;descend -;dig -;dismount -;drink -;drop -;eat -;empty -;examine -;extinguish -;fill -;find -;get -;give -;hit -;kick -;light -;make -;mount -;open -;pour -;pull -;push -;put -;reach -;read -;remove -;repair -;seal -;search -;show -;squeeze -;tear -;throw -;touch -;unseal -;use -;wear -" {
      : print "You'll have to tell me what to {verb_phrase}.";
      : done;
   }
   : match "play -" {
      : print "You'll have to tell me what to {verb_phrase} with.";
      : done;
   }
   : match "write -" {
      : print "You'll have to tell me what to {verb_phrase} on.";
      : done;
   }
   // Intransitive verbs
   : match "about *;dance *;listen *;pray *;quit *;sing *;sleep *;swim *" {
      : print "You don't need to provide a noun with '{verb_phrase}'.";
      : done;
   }
   // Apply
   : match "apply glue" {
      : if (preposition2_is "to" && noun2_is "mould") {
         : set_sentence "repair mould";
      }
   }
   // Cut, chop, slice
   : match "cut *" {
      : disambiguate_s1 "present";
      : disambiguate_s2 "carried";
      : if (!is_present (s1()) && !noun1_is "string") {
         : print {(not_present)}
         : done;
      }
      : if (preposition2_is "with" && !noun2_is "") {
         : if (!is_carried (s2())) {
            : print {("You aren't carrying any " + original "noun2" + ".")}
            : done;
         }
         : if (s2() != "ice_skates") {
            : print "{uc_def_noun2_phrase} is not sharp enough to {verb_phrase} {def_noun1_phrase}.";
            : done;
         }
      }
      : if ((preposition2_is "" || preposition2_is "with") && noun2_is "") {
         : if (!is_carried "ice_skates") {
            : print "You need something sharp to {verb_phrase} {it_or_them} with.";
            : done;
         }
         : print "^n^(with the ice skates)\n";
      }
   }
   // Dig
   : match "dig *" {
      : disambiguate_s1 "present";
      : disambiguate_s2 "carried";
      : if (!is_present (s1())) {
         : print {(not_present)}
         : done;
      }
      : if (preposition2_is "with" && !noun2_is "") {
         : if (!is_carried (s2())) {
            : print {("You aren't carrying any " + original "noun2" + ".")}
            : done;
         }
         : if (s2() != "gardening_spade") {
            : print "You can't dig anything with {def_noun2_phrase}.";
            : done;
         }
      }
      : if ((preposition2_is "" || preposition2_is "with") && noun2_is "") {
         : if (!is_carried "gardening_spade") {
            : if (is_at "cold_zone") {
               : print "It's too cold to dig with your bare hands.";
               : done;
            }
            : print "You need something to dig with.";
            : done;
         }
         : set_string var = "message" text = "^n^(with the gardening spade)\n";
      }
   }
   // Give, offer
   : match "give *" {
      : if (preposition2_is "" && !noun2_is "") {
         : set_sentence "give $2 to $1";
      }
      : disambiguate_s1 "carried";
      : disambiguate_s2 "present";
      : if (!is_carried (s1())) {
         : print {(not_carried)}
         : done;
      }
      : if (is_worn(s1())) {
         : print "You'll have to remove {it_or_them} first.";
         : done;
      }
      : if ((preposition2_is "" || preposition2_is "to") && noun2_is "") {
         : if (is_present "santa_claus") {
            : print "^n^(to Santa Claus)";
            : set_sentence "give $1 to santa claus";
         }
         : else_if (is_present "mrs_claus") {
            : print "^n^(to Mrs Claus)";
            : set_sentence "give $1 to mrs claus";
         }
         : else_if (is_present "neldor") {
            : print "^n^(to Neldor)";
            : set_sentence "give $1 to neldor";
         }
         : else_if (is_present "brayern") {
            : print "^n^(to Brayern)";
            : set_sentence "give $1 to brayern";
         }
         : else_if (is_present "arlayna") {
            : print "^n^(to Arlayna)";
            : set_sentence "give $1 to arlayna";
         }
         : else_if (is_present "liluth") {
            : print "^n^(to Liluth)";
            : set_sentence "give $1 to liluth";
         }
         : else_if (is_present "jandor") {
            : print "^n^(to Jandor)";
            : set_sentence "give $1 to jandor";
         }
         : else_if (is_present "volodar") {
            : print "^n^(to Volodar)";
            : set_sentence "give $1 to volodar";
         }
         : else_if (is_present "reindeer") {
            : print "^n^(to the reindeer)";
            : set_sentence "give $1 to reindeer";
         }
         : else {
            : print "You can't see anyone to give {it_them} to.";
            : done;
         }
      }
      : disambiguate_s1 "carried";
      : disambiguate_s2 "present";
      : if ((preposition2_is "" || preposition2_is "to") && !noun2_is "" && !s2_has_trait "character_t") {
         : print "You can only give {def_noun1_phrase} to living things.";
         : done;
      }
   }
   // Go
   : match "go -" {
      : print "You'll have to tell me where to {verb_phrase}.";
      : done;
   }
   // Jump
   : match "jump -" {
      : print "You {verb_phrase} on the spot.";
      : done;
   }
   // Make, assemble, build, construct
   : match "make *" {
      : if (!is_at "room13") {
         : print "You can only make things in the assembly area.";
         : done;
      }
      : if (noun1_is "toy") {
         : print "You'll need to specify what sort of toy you want to {verb_phrase}.";
         : done;
      }
      : if (noun1_is "coal") {
         : print "That's not a toy. You'll have to get that from the coal mine.";
         : done;
      }
      : if (noun1_is "box") {
         : if (!has_not_created "jack_box") {
            : print "You've already made a jack-in-the-box.";
            : done;
         }
         : if (is_present "cookie_box" && child_count "cookie_box" != 0) {
            : print "You'll have to empty the cookie box first.";
            : done;
         }
         : if (!(is_present "cookie_box" && is_present "cardboard_cylinder" && is_present "hand_puppet" && is_present "spring")) {
            : print "You don't have all the materials you need to make a jack-in-the-box.";
            : done;
         }
         : destroy "cookie_box";
         : destroy "cardboard_cylinder";
         : destroy "hand_puppet";
         : destroy "spring";
         : set_false "is_box_open";
         : create "jack_box";
         : add var ="score" value = "5";
         : success;
         : set_string var = "message" text = "You glue the cardboard cylinder inside the box and place the spring inside the cylinder. You then place the hand puppet over the spring, push it down and close the lid. You've made a near perfect jack-in-the-box for Jennifer.";
         : gosub "refresh";
      }
      : if (noun1_is "rope") {
         : if (!has_not_created "skipping_rope") {
            : print "You've already made a skipping rope.";
            : done;
         }
         : if (!(is_present "rope" && is_present "wooden_rod")) {
            : print "You don't have all the materials you need to make a skipping rope.";
            : done;
         }
         : destroy "rope";
         : create "wooden_rod" target = "limbo";
         : create "skipping_rope";
         : add var ="score" value = "5";
         : success;
         : set_string var = "message" text = "You carve the wooden rod into two handles and drill a hole in each one. You then cut the rope to length and attach a handle to each end. Cindy will love her new skipping rope.";
         : gosub "refresh";
      }
      : if (noun1_is "drum") {
         : if (!has_not_created "tin_drum") {
            : print "You've already made a tin drum.";
            : done;
         }
         : if (!(is_present "jam_tin" && is_present "rubber" && is_present "paint")) {
            : print "You don't have all the materials you need to make a tin drum.";
            : done;
         }
         : destroy "jam_tin";
         : destroy "rubber";
         : create "tin_drum";
         : add var ="score" value = "5";
         : success;
         : set_string var = "message" text = "You stretch the rubber sheet over the open end of the jam tin and glue it in place. You then decorate it with a splash of paint. Jimmy will have a ball annoying everyone in the household with this noisy instrument.";
         : gosub "refresh";
      }
      : if (noun1_is "bear") {
         : if (!has_not_created "teddy_bear") {
            : print "You've already made a teddy bear.";
            : done;
         }
         : if (!(is_present "fluffy_fabric" && is_present "handful_hay")) {
            : print "You don't have all the materials you need to make a teddy bear.";
            : done;
         }
         : create "fluffy_fabric" target = "limbo";
         : destroy "handful_hay";
         : create "teddy_bear";
         : add var ="score" value = "5";
         : success;
         : set_string var = "message" text = "You cut the fluffy fabric to shape for the fronts and backs of the head, body, arms and legs, then sew a mouth, nose and eyes onto the face. You sew the fronts and backs together with the fluffy sides facing one another, but leaving a gap for the stuffing. You turn the pieces inside out, stuff the hay into the gaps, then sew them up. Finally, you sew the parts together and have a stuffed teddy bear that Samantha will love.";
         : gosub "refresh";
      }
      : if (noun1_is "gun") {
         : if (!has_not_created "pop_gun") {
            : print "You've already made a pop gun.";
            : done;
         }
         : if (!(is_present "wooden_block" && is_present "wooden_dowel" && is_present "plastic_pipe" && is_present "yoyo_string" && is_present "cork")) {
            : print "You don't have all the materials you need to make a pop gun.";
            : done;
         }
         : create "wooden_block" target = "limbo";
         : create "wooden_dowel" target = "limbo";
         : destroy "plastic_pipe";
         : destroy "yoyo_string";
         : destroy "cork";
         : create "pop_gun";
         : add var ="score" value = "5";
         : success;
         : set_string var = "message" text = "You carve the wooden block into a stock and attach the wooden dowel barrel. You then fit the plastic pipe over the barrel, tie the cork to the tube with the string and place the cork into the end of the tube. By using a pump action to compress the air and pop the cork out of the barrel, Afram will have a ball shooting everything in sight.";
         : gosub "refresh";
      }
      : if (noun1_is "kite") {
         : if (!has_not_created "kite") {
            : print "You've already made a kite.";
            : done;
         }
         : if (!(is_present "wooden_strip" && is_present "linen" && is_present "twine")) {
            : print "You don't have all the materials you need to make a kite.";
            : done;
         }
         : create "wooden_strip" target = "limbo";
         : create "linen" target = "limbo";
         : destroy "twine";
         : create "kite";
         : add var ="score" value = "5";
         : success;
         : set_string var = "message" text = "You make a crucifix from the wooden strip, tie a piece of twine to the ends of the cross-bar and pull it tight so that it bows. You then cover the frame with linen so that it is a diamond shape and glue it into place. Finally, you tie the remaining twine to the frame and decorate the kite with paint. Li will love playing with this.";
         : gosub "refresh";
      }
      : if (noun1_is "bank") {
         : if (!has_not_created "piggy_bank") {
            : print "You've already made a piggy bank.";
            : done;
         }
         : if (!(is_present "clay" && is_present "water" && is_present "mould")) {
            : print "You don't have all the materials you need to make a piggy bank.";
            : done;
         }
         : create "clay" target = "limbo";
         : destroy "water";
         : create "piggy_bank";
         : add var ="score" value = "5";
         : success;
         : set_string var = "message" text = "You mix the clay with the water until you have a dough-like consistency, then roll it into two sheets about 10 mm thick and press each sheet into the two halves of the mould. You carefully remove the two halves from the mould, join the matching halves, smooth the join and cut a slot for the coins. Finally, you dry it and decorate it with paint. Young Arya will be able to save all her pennies in this colourful piggy bank.";
         : gosub "refresh";
      }
      : print "Santa didn't ask you to make that. Please don't waste time or resources. You only have time to make the toys on the list.";
      : done;
   }
   // Move
   : match "move _;turn _" {
      : print "Try PUSH or PULL.";
      : done;
   }
   // Pray
   : match "pray -" {
      : print "You pray to the elvish gods, but they don't seem to be listening today.";
      : done;
   }
   // Say
   : match "say -" {
      : print "You have nothing to say.";
      : done;
   }
   // Scream
   : match "scream -" {
      : print "\"Yahoooo!\"";
      : done;
   }
   // Sing
   : match "sing -" {
      : print "You sing an elvish Christmas carol.";
      : done;
   }
   // Smell
   : match "smell -" {
      : print "Sniff, sniff.";
      : done;
   }
   // Talk
   : match "talk -" {
      : print "You {verb_phrase} to yourself, but it's a one-sided conversation.";
      : done;
   }
}

######################################
#  On command
######################################
on_command {
   // Self
   : match "examine me" {
      : print "Your name is Eldrid. You are a trainee elf who has just started working in Santa's workshop. You are clothed in the standard green tunic with red trim as worn by all Santa's elves.";
      : done;
   }
   : match "_ me" {
      : print "You can't {verb_phrase} yourself.";
      : done;
   }

   // Room 1: Lounge Room
   // Lounge room
   : if (is_present "lounge_room") {
      : match "examine room" {
         : print "It looks very festive at this time of year.";
         : done;
      }
   }
   // Floor/ground (floating object)
   : if (is_present "floor") {
      : match "examine floor" {
         : print "You're standing on it.";
         : done;
      }
   }
   // Roof/ceiling (floating object)
   : if (is_present "roof") {
      : match "examine roof" {
         : print "It stops things falling on your head.";
         : done;
      }
   }
   // Wall (floating object)
   : if (is_present "wall") {
      : match "examine wall" {
         : print "There's more than one.";
         : done;
      }
   }
   // Walls (floating object)
   : if (is_present "walls") {
      : match "examine walls" {
         : print "They hold the roof up.";
         : done;
      }
   }
   // Fireplace
   : if (is_present "fireplace") {
      : match "examine fireplace" {
         : print "It's a cosy fireplace that burns with a low flame.";
         : done;
      }
      : match "extinguish fireplace" {
         : print "You huff and puff to try and extinguish the fire, but that just fans the flames and the fire gets bigger.";
         : done;
      }
      : match "touch fireplace" {
         : print "Ouch! It's hot.";
         : done;
      }
   }
   // Mantelpiece (supporter)
   : if (is_present "mantelpiece") {
      : match "examine mantelpiece" {
         : disambiguate_s1 "present";
         : append "It's a mantel over the fireplace. ";
         : if (child_count(s1()) == 0) {
            : print "There's nothing on it.";
            : done;
         }
         : append "On the mantelpiece ";
         : if (child_count(s1()) == 1) {
            : append "is ";
         }
         : else {
            : append "are ";
         }
         : look_inside
            of = "mantelpiece"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true"
            must_be_known = "false";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "mantelpiece") {
            : do_all "mantelpiece";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "mantelpiece" && (s2() == "mantelpiece" || noun2_is "")) {
            : remove_from_container "mantelpiece" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "mantelpiece") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "mantelpiece") {
            : if (parent_of(s1()) == "mantelpiece") {
               : print "{uc_def_noun1_phrase} {is_or_are} already on the mantelpiece.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == mantelpiece_item_limit) {
               : print "You can't put any more items on the mantelpiece.";
               : done;
            }
            : if (weigh(s1()) > 2) {
               : print {(uc_def_noun1_phrase + " won't fit on the mantelpiece.")}
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "mantelpiece" quiet = "true";
            : print "You put {def_noun1_phrase} on the mantelpiece.";
            : done;
         }
      }
   }
   // Candle
   : if (is_present "candle") {
      : match "examine candle" {
         : append "You recognise it as one of Broomhilda's magic candles that never blows out, unless you blow it out yourself. It's ";
         : if (!is_candle_lit) {
            : append "not ";
         }
         : print "currently lit.";
         : done;
      }
      : match "light candle" {
         : if (is_candle_lit) {
            : print "It's already lit.";
            : done;
         }
         : if (!is_at "room01" && !is_at "room25") {
            : print "You have nothing to light it with.";
            : done;
         }
         : if (!is_carried "candle") {
            : print "You need to be holding the candle to light it.";
            : done;
         }
         : set_true "is_candle_lit";
         : if (is_at "room01") {
            : print "You light the candle in the fireplace.";
            : done;
         }
         : print "You light the candle in the brazier.";
         : done;
      }
      : match "extinguish candle" {
         : if (!is_candle_lit) {
            : print "It's already extinguished.";
            : done;
         }
         : if (!is_carried "candle") {
            : print "You need to be holding the candle to extinguish it.";
            : done;
         }
         : set_false "is_candle_lit";
         : if (is_at "room32") {
            : set_graphic graphic = "room32" target = "room32";
            : set_string var = "message" text = "You extinguish the candle.";
            : gosub "refresh";
         }
         : print "You extinguish the candle.";
         : done;
      }
   }

   // Christmas decorations
   : if (is_present "christmas_decoration" || is_present "christmas_decorations") {
      : match "examine decoration;examine decorations" {
         : print "{uc_def_noun1_phrase} {is_or_are} very pretty.";
         : done;
      }
   }
   // Lounge chair
   : if (is_present "lounge_chair") {
      : match "examine chair" {
         : print "It's a plush, red velvet lounge chair that's currently occupied by Santa Claus.";
         : done;
      }
   }
   // Santa Claus
   : if (is_present "santa_claus") {
      : match "examine claus" {
         : append "Santa Claus is a big, jolly fellow with a bushy white beard. He wears a red suit with white fur trim and a wide black belt with a large bronze buckle that struggles to hold his belly in. ";
         : if (has_talked_to_santa) {
            : print "He's snoozing now.";
         }
         : else {
            : print "He looks like he's waiting to tell you something. Maybe you should TALK TO SANTA.";
         }
         : done;
      }
      : match "talk claus" {
         : if (has_talked_to_santa) {
            : print "Shush, Santa's sleeping. He needs to get some rest before the big day tomorrow.";
            : done;
         }
         : set_true "has_talked_to_santa";
         : pocket "list";
         : print "\"Good morning Eldrid. I hope you slept well after your coming-of-age party last night. Today is your first day of training as one of my helpers. Unfortunately for you, today is also one of the busiest days of the year. I have a list of chores for you to do.\" He refers to the list.\n\"We have some last-minute orders for presents. Naughty children get a lump of coal. Nice children get the present they asked for. Check with Neldor in the mailroom downstairs to see what they want. I'm sure you can remember how to make the toys from your classes. Supplies are a bit low because of Covid-19, so if you can't get what you need from toy storage or supplies, you might have to scrounge around a bit. All the toys have to be finished and loaded onto the sleigh in time for Christmas Eve tomorrow. Also, go and see Mrs Claus in the kitchen and Volodar in the stable and see if there's anything they want you to do.\" He hands you the list.\n\"Good luck Eldrid. Now I'm going to get a bit of shut-eye before the big day tomorrow.\"";
         : done;
      }
      : match "give _" {
         : if (has_talked_to_santa) {
            : print "Santa rejects your kind offer with a loud snore.";
            : done;
         }
         : print "\"Thanks, Eldrid, but I really don't need anything at the moment.\"";
         : done;
      }
      : match "wake claus" {
         : if (has_talked_to_santa) {
            : print "Leave him be. He's got a big day tomorrow.";
            : done;
         }
         : print "He's not asleep.";
         : done;
      }
   }
   // Beard
   : if (is_present "beard") {
      : match "examine beard" {
         : print "It's big and bushy.";
         : done;
      }
      : match "get beard" {
         : print "That's a real beard, not a fake one. You can't just take it.";
         : done;
      }
   }
   // Belly
   : if (is_present "belly") {
      : match "examine belly" {
         : print "Just between you and me, I think it's too much milk and cookies.";
         : done;
      }
      : match "get belly" {
         : print "That seems to belong to Santa.";
         : done;
      }
   }
   // Belt
   : if (is_present "belt") {
      : match "examine belt" {
         : print "It's shiny black leather.";
         : done;
      }
      : match "get belt" {
         : print "If you take Santa's belt, his pants will fall down. You don't want him to get arrested, do you?";
         : done;
      }
   }
   // Buckle
   : if (is_present "buckle") {
      : match "examine buckle" {
         : print "It's very shiny and no doubt made of bronze.";
         : done;
      }
      : match "get buckle" {
         : print "It's attached to Santa's belt.";
         : done;
      }
   }
   // Fur
   : if (is_present "fur") {
      : match "examine fur" {
         : print "It's white and fluffy.";
         : done;
      }
      : match "get fur" {
         : print "It's attached to Santa's suit.";
         : done;
      }
   }
   // Suit
   : if (is_present "suit") {
      : match "examine suit" {
         : print "It's mostly red with white trim.";
         : done;
      }
      : match "get suit" {
         : print "If you take Santa's suit, he'll freeze to death when he's flying around the world in his sleigh.";
         : done;
      }
   }
   // List
   : if (is_present "list") {
      : match "examine list" {
         : print "It's the list of chores that Santa gave you. Perhaps you should READ THE LIST. It's colour-coded using some elvish magic: <red<2>> is the basic chores (before you know their details), <yellow<6>> is the detailed chores and <green<4>> is the completed chores.";
         : done;
      }
      : match "read list" {
         : append "^n^";
         : if (has_given_gingerbread) {
            : append "<Gave gingerbread to Mrs Claus<4>>\n";
         }
         : else_if (has_talked_to_mrs_claus) {
            : append "<Get gingerbread for Mrs Claus<6>>\n";
         }
         : else {
            : append "<Do chore for Mrs Claus<2>>\n";
         }
         : if (has_fed_reindeer) {
            : append "<Fed reindeer for Volodar<4>>\n";
         }
         : else_if (has_talked_to_volodar) {
            : append "<Feed reindeer for Volodar<6>>\n";
         }
         : else {
            : append "<Do chore for Volodar<2>>\n";
         }
         : if (parent_of "pop_gun" == "sleigh") {
            : append "<Got pop gun for Afram<4>>\n";
         }
         : else_if (has_asked_about_afram) {
            : append "<Get pop gun for Afram<6>>\n";
         }
         : else {
            : append "<Get present for Afram<2>>\n";
         }
         : if (parent_of "piggy_bank" == "sleigh") {
            : append "<Got piggy bank for Arya<4>>\n";
         }
         : else_if (has_asked_about_arya) {
            : append "<Get piggy bank for Arya<6>>\n";
         }
         : else {
            : append "<Get present for Arya<2>>\n";
         }
         : if (parent_of "skipping_rope" == "sleigh") {
            : append "<Got skipping rope for Cindy<4>>\n";
         }
         : else_if (has_asked_about_cindy) {
            : append "<Get skipping rope for Cindy<6>>\n";
         }
         : else {
            : append "<Get present for Cindy<2>>\n";
         }
         : if (parent_of "jack_box" == "sleigh") {
            : append "<Got jack-in-the-box for Jennifer<4>>\n";
         }
         : else_if (has_asked_about_jennifer) {
            : append "<Get jack-in-the-box for Jennifer<6>>\n";
         }
         : else {
            : append "<Get present for Jennifer<2>>\n";
         }
         : if (parent_of "tin_drum" == "sleigh") {
            : append "<Got tin drum for Jimmy<4>>\n";
         }
         : else_if (has_asked_about_jimmy) {
            : append "<Get tin drum for Jimmy<6>>\n";
         }
         : else {
            : append "<Get present for Jimmy<2>>\n";
         }
         : if (parent_of "kite" == "sleigh") {
            : append "<Got kite for Li<4>>\n";
         }
         : else_if (has_asked_about_li) {
            : append "<Get kite for Li<6>>\n";
         }
         : else {
            : append "<Get present for Li<2>>\n";
         }
         : if (parent_of "coal" == "sleigh") {
            : append "<Got lump of coal for Oliver<4>>\n";
         }
         : else_if (has_asked_about_oliver) {
            : append "<Get lump of coal for Oliver<6>>\n";
         }
         : else {
            : append "<Get present for Oliver<2>>\n";
         }
         : if (parent_of "teddy_bear" == "sleigh") {
            : append "<Got teddy bear for Samantha<4>>^m^\n";
         }
         : else_if (has_asked_about_samantha) {
            : append "<Get teddy bear for Samantha<6>>^m^\n";
         }
         : else {
            : append "<Get present for Samantha<2>>^m^\n";
         }
         : print "See Neldor to see what each child wants and put presents on sleigh when finished.";
         : done;
      }
   }
   // Christmas tree
   : if (is_present "christmas_tree") {
      : match "examine tree" {
         : print "It's a large Christmas tree decorated with baubles and tinsel. There are some Christmas presents under the tree.";
         : done;
      }
   }
   // Presents (floating object)
   : if (is_present "christmas_presents") {
      : match "examine presents" {
         : if (is_at "room01") {
            : print "They're all wrapped up, ready for handing out after Santa returns on Christmas Day. You wonder if any of them are for you.";
            : done;
         }
         : print "These are the presents for all the children across the world. Needless to say, there's one heck of a lot of presents.";
         : done;
      }
      : match "get presents" {
         : if (is_at "room01") {
            : print "Tsk, tsk. Your job is to make presents, not steal them.";
            : done;
         }
         : print "You can't take any of the presents that the other elves made or some poor child will be very unhappy on Christmas morning.";
         : done;
      }
   }

   // Room 2: Dining Hall
   // Dining hall
   : if (is_present "dining_hall") {
      : match "examine hall" {
         : print "There's no one here at the moment, as everyone is busy getting ready for Christmas.";
         : done;
      }
   }
   // Dining tables (supporter)
   : if (is_present "dining_tables") {
      : match "examine table;examine tables" {
         : disambiguate_s1 "present";
         : append "There's a row of long dining tables. ";
         : if (child_count(s1()) == 0) {
            : print "There's nothing on them.";
            : done;
         }
         : append "On one of the dining tables ";
         : if (child_count(s1()) == 1) {
            : append "is ";
         }
         : else {
            : append "are ";
         }
         : look_inside
            of = "dining_tables"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true"
            must_be_known = "false";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "dining_tables") {
            : do_all "dining_tables";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "dining_tables" && (s2() == "dining_tables" || noun2_is "")) {
            : remove_from_container "dining_tables" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "dining_tables") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "dining_tables") {
            : if (parent_of(s1()) == "dining_tables") {
               : print "{uc_def_noun1_phrase} {is_or_are} already on the dining tables.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == dining_table_item_limit) {
               : print "You can't put any more items on the dining tables.";
               : done;
            }
            : if (weigh(s1()) > 6) {
               : print "{uc_def_noun1_phrase} won't fit on the dining tables.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "dining_tables" quiet = "true";
            : print "You put {def_noun1_phrase} on one of the dining tables.^m^";
            : done;
         }
      }
   }
   // Bench seat
   : if (is_present "bench_seat") {
      : match "examine seat" {
         : print "It looks uncomfortable.";
         : done;
      }
   }
   // Bench seats
   : if (is_present "bench_seats") {
      : match "examine seats" {
         : print "They look uncomfortable.";
         : done;
      }
   }
   // Wine bottle (container)
   : if (is_present "wine_bottle") {
      : match "examine bottle" {
         : disambiguate_s1 "present";
         : append "It's a wine bottle. ";
         : if (child_count(s1()) == 0) {
            : print "There's nothing in it.";
            : done;
         }
         : append "In the wine bottle ";
         : if (child_count(s1()) == 1) {
            : append "is ";
         }
         : else {
            : append "are ";
         }
         : look_inside of = "wine_bottle" extract_the = "description" store_results_in = "list_object_buffer" make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "open bottle;unseal bottle;remove cork" {
         : if (is_bottle_open) {
            : print "It's not sealed.";
            : done;
         }
         : set_sentence "get cork from bottle";
      }
      : match "close bottle;seal bottle;replace cork" {
         : if (!is_bottle_open) {
            : print "It's already sealed.";
            : done;
         }
         : if (!is_carried "cork") {
            : print "You don't have a cork.";
            : done;
         }
         : set_sentence "put cork in bottle";
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "wine_bottle") {
            : do_all "wine_bottle";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "wine_bottle" && (s2() == "wine_bottle" || noun2_is "")) {
            : if (s1() != "cork" && !is_bottle_open) {
               : print "You'll have to remove the cork first.";
               : done;
            }
            : if (s1() == "cork") {
               : set_true "is_bottle_open";
            }
            : remove_from_container "wine_bottle" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "wine_bottle") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "wine_bottle") {
            : if (parent_of(s1()) == "wine_bottle") {
               : print "{uc_def_noun1_phrase} {is_or_are} already in the wine bottle.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (!is_bottle_open) {
               : print "You'll have to remove the cork first.";
               : done;
            }
            : if (child_count(s2()) == bottle_item_limit) {
               : print "You can't put anything else in the wine bottle.";
               : done;
            }
            : if (weigh(s1()) > 1) {
               : print "{uc_def_noun1_phrase} won't fit in the wine bottle.";
               : done;
            }
            : if (s1() == "cork") {
               : set_false "is_bottle_open";
            }
           : insert_in_container "wine_bottle" quiet = "true";
            : print "You put {def_noun1_phrase} in the wine bottle.";
            : done;
         }
      }
      : match "fill bottle" {
         : if (!is_at "room08") {
            : print "There's nothing to fill it with.";
            : done;
         }
         : if (parent_of "water" == "wine_bottle") {
            : print "The wine bottle is already full of water.";
            : done;
         }
         : append "You ";
         : if (parent_of "cork" == "wine_bottle") {
            : append "remove the cork, ";
         }
         : create "water" target = "wine_bottle";
         : append "turn the tap on, fill the bottle with water, then turn the tap off";
         : if (parent_of "cork" == "wine_bottle") {
            : append " and replace the cork";
         }
         : print ".";
         : done;
      }
      : match "empty bottle" {
         : if (!is_carried "wine_bottle") {
            : print "You don't have any bottle.";
            : done;
         }
         : if (parent_of "water" != "wine_bottle") {
            : print "There's nothing in it.";
            : done;
         }
         : destroy "water";
         : append "You ";
         : if (parent_of "cork" == "wine_bottle") {
            : append "remove the cork and ";
         }
         : append "pour the water out of the bottle. It soaks into the ground.";
            : if (parent_of "cork" == "wine_bottle") {
            : append " You then replace the cork.";
         }
         : print "";
         : done;
      }
   }
   // Cork
   : if (is_present "cork") {
      : match "examine cork" {
         : print "It's an old-fashioned cork, not one of those modern fangled plastic things.";
         : done;
      }
   }
   // Balloon
   : if (is_present "balloon") {
      : match "examine balloon" {
         : print "It's one of the balloons from last night's coming-of-age party. It's made of rubber and fully inflated.";
         : done;
      }
      : match "deflate balloon" {
         : print "You struggle with the knot, but it's tied too tight. It looks like the only way to {verb_phrase} that balloon is to burst it.";
         : done;
      }
      : match "break balloon" {
         : print "It's made of strong rubber and just bounces back into shape. You probably need something sharp to burst it.";
         : done;
      }
      : match "burst balloon" {
         : if (preposition2_is "with" && noun2_is "") {
            : print "You'll have to tell me what to {verb_phrase} it with.";
            : done;
         }
         : if (preposition2_is "with" && !is_carried (s2())) {
            : print {("You aren't carrying any " + original "noun2" + ".")}
            : done;
         }
         : if (preposition2_is "with" && noun2_is "skates") {
            : print "That's a good idea, but if you {verb_phrase} the balloon with the ice skates, you'll surely damage the rubber. You need something more subtle.";
            : done;
         }
         : if (preposition2_is "with" && noun2_is "candle" && is_candle_lit) {
            : print "That's a good idea, but if you {verb_phrase} the balloon with the candle, you'll surely melt the rubber. You need something more subtle.";
            : done;
         }
         : if (preposition2_is "with" && !noun2_is "needle") {
            : print {("You can't {verb_phrase} the balloon with a " + original "noun2" + ".")}
            : done;
         }
         : if (!is_carried "needle") {
            : print "You need something sharp to {verb_phrase} the balloon.";
            : done;
         }
         : set_string var = "message" text = "";
         : if (preposition2_is "" && noun2_is "") {

            : set_string var = "message" text = "^n^(with the needle)\n";
         }
         : destroy "balloon";
         : create "rubber";
         : set_string var = "message" {(message + "You stick the needle into the balloon. BANG! The balloon bursts and now you've got nothing but a sheet of rubber.^m^")}
         : gosub "refresh";
      }
      : match "cut balloon" {
         : print "That's a good idea, but if you {verb_phrase} the balloon with the ice skates, you'll surely damage the rubber. You need something more subtle.";
         : done;
      }
      : match "mount balloon" {
         : print "You bounce off it like a trampoline and the balloon returns to its original shape. Man, that is one tough balloon.";
         : done;
      }
   }
   // Sheet of rubber
   : if (is_present "rubber") {
      : match "examine rubber" {
         : print "It's the sheet of rubber left over from the burst balloon.";
         : done;
      }
   }

   // Room 3: Kitchen
   // Kitchen
   : if (is_present "kitchen") {
      : match "examine kitchen" {
         : print "This is Mrs Claus' domain. This is where she does all the cooking for the elves. Some of the female elves help her out, but they're probably all busy at the moment.";
         : done;
      }
   }
   // Cooking utensil
   : if (is_present "cooking_utensil") {
      : match "examine utensil" {
         : print "It's just one of the normal things you'd expect to find in any kitchen, like pots, pans, plates, dishes, jars, jugs and bowls.";
         : done;
      }
      : match "get utensil" {
         : print "\"Hey, leave that alone.\" Whoops. You don't want to get in the bad books with Mrs Claus or you won't get any supper.";
         : done;
      }
   }
   // Cooking utensils
   : if (is_present "cooking_utensils") {
      : match "examine utensils" {
         : print "It's just some of the normal things you'd expect to find in any kitchen, like pots, pans, plates, dishes, jars, jugs and bowls.";
         : done;
      }
      : match "get utensils" {
         : print "\"Hey, leave them alone.\" Whoops. You don't want to get in the bad books with Mrs Claus or you won't get any supper.";
         : done;
      }
   }
   // Mrs Claus
   : if (is_present "mrs_claus") {
      : match "examine claus" {
         : print "Santa's wife is quite...er...well rounded, just like Santa. Everybody calls her Mrs Claus. You've been living in Santa's workshop for 16 years and you have no idea what her first name is.";
         : done;
      }
      : match "ask claus" {
         : if (preposition2_is "" && noun2_is "") {
            : print "You need to ASK MRS CLAUS ABOUT something (or just ASK ABOUT something) if you want information.";
            : done;
         }
         : if (preposition2_is "about" && noun2_is "") {
            : print "Mrs Claus looks over her glasses and gives you a strange look. \"What do you want to ASK ABOUT?\"";
            : done;
         }
         : if (preposition2_is "about" && !noun2_is "") {
            : set_sentence "ask about $2";
         }
      }
      : match "ask _" {
         : if (preposition1_is "about") {
            : if (noun1_is "") {
               : print "Mrs Claus gives you a strange look. \"What do you want to ASK ABOUT?\"";
               : done;
            }
            : if (noun1_is "gingerbread") {
               : if (has_given_gingerbread) {
                  : print "I'm using it for the gingerbread house.";
                  : done;
               }
               : print "It's on the top shelf in the pantry. Would you mind getting it for me?";
               : done;
            }
            : print "\"I don't know anything about that.\"";
            : done;
         }
      }
      : match "give _" {
         : if (noun1_is "cookies") {
            : print "\"No thanks. I have to watch my figure.\"";
            : done;
         }
         : if (noun1_is "gingerbread") {
            : destroy "gingerbread";
            : set_true "has_given_gingerbread";
            : add var ="score" value = "10";
            : success;
            : print "\"Oh, thank you dearie. Now I'll be able to finish the gingerbread house.\"";
            : done;
         }
         : if (has_given_gingerbread) {
            : print "\"Thank you Eldrid, but I'm happy now that I've got the gingerbread. I don't need anything else.\"";
            : done;
         }
         : print "\"Thank you, Eldrid, but the only thing I need at the moment is the gingerbread.\"";
         : done;
      }
      : match "talk claus" {
         : if (has_talked_to_mrs_claus) {
            : if (has_given_gingerbread) {
               : print "\"Run along now Eldrid. I'm sure there's other chores for you to do.\"";
               : done;
            }
            : print "\"Have you got that gingerbread yet?\"";
            : done;
         }
         : set_true "has_talked_to_mrs_claus";
         : print "\"Hello, Eldrid. I'm glad you're here. Could you do me a favour? I'm going to make a gingerbread house for Christmas Day, but the gingerbread is on the top shelf in the pantry and I can't reach it. Would you be a good lad and get it down for me?\"";
         : done;
      }
   }

   // Room 4: Pantry
   // Pantry
   : if (is_present "pantry") {
      : match "examine pantry" {
         : print "This is where all the food is kept. It looks like there's a shortage of supplies at the moment. That will be sorted out once Santa arrives back after all the deliveries on Christmas Eve. He always comes back with lots of milk and cookies and carrots for the reindeer.";
         : done;
      }
   }
   // Pantry shelves
   : if (is_present "pantry_shelves") {
      : match "examine shelves" {
         : disambiguate_s1 "present";
         : append "You can't see what's on the top shelf, because it's out of reach";
         : if (is_on_box) {
            : append ", even though you're standing on a box";
         }
         : if (has_talked_to_mrs_claus && has_not_created "gingerbread") {
            : append ". However, you know that's where the gingerbread is stored because Mrs Claus told you so";
         }
         : if (has_talked_to_mrs_claus  && !has_not_created "gingerbread") {
            : append ". However, you know that's where the gingerbread used to be before you got it down";
         }
         : if (child_count(s1()) == 0) {
            : print ". There's nothing on the other shelves.";
            : done;
         }
         : append ". On the other shelves ";
         : if (child_count(s1()) == 1) {
            : append "is ";
         }
         : else {
            : append "are ";
         }
         : look_inside
            of = "pantry_shelves"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "pantry_shelves") {
            : do_all "pantry_shelves";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "pantry_shelves" && (s2() == "pantry_shelves" || noun2_is "")) {
            : remove_from_container "pantry_shelves" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "pantry_shelves") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "pantry_shelves") {
            : if (parent_of(s1()) == "pantry_shelves") {
               : print "{uc_def_noun1_phrase} {is_or_are} already on the shelves.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == shelves_item_limit) {
               : print "You can't put any more items on the shelves.";
               : done;
            }
            : if (weigh(s1()) > 5) {
               : print "{uc_def_noun1_phrase} won't fit on the shelves.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "pantry_shelves" quiet = "true";
            : print "You put {def_noun1_phrase} on the shelves.";
            : done;
         }
      }
      : match "climb shelves" {
         : if (is_on_box) {
            : print "The box is unsteady. You'll need to get off the box first.";
            : done;
         }
         : print "You step onto the first shelf, then lose your balance and fall onto your butt. Ouch! Better not try that again.";
         : done;
      }
      : match "reach shelves" {
         : append "You're an elf, not a giant. You can't reach the top shelf. ";
         : if (is_on_box) {
            : print "Even though you're standing on a box, the top shelf is still out of reach. You need to get higher somehow.";
            : done;
         }
         : print "Maybe you could stand on something.";
         : done;
      }
   }
   // Cookie box (container)
   : if (is_present "cookie_box") {
      : match "examine box" {
         : disambiguate_s1 "present";
         : append "It's a box with a hinged lid and a latch to keep it shut. ";
         : if (!is_box_open) {
            : print "You can't see what's inside because it's closed.";
            : done;
         }
         : append "It's currently open. The cookie box contains ";
         : look_inside
            of = "cookie_box"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "open box" {
         : if (is_box_open) {
            : print "It's already open.";
            : done;
         }
         : if (is_on_box) {
            : print "You can't open the cookie box while you're standing on it.";
            : done;
         }
         : set_true "is_box_open";
         : append "You open the cookie box to reveal ";
         : look_inside
            of = "cookie_box"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "close box" {
         : if (!is_box_open) {
            : print "It's already closed.";
            : done;
         }
         : set_false "is_box_open";
         : print "You {verb_phrase} the cookie box.";
         : done;
      }
       : match "mount box" {
         : if (is_carried "cookie_box") {
            : print "You'll have to drop it first.";
            : done;
         }
         : if (is_box_open) {
            : print "You'll have to close it first.";
            : done;
         }
         : if (is_on_box) {
            : print "You're already on the cookie box.";
            : done;
         }
         : set_true "is_on_box";
         : print "You get onto the cookie box.";
         : done;
      }
      : match "dismount box" {
         : if (!is_on_box) {
            : print "You're not on the cookie box.";
            : done;
         }
         : set_false "is_on_box";
         : print "You get off the cookie box.";
         : done;
      }
      : match "get box" {
         : if (is_on_box) {
            : print "You can't {verb_phrase} the cookie box while you're standing on it.";
            : done;
         }
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "cookie_box") {
            : if (!is_box_open) {
               : print "You'll have to open the cookie box first.";
               : done;
            }
            : do_all "cookie_box";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "cookie_box" && is_box_open && (s2() == "cookie_box" || noun2_is "")) {
            : remove_from_container "cookie_box" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "cookie_box") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "cookie_box") {
            : if (!is_box_open) {
               : print "You'll have to open the cookie box first.";
               : done;
            }
            : if (parent_of(s1()) == "cookie_box") {
               : print "{uc_def_noun1_phrase} {is_or_are} already in the cookie box.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == cookie_box_item_limit) {
               : print "You can't put any more items in the cookie box.";
               : done;
            }
            : if (weigh(s1()) > 3) {
               : print "{uc_def_noun1_phrase} won't fit in the cookie box.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "cookie_box" quiet = "true";
            : print "You put {def_noun1_phrase} in the cookie box.";
            : done;
         }
      }
      : match "empty box" {
         : disambiguate_s1 "present";
         : if (!is_box_open) {
            : print "You can't empty the cookie box while it's closed.";
            : done;
         }
         : if (child_count(s1()) == 0) {
            : print "It's already empty.";
            : done;
         }
         : look_inside extract_the = "id" of = "cookie_box" store_results_in = "list_object_buffer";
         : collection_iterate collection = "list_object_buffer" {
            : create {entity -> (item())}
         }
         : set_string var = "message" text = "You empty the cookie box.";
         : gosub "refresh";
      }
   }
   // Cookies
   : if (is_present "cookies") {
      : match "examine cookies" {
         : print "They're choc-chip cookies. Yum.";
         : done;
      }
      : match "eat cookies" {
         : print "Not now. It might spoil your dinner.";
         : done;
      }
   }
   // Jam tin (container)
   : if (is_present "jam_tin") {
      : match "examine tin" {
         : disambiguate_s1 "present";
         : append "It's an industrial-sized jam tin, about 45 cm in diameter. The jam tin contains ";
         : look_inside
            of = "jam_tin"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "jam_tin") {
            : do_all "jam_tin";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "jam_tin" && (s2() == "jam_tin" || noun2_is "")) {
            : remove_from_container "jam_tin" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "jam_tin") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "jam_tin") {
            : if (parent_of(s1()) == "jam_tin") {
               : print "{uc_def_noun1_phrase} {is_or_are} already in the jam tin.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == jam_tin_item_limit) {
               : print "You can't put any more items in the jam tin.";
               : done;
            }
            : if (weigh(s1()) > 2) {
               : print "{uc_def_noun1_phrase} won't fit in the jam tin.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "jam_tin" quiet = "true";
            : print "You put {def_noun1_phrase} in the jam tin.";
            : done;
         }
      }
      : match "empty tin" {
         : disambiguate_s1 "present";
         : if (child_count(s1()) == 0) {
            : print "It's already empty.";
            : done;
         }
         : look_inside extract_the = "id" of = "jam_tin" store_results_in = "list_object_buffer";
         : collection_iterate collection = "list_object_buffer" {
            : create {entity -> (item())}
         }
         : set_string var = "message" text = "You empty the jam tin.";
         : gosub "refresh";
      }
   }
   // Carrots
   : if (is_present "carrots") {
      : match "examine carrots" {
         : print "You count 16 carrots.";
         : done;
      }
      : match "eat carrots" {
         : print "You'd better not. Those are for the reindeer.";
         : done;
      }
   }
   // Gingerbread
   : if (is_present "gingerbread") {
      : match "examine gingerbread" {
         : print "It's a large slab of brown gingerbread that looks like it came from the house in 'Hansel and Gretel'.";
         : done;
      }
      : match "eat gingerbread" {
         : print "It's as hard as a rock. I don't think it was meant for eating.";
         : done;
      }
   }

   // Room 5: Upstairs Hallway (east)
   // Hallway (floating object)
   : if (is_present "hallway") {
      : match "examine hallway" {
         : if (is_at "room05" || is_at "room09" || is_at "room15") {
            : print "This is the eastern end of the hallway. It extends further to the west.";
            : done;
         }
         : print "This is the western end of the hallway. It extends further to the east.";
         : done;
      }
   }
   // Stairs
   : if (is_present "stairs") {
      : match "examine stairs" {
         : if (is_at "room05") {
            : print "They lead down to the ground floor.";
            : done;
         }
         : print "They lead up to the first floor.";
         : done;
      }
      : match "climb stairs;descend stairs" {
         : if (is_at "room05") {
            : goto "room09";
            : redescribe;
         }
      }
      : match "climb stairs;ascend stairs" {
         : if (is_at "room09") {
            : goto "room05";
            : redescribe;
         }
      }
   }

   // Room 6: Upstairs Hallway (west)
   // Window (floating object)
   : if (is_present "window") {
      : match "examine window" {
         : if (is_at "room02" || is_at "room03" || is_at "room21") {
            : print "You can see daylight outside.";
            : done;
         }
         : if (is_at "room22" || is_at "room28" || is_at "room29" || is_at "room30") {
            : print "You can't see inside.";
            : done;
         }
         : append "The window overlooks the snowy countryside outside Santa's workshop. It's all frosted up at the moment, so you can't see what's outside, but you know that you can normally see the ";
         : if (is_at "room06") {
            : append "coal mine in the distance";
         }
         : if (is_at "room10") {
            : append "vegetable garden";
         }
         : if (is_at "room18") {
            : append "dump";
         }
         : print " when it's clear.";
         : done;
      }
      : match "open window" {
         : print "Don't be silly. If you open the window, you'll let in all the chilly Arctic air and everyone in Santa's workshop will freeze to death.";
         : done;
      }
      : match "clean window" {
         : print "The frost is on the outside.";
         : done;
      }
   }
   // Door
   : if (is_present "door") {
      : match "examine door" {
         : if (is_at "room06") {
            : print "It's the door to Santa's bedroom.";
            : done;
         }
         : if (is_at "room24") {
            : print "It's the door to the stable.";
            : done;
         }
         : print "It's the door to Santa's workshop.";
         : done;
      }
      : match "open door" {
         : if (is_at "room06") {
            : print "You don't dare do that. It's the door to Santa's bedroom and that's off limits to all elves.";
            : done;
         }
         : print "There's no need to open it. Just go north to open it automatically.";
         : done;
      }
      : match "close door" {
         : print "It's already closed.";
         : done;
      }
   }

   // Room 7: Elves' Bunkroom
   // Elves' bunkroom
   : if (is_present "elves_bunkroom") {
      : match "examine bunkroom" {
         : print "There's no one here at the moment. Everyone's busy preparing for Christmas.";
         : done;
      }
   }
   // Rows of bunks
   : if (is_present "rows_bunks") {
      : match "examine bunks" {
         : print "There are lots and lots of bunks. Yours is the lower bunk on the right.";
         : done;
      }
   }
   // Your bunk (supporter)
   : if (is_present "bunk") {
      : match "examine bunk" {
         : disambiguate_s1 "present";
         : append "Your bunk looks very cosy. It sure is tempting to GET ON THE BUNK. ";
         : if (child_count(s1()) == 0) {
            : print "There's nothing on it.";
            : done;
         }
         : append "On the bunk ";
         : if (child_count(s1()) == 1) {
            : append "is ";
         }
         : else {
            : append "are ";
         }
         : look_inside
            of = "bunk"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "bunk") {
            : do_all "bunk";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "bunk" && (s2() == "bunk" || noun2_is "")) {
            : if (noun1_is "pillow") {
               : print "Your mother taught you that there's a place for everything and everything in its place and the pillow's place is on your bunk.";
               : done;
            }
            : if (noun1_is "sheets") {
               : print "If you take the sheets, you'll have nothing to sleep on tonight.";
               : done;
            }
            : if (noun1_is "blanket") {
               : print "If you take the blanket, you'll freeze to death in your sleep.";
               : done;
            }
            : remove_from_container "bunk" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "bunk") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "bunk") {
            : if (parent_of(s1()) == "bunk") {
               : print "{uc_def_noun1_phrase} {is_or_are} already on your bunk.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == bunk_item_limit) {
               : print "You can't put any more items on your bunk.";
               : done;
            }
            : if (weigh(s1()) > 6) {
               : print "{uc_def_noun1_phrase} won't fit on your bunk.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "bunk" quiet = "true";
            : print "You put {def_noun1_phrase} on your bunk.";
            : done;
         }
      }
      : match "enter bunk;mount bunk" {
         : set_string var = "message" text = "You jump onto your bunk";
         : if (has_not_created "spring") {
            : create "spring";
            : set_string var = "message" {(message + ". Ouch! Something sticks into you, so you get off the bunk to see what it is. One of the springs is sticking out of the mattress, so you pull it out and drop it on the floor.")}
            : gosub "refresh";
         }
         : else {
            : set_string var = "message" {(message + ", then change your mind and get up again. This is no time to be slacking off. It's your first day on the job.")}
            : print {(message)}
            : done;
         }
      }
      : match "sleep -" {
         : print "If you want to have a sleep, you'll have to get on your bunk first.";
         : done;
      }
   }
   // Pillow
   : if (is_present "pillow") {
      : match "examine pillow" {
         : print "It looks very comfy.";
         : done;
      }
   }
   // Sheets
   : if (is_present "sheets") {
      : match "examine sheets" {
         : print "They're freshly washed.";
         : done;
      }
   }
   // Blanket
   : if (is_present "blanket") {
      : match "examine blanket" {
         : print "It's nice and warm.";
         : done;
      }
   }
   // Spring
   : if (is_present "spring") {
      : match "examine spring" {
         : print "It's a spiral spring from your mattress. It's very springy.";
         : done;
      }
   }
   // Your foot locker (container)
   : if (is_present "foot_locker") {
      : match "examine locker" {
         : disambiguate_s1 "present";
         : append "It's a small metal locker at the foot of your bunk. I guess that's why they call it a foot locker. ";
         : if (!is_foot_locker_open) {
            : print "You can't see what's inside because it's currently closed.";
            : done;
         }
         : append "It's currently open. The foot locker contains ";
         : look_inside
            of = "foot_locker"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "open locker" {
         : if (is_foot_locker_open) {
            : print "It's already open.";
            : done;
         }
         : set_true "is_foot_locker_open";
         : append "You open the foot locker to reveal ";
         : look_inside
            of = "foot_locker"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "close locker" {
         : if (!is_foot_locker_open) {
            : print "It's already closed.";
            : done;
         }
         : set_false "is_foot_locker_open";
         : print "You close the foot locker.";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "foot_locker") {
            : if (!is_foot_locker_open) {
               : print "You'll have to open it first.";
               : done;
            }
            : do_all "foot_locker";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "foot_locker" && is_foot_locker_open && (s2() == "foot_locker" || noun2_is "")) {
            : remove_from_container "foot_locker" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "foot_locker") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "foot_locker") {
            : if (!is_foot_locker_open) {
               : print "You'll have to open the foot locker first.";
               : done;
            }
            : if (parent_of(s1()) == "foot_locker") {
               : print "{uc_def_noun1_phrase} is already in the foot locker.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == foot_locker_item_limit) {
               : print "You can't put any more items in your foot locker.";
               : done;
            }
            : if (weigh(s1()) > 4) {
               : print "{uc_def_noun1_phrase} won't fit in your foot locker.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "foot_locker" quiet = "true";
            : print "You put {def_noun1_phrase} in your foot locker.";
            : done;
         }
      }
      : match "mount locker" {
         : if (is_foot_locker_open) {
            : print "You'll have to close it first.";
            : done;
         }
         : print "You step onto your foot locker, survey your surroundings and see nothing interesting, so step back down again.";
         : done;
      }
      : match "empty locker" {
         : if (!is_foot_locker_open) {
            : print "You can't empty the foot locker while it's closed.";
            : done;
         }
         : disambiguate_s1 "present";
         : if (child_count(s1()) == 0) {
            : print "It's already empty.";
            : done;
         }
         : look_inside extract_the = "id" of = "foot_locker" store_results_in = "list_object_buffer";
         : collection_iterate collection = "list_object_buffer" {
            : create {entity -> (item())}
         }
         : set_string var = "message" text = "You empty the foot locker.";
         : gosub "refresh";
      }
   }
   // Your jumper
   : if (is_present "jumper") {
      : match "examine jumper" {
         : print "This is the jumper that your mother knitted for your coming-of-age. You're a bit embarrassed to wear it, because she knitted '<TRAINEE ELF<10>>' across the front of it.";
         : done;
      }
      : match "cut jumper" {
         : print "Although it is very tempting to {verb_phrase} your jumper into little pieces, your mother would hit the roof when she found out, so you decide against it.";
         : done;
      }
      : match "remove jumper" {
         : if (is_at "cold_zone") {
            : print "Are you crazy? You'll freeze to death in the Arctic snow if you're not wearing something warm.";
            : done;
         }
      }
      : match "tear jumper" {
         : print "Although it is very tempting to {verb_phrase} your jumper into little pieces, your mother would tear strips off you when she found out, so you decide against it.";
         : done;
      }
   }

   // Room 8: Lavatory
   // Toilet
   : if (is_present "toilet") {
      : match "examine toilet" {
         : print "It's an old-fashioned toilet. Santa promised to install a modern porcelain contraption, but the budget has been tight this year.";
         : done;
      }
      : match "close toilet" {
         : print "You can't close the lid, because the hinge is rusty.";
         : done;
      }
      : match "go toilet" {
         : if (preposition1_is "to") {
            : set_sentence "use toilet";
         }
      }
      : match "open toilet" {
         : print "The lid is already open and that's the way it'll stay, as the hinge is rusty.";
         : done;
      }
      : match "use toilet" {
         : if (has_used_toilet) {
            : print "You've already used the toilet. Maybe later.";
            : done;
         }
         : set_true "has_used_toilet";
         : print "Ahhh, that feels better. Don't forget to wash your hands.";
         : done;
      }
   }
   // Toilet paper
   : if (is_present "toilet_paper") {
      : match "examine paper" {
         : print "It's a roll of 3-ply toilet paper - a scarce commodity in these times.";
         : done;
      }
      : match "get paper" {
         : print "You can't {verb_phrase} that. What if someone needs it?";
         : done;
      }
   }
   // Cabinet
   : if (is_present "cabinet") {
      : match "examine cabinet" {
         : print "There's nothing in the cabinet of any interest, just cleaners and disinfectants.";
         : done;
      }
      : match "close cabinet" {
         : print "It's already closed.";
         : done;
      }
      : match "open cabinet" {
         : print "You open the cabinet, find nothing of interest and close it again.";
         : done;
      }
   }

   // Fixtures
   : if (is_present "fixtures") {
      : match "examine fixtures" {
         : print "They're nothing special, just the normal fixtures that you'd expect to find in any lavatory.";
         : done;
      }
   }
   // Hand basin (container)
   : if (is_present "hand_basin") {
      : match "examine basin" {
         : disambiguate_s1 "present";
         : append "It's a hand basin for washing your hands. The hand basin contains ";
         : look_inside
            of = "hand_basin"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "hand_basin") {
            : do_all "hand_basin";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "hand_basin" && (s2() == "hand_basin" || noun2_is "")) {
            : remove_from_container "hand_basin" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "hand_basin") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "hand_basin") {
            : if (parent_of(s1()) == "hand_basin") {
               : print "{uc_def_noun1_phrase} {is_or_are} already in the hand basin.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == hand_basin_item_limit) {
               : print "You can't put any more items in the hand basin.";
               : done;
            }
            : if (weigh(s1()) > 2) {
               : print "{uc_def_noun1_phrase} won't fit in the hand basin.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "hand_basin" quiet = "true";
            : print "You put {def_noun1_phrase} in the hand basin.";
            : done;
         }
      }
      : match "empty basin" {
         : disambiguate_s1 "present";
         : if (child_count(s1()) == 0) {
            : print "It's already empty.";
            : done;
         }
         : look_inside extract_the = "id" of = "hand_basin" store_results_in = "list_object_buffer";
         : collection_iterate collection = "list_object_buffer" {
            : create {entity -> (item())}
         }
         : set_string var = "message" text = "You empty the hand basin.";
         : gosub "refresh";
      }
      : match "clean hands" {
         : print "You wash your hands in the hand basin.";
         : done;
      }
   }
   // Water
   : match "get water" {
      : if (!is_present "hand_basin") {
         : print "There's no water here.";
         : done;
      }
      : if (!is_carried "wine_bottle") {
         : print "You need something to put it in.";
         : done;
      }
      : if (parent_of "water" == "wine_bottle") {
         : print "You've already got a wine bottle full of water.";
         : done;
      }
      : append "You ";
      : if (parent_of "cork" == "wine_bottle") {
         : append "remove the cork, ";
      }
      : create "water" target = "wine_bottle";
      : append "turn the tap on, fill the bottle with water, then turn the tap off";
         : if (parent_of "cork" == "wine_bottle") {
         : append " and replace the cork";
      }
      : print ".";
      : done;
   }
   : match "drop water;pour water" {
      : if (!is_carried "wine_bottle") {
         : print "You don't have any water.";
         : done;
      }
      : if (parent_of "water" != "wine_bottle") {
         : print "You've got a wine bottle, but there's no water in it.";
         : done;
      }
      : destroy "water";
      : append "You ";
      : if (parent_of "cork" == "wine_bottle") {
         : append "remove the cork and ";
      }
      : append "pour the water out of the wine bottle. It soaks into the ground.";
         : if (parent_of "cork" == "wine_bottle") {
         : append " You then replace the cork.";
      }
      : print "";
      : done;
   }
   : match "drink water" {
      : if (is_at "room08" && !is_carried "wine_bottle") {
         : print "It's too awkward to drink the water from the hand basin. You need something to put it in.";
         : done;
      }
      : if (!is_carried "wine_bottle" || parent_of "water" != "wine_bottle") {
         : print "You don't have any water.";
         : done;
      }
      : destroy "water";
      : append "You ";
      : if (parent_of "cork" == "wine_bottle") {
         : append "remove the cork and ";
      }
      : append "drink the water out of the wine bottle. Glug, glug, glug.";
         : if (parent_of "cork" == "wine_bottle") {
         : append " You then replace the cork.";
      }
      : print "";
      : done;
   }
   // Waste basket (container)
   : if (is_present "waste_basket") {
      : match "examine basket" {
         : disambiguate_s1 "present";
         : append "It's a waste basket. The waste basket contains ";
         : look_inside
            of = "waste_basket"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "waste_basket") {
            : do_all "waste_basket";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "waste_basket" && (s2() == "waste_basket" || noun2_is "")) {
            : if (noun1_is "tissues") {
               : print "Ooh, gross. No thank you. Who knows what germs may live in there?";
               : done;
            }
            : remove_from_container "waste_basket" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "waste_basket") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "waste_basket") {
            : if (parent_of(s1()) == "waste_basket") {
               : print "{uc_def_noun1_phrase} {is_or_are} already in the waste basket.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == waste_basket_item_limit) {
               : print "You can't put any more items in the waste basket.";
               : done;
            }
            : if (weigh(s1()) > 2) {
               : print "{uc_def_noun1_phrase} won't fit in the waste basket.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "waste_basket" quiet = "true";
            : print "You put {def_noun1_phrase} in the waste basket.";
            : done;
         }
      }
      : match "empty basket" {
         : disambiguate_s1 "present";
         : if (child_count(s1()) == 0) {
            : print "It's already empty.";
            : done;
         }
         : look_inside extract_the = "id" of = "waste_basket" store_results_in = "list_object_buffer";
         : collection_iterate collection = "list_object_buffer" {
            : create {entity -> (item())}
         }
         : set_string var = "message" text = "You empty the waste basket.";
         : gosub "refresh";
      }
   }
   // Used tissues
   : if (is_present "used_tissues") {
      : match "examine tissues" {
         : print "They're used tissues.";
         : done;
      }
      : match "get tissues" {
         : print "Ooh, gross. No thank you. Who knows what germs may live in there?";
         : done;
      }
   }
   // Cardboard cylinder
   : if (is_present "cardboard_cylinder") {
      : match "examine cylinder" {
         : print "It's a cardboard cylinder from a used roll of toilet paper.";
         : done;
      }
   }

   // Room 9: Downstairs Hallway (east)

   // Room 10: Downstairs Hallway (west)

   // Room 11: Classroom
   // Classroom
   : if (is_present "classroom") {
      : match "examine classroom" {
         : print "This is where you used to take classes on toy making prior to your coming-of-age.";
         : done;
      }
   }
   // Blackboard
   : if (is_present "blackboard") {
      : match "examine blackboard" {
         : print "It's a green blackboard. You wonder why it's called a blackboard when it's painted green.";
         : done;
      }
      : match "write blackboard" {
         : print "You consider writing 'Neldor is a baboon' on the blackboard, but you can't find any chalk.";
         : done;
      }
   }
   // Desks
   : if (is_present "desks") {
      : match "examine desks" {
         : print "This is where you used to take notes on Neldor's boring classes about Christmas traditions and the making of toys.";
         : done;
      }
   }
   // Chairs
   : if (is_present "chairs") {
      : match "examine chairs" {
         : print "They are elf-sized chairs for elf-sized bottoms. You don't think Mr and Mrs Claus would fit on any of these chairs.";
         : done;
      }
      : match "sit chairs" {
         : print "You've spent plenty of time sitting on these chairs, thank you very much. You don't want to spend any more time sitting on them.";
         : done;
      }
   }
   // Bookcase
   : if (is_present "bookcase") {
      : match "examine bookcase" {
         : print "It contains a few books and folders and audio visual materials, but nothing that will help with your chores.";
         : done;
      }
   }

   // Text book
   : if (is_present "text_book") {
      : match "examine book" {
         : append "It's an old leather-bound text book with the title embossed in gold. It's currently ";
         : if (is_text_book_open) {
            : append "open.";
         }
         : else {
            : append "closed.";
         }
         : print " Perhaps you should READ THE BOOK.";
         : done;
      }
      : match "read book" {
         : if (preposition1_is "") {
            : if (is_text_book_open) {
               : print "^n^CONTENTS\nBall, Bat, Board game, Book, Building blocks, Cannon, Clown, Doll's house, Dump truck, Ice skates, Jack-in-the-box, Jacks, Jigsaw puzzle, Kite, Marbles, Piggy bank, Pop gun, Rag doll, Robot, Rocking horse, Sailing boat, Skipping rope, Sled, Soldiers, Spinning top, Tea set, Teddy bear, Telescope, Tin drum, Toy piano, Train, Tricycle, Trumpet, Wagon, Xylophone, Yoyo.^m^\nYou can READ ABOUT something or CONSULT BOOK ABOUT something.";
               : done;
            }
            : print "The title is, 'Kindroth's Guide to the Materials Required for the Making of Christmas Toys'. Sounds enthralling. Perhaps you should OPEN THE BOOK to see what's inside.";
            : done;
         }
      }
      : match "consult book" {
         : if (preposition2_is "about" && s2() != "") {
            : set_sentence "read about $2";
         }
         : else {
            : print "You need to CONSULT BOOK ABOUT something.";
            : done;
         }
      }
      : match "read _" {
         : if (preposition1_is "about") {
            : if (!is_text_book_open) {
               : print "If you want to read anything in the book, you'll have to OPEN THE BOOK first.";
               : done;
            }
            : if (noun1_is "") {
               : print "You need to tell me what to READ ABOUT or READ THE BOOK to see the contents.";
               : done;
            }
            : if (noun1_is "ball") {
               : print "It says you only need rubber to make a ball.";
               : done;
            }
            : if (noun1_is "bat") {
               : print "It says you need a wooden rod for the handle and a block of wood for the hitting surface.";
               : done;
            }
            : if (noun1_is "game") {
               : print "It says you need plywood for the board itself and paint for the decoration.";
               : done;
            }
            : if (noun1_is "book") {
               : print "It says you need cardboard, paper, glue and ink.";
               : done;
            }
            : if (noun1_is "block") {
               : print "It says you need a block of wood for the building blocks themselves and paint for the decoration.";
               : done;
            }
            : if (noun1_is "cannon") {
               : print "It says you need a block of wood for the base, a metal tube for the barrel and marbles for the ammunition.";
               : done;
            }
            : if (noun1_is "clown") {
               : print "It says you need various types of linen and stuffing for the head and body, and cotton thread to sew it together.";
               : done;
            }
            : if (noun1_is "dollhouse") {
               : print "It says you need plywood and paint for the decoration.";
               : done;
            }
            : if (noun1_is "truck") {
               : print "It says you need a sheet of tin for the body, metal bar for the axles and rubber for the tyres.";
               : done;
            }
            : if (noun1_is "skates") {
               : print "It says you need leather for the boots and stainless steel for the blades.";
               : done;
            }
            : if (noun1_is "box") {
               : print "It says you need a box with a hinged lid and a latch to keep it shut, a cardboard cylinder, a spring and a sock puppet to fit over the spring.";
               : done;
            }
            : if (noun1_is "jacks") {
               : print "It says you need iron for the basic shape and rubber for the outer coating.";
               : done;
            }
            : if (noun1_is "puzzle") {
               : print "It says you need plywood and paint for the picture.";
               : done;
            }
            : if (noun1_is "kite") {
               : print "It says you need wooden strips for the frame, linen for the sail and a long length of twine.";
               : done;
            }
            : if (noun1_is "marbles") {
               : print "It says you need glass and glitter for the marbles and calico for the bag to put them in.";
               : done;
            }
            : if (noun1_is "bank") {
               : print "It says you need clay, water, a mould to make it in and paint for the decoration.";
               : done;
            }
            : if (noun1_is "gun") {
               : print "It says you need a block of wood for the stock, a wooden dowel for the barrel, a plastic pipe to fit over the barrel, a string and a cork.";
               : done;
            }
            : if (noun1_is "doll") {
               : print "It says you need a variety of linen and stuffing for the head and body, and cotton to sew it together.";
               : done;
            }
            : if (noun1_is "robot") {
               : print "It says you need a sheet of tin and plastic for the body and various gears and widgets to make it look futuristic.";
               : done;
            }
            : if (noun1_is "horse") {
               : print "It says you need a wooden board for the body, leather for the saddle, horse hair for the tail and paint for the decoration.";
               : done;
            }
            : if (noun1_is "boat") {
               : print "It says you need a block of wood for the hull, wooden dowel for the mast, linen for the sail and string for the rigging.";
               : done;
            }
            : if (noun1_is "rope") {
               : print "It says you need wooden rod for the handles and a length of rope.";
               : done;
            }
            : if (noun1_is "sled") {
               : print "It says you need plywood for the body and stainless steel for the running rails.";
               : done;
            }
            : if (noun1_is "top") {
               : print "It says you need a block of wood for the body, string to make it spin and paint for the decoration.";
               : done;
            }
            : if (noun1_is "set") {
               : print "It says you need clay and water for the teapot, cups and saucers, and paint for the decoration.";
               : done;
            }
            : if (noun1_is "bear") {
               : print "It says you need fluffy fabric and stuffing for the head and body, and cotton thread to sew it together.";
               : done;
            }
            : if (noun1_is "telescope") {
               : print "It says you need glass and metal tubes.";
               : done;
            }
            : if (noun1_is "drum") {
               : print "It says you need a metal tin, a sheet of rubber and paint for decoration.";
               : done;
            }
            : if (noun1_is "toy" || noun1_is "piano") {
               : print "It says you need plywood, wire and felt.";
               : done;
            }
            : if (noun1_is "train") {
               : print "It says you need a sheet of tin for the body, steel bar for the axles, an engine to make it go and paint for the decoration.";
               : done;
            }
            : if (noun1_is "tricycle") {
               : print "It says you need metal tube for the framework, leather for the seat, some gears and rubber for the tyres.";
               : done;
            }
            : if (noun1_is "trumpet") {
               : print "It says you need metal tube, preferably brass.";
               : done;
            }
            : if (noun1_is "wagon") {
               : print "It says you need a sheet of tin for the body, steel bar for the axles and rubber for the tyres.";
               : done;
            }
            : if (noun1_is "soldiers") {
               : print "It says you need wooden blocks to carve the bodies and paint for the decoration.";
               : done;
            }
            : if (noun1_is "xylophone") {
               : print "It says you need wooden strips for the frame, metal tubes and a wooden hammer.";
               : done;
            }
            : if (noun1_is "yoyo") {
               : print "It says you need a wooden block for the body and a length of string.";
               : done;
            }
            : print "There doesn't appear to be a topic on that. Try READ THE BOOK to see the contents.";
            : done;
         }
      }
      : match "open book" {
         : if (is_text_book_open) {
            : print "It's already open.";
            : done;
         }
         : set_true "is_text_book_open";
         : print "You open the text book to see what's inside.";
         : done;
      }
      : match "close book" {
         : if (!is_text_book_open) {
            : print "It's already closed.";
            : done;
         }
         : set_false "is_text_book_open";
         : print "You close the text book.";
         : done;
      }
   }

   // Room 12: Mailroom
   // Mailroom
   : if (is_present "mailroom") {
      : match "examine mailroom" {
         : print "This is where all the letters to Santa are delivered and sorted and assembly tasks allocated to the elves.";
         : done;
      }
   }
   // Neldor the elf
   : if (is_present "neldor") {
      : match "examine neldor" {
         : print "Neldor is highly intelligent and the only elf at the North Pole with a university degree, which he did by correspondence. He normally teaches young elves in the classroom, but there are no lessons during the busy Christmas season when he manages the mailroom and administers the naughty-or-nice list.";
         : done;
      }
      : match "ask neldor" {
         : if (preposition2_is "" && noun2_is "") {
            : print "You need to ASK NELDOR ABOUT something (or just ASK ABOUT something) if you want information.";
            : done;
         }
         : if (preposition2_is "about" && noun2_is "") {
            : print "Neldor gives you a strange look. \"Hmm, I thought I taught you better than that. You need to ASK ABOUT something.\"";
            : done;
         }
         : if (preposition2_is "about" && !noun2_is "") {
            : set_sentence "ask about $2";
         }
      }
      : match "ask _" {
         : if (preposition1_is "about") {
            : if (noun1_is "") {
               : print "Neldor gives you a strange look. \"Hmm, I thought I taught you better than that. You need to ASK ABOUT something.\"";
               : done;
            }
            : if (noun1_is "afram") {
               : set_true "has_asked_about_afram";
               : print "Neldor starts looking through the naughty-or-nice list and finds Afram near the top. \"It looks like Afram has been nice. He'd like a pop gun.\"";
               : done;
            }
            : if (noun1_is "arya") {
               : set_true "has_asked_about_arya";
               : print "\"Arya, is that with an 'i' or a 'y'. Nevermind, here she is. She's on the nice list, so she can get the piggy bank she wants. Well, that's a practical present for a little girl. She'll probably grow up to be an accountant.\"";
               : done;
            }
            : if (noun1_is "chris") {
               : print "\"Let's see. Chris is on the naughty list. He keeps changing Adventuron before everybody has caught up with the last changes. He gets a lump of coal.\"";
               : done;
            }
            : if (noun1_is "cindy") {
               : set_true "has_asked_about_cindy";
               : print "\"Cindy, ah, let's see.\" Neldor consults the naughty-or-nice list. \"Cindy has been nice and she would like a skipping rope.\"";
               : done;
            }
            : if (noun1_is "david" || noun1_is "farlander") {
               : print "\"David? David? David? There are lots of Davids. Here's one with a nickname of Farlander. Is that the one you want? He's on the naughty list, so he gets a lump of coal.\"";
               : done;
            }
            : if (noun1_is "dee") {
               : print "Neldor scans the naughty-or-nice list. \"Dee has been nice. She'd like a new pair of running shoes, but her present is already loaded on the sleigh.\"";
               : done;
            }
            : if (noun1_is "errol") {
               : print "Neldor scans the naughty-or-nice list. \"Errol has been nice. I see that he wants an escape room voucher. That's already been arranged.\"";
               : done;
            }
            // : if (noun1_is "errol") {
            //    : print "Neldor scans the naughty-or-nice list. \"Errol has been nice. His letter says, 'All I want for Christmas is my two front teeth'. Ha, ha. That's been arranged.\"";
            //    : done;
            // }
            : if (noun1_is "garry") {
               : print "\"Hmmm. Garry just wants everybody to spell his name right. It's double 'r', like in Barry, Carry, Harry, Larry, Marry. Marry? That's not a name, is it?\"";
               : done;
            }
            : if (noun1_is "jennifer") {
               : set_true "has_asked_about_jennifer";
               : print "Neldor runs his finger down the naughty-or-nice list. \"Here she is. Jennifer has been nice. She said she wants a surprise, so we'll give her a jack-in-the-box. That'll give her a surprise alright!\"";
               : done;
            }
            : if (noun1_is "jimmy") {
               : set_true "has_asked_about_jimmy";
               : print "\"Ooh, according to the naughty-or-nice list, Jimmy just made it into the nice category, so he can get the tin drum he wants. His parents will love it!\"";
               : done;
            }
            : if (noun1_is "john" || noun1_is "dethmunk") {
               : print "\"Ah, let me see. There are lots of Johns, but I think this is the one you want. He's on the nice list, so he gets a paintbox. It looks like it's already loaded onto the sleigh.\"";
               : done;
            }
            : if (noun1_is "li") {
               : set_true "has_asked_about_li";
               : print "\"Ummm, Li is on the nice list. I see that he wants a kite. He'll get a rise out of that.\" Neldor laughs at his own joke.";
               : done;
            }
            : if (noun1_is "lionel" || noun1_is "auraes") {
               : print "\"Lionel goes by the alias of 'auraes'. That's confusing. Anyway, he didn't enter the Adventuron Christmas Jam, so he's on the naughty list and gets a lump of coal.\"";
               : done;
            }
            : if (noun1_is "oliver") {
               : set_true "has_asked_about_oliver";
               : print "Neldor scans the naughty-or-nice list and his brow furrows. \"Hmm, Oliver has been naughty. His letter also said that he doesn't believe in Santa Claus, so he gets a lump of coal.\"";
               : done;
            }
            : if (noun1_is "ricardo") {
               : print "Neldor runs his finger down the naughty-or-nice list. \"Ricardo is on the nice list. He'd like a Spanish-English dictionary, but that's already loaded on the sleigh.\"";
               : done;
            }
            : if (noun1_is "samantha") {
               : set_true "has_asked_about_samantha";
               : print "\"Let's see. Here she is. According to the naughty-or-nice list, Samantha has been nice and she wants a new brother to replace the old one.\" Neldor gives out a laugh. \"We can't give her that, but her letter said that she also wants a teddy bear.\"";
               : done;
            }
            : print "\"That name's not on the naughty-or-nice list. Either we didn't receive their letter to Santa or their present is already on the sleigh.\"";
            : done;
         }
      }
      : match "give _" {
         : if (noun1_is "list") {
            : print "Neldor quickly skims the list and gives it back to you. \"You'd better hang on to that, Eldrid. You might need it.\"";
            : done;
         }
         : if (noun1_is "cookies") {
            : print "You give one of the cookies to Neldor and keep the rest for later. \"Yum. Thanks, Eldrid.\"";
            : done;
         }
         : print "\"Thanks, Eldrid, but I've got enough things in here to keep me occupied.\"";
         : done;
      }
      : match "talk neldor" {
         : if (has_talked_to_neldor) {
            : print "\"Like I said before, if you'd like to know about any of the children, just ASK ABOUT that child.\"";
            : done;
         }
         : set_true "has_talked_to_neldor";
         : print "\"Good morning Eldrid. I believe it's your first day on the job. If you need to know what any of the children want for Christmas, just ASK ABOUT that child.\"";
         : done;
      }
   }
   // Ball of twine
   : if (is_present "twine") {
      : match "examine twine" {
         : print "It's a ball of twine that's normally used for wrapping parcels, but you could probably put it to better use.";
         : done;
      }
   }
   // Letter
   : if (is_present "letter") {
      : match "examine letter" {
         : print "There's more than one.";
         : done;
      }
      : match "read letter" {
         : print "That's private. If you want to know what's in a letter, just ASK NELDOR about the child that wrote the letter.";
         : done;
      }
   }
   // Letters
   : if (is_present "letters") {
      : match "examine letters" {
         : print "There are lots of letters strewn about.";
         : done;
      }
      : match "read letters" {
         : print "Are you kidding? It would take you a year to read all those letters. Anyway, they're private. If you want to know what's in a letter, just ASK NELDOR about the child that wrote the letter.";
         : done;
      }
   }
   // Mailbag
   : if (is_present "mailbag") {
      : match "examine mailbag" {
         : print "There's more than one.";
         : done;
      }
   }
   // Mailbags
   : if (is_present "mailbags") {
      : match "examine mailbags" {
         : print "There are large bags of mail and letters strewn everywhere. It looks chaotic, but you're sure Neldor has everything under control.";
         : done;
      }
   }

   // Room 13: Assembly Area
   // Assembly area
   : if (is_present "assembly_area") {
      : match "examine area" {
         : print "The assembly area is a hive of activity. It's like a factory, except that all the workers are elves.";
         : done;
      }
   }
   // Toys
   : if (is_present "toys") {
      : match "examine toy;examine toys" {
         : if (is_at "room13") {
            : print "There are all sorts of toys in various stages of construction.";
            : done;
         }
         : if (is_at "room14") {
            : print "These are the finished toys.";
            : done;
         }
         : if (is_at "room30") {
            : print "These are the reject toys. They've been rejected for good reason. Don't waste your time with them.";
            : done;
         }
         : print "These are the toys for all the nice children. (There's probably also some lumps of coal for the naughty children.)";
         : done;
      }
      : match "get toy;get toys" {
         : print "You can only take the toys you've made yourself, unless they're on the shelves in toy storage.";
         : done;
      }
   }
   // Tools
   : if (is_present "tools") {
      : match "examine tool;examine tools" {
         : print "There are tools of all sorts.";
         : done;
      }
      : match "get tool;get tools" {
         : print "Weren't you paying attention in class? You can't take the tools or other equipment out of the assembly area. That's forbidden.";
         : done;
      }
   }
   // Elves
   : if (is_present "elves") {
      : match "examine elves" {
         : print "They're very industrious. They're all busy hammering and sawing and glueing and packing. As it's only one day before Christmas Eve, you'd best not disturb them.";
         : done;
      }
   }
   // Jack-in-the-box (treasure)
   : if (is_present "jack_box") {
      : match "examine box" {
         : append "It's the jack-in-the-box you made for Jennifer. It's currently ";
         : if (is_box_open) {
            : print "open.";
         }
         : else {
            : print "closed.";
         }
         : done;
      }
      : match "get box" {
         : if (is_on_box) {
            : print "You can't {verb_phrase} the jack-in-the-box while you're standing on it.";
            : done;
         }
      }
      : match "open box" {
         : if (is_box_open) {
            : print "It's already open.";
            : done;
         }
         : set_true "is_box_open";
         : if (is_on_box) {
            : append "You reach down and release the latch. The lid springs open and propels you into the air. ";
            : if (is_at "room04" && has_not_created "gingerbread") {
               : create "gingerbread" target = "inventory";
               : append "As you pass the top shelf, you reach out and grab the gingerbread. ";
            }
            : set_false "is_on_box";
            : print "What goes up must come down and you come crashing down with a resounding THUD!";
            : done;
         }
         : print "The lid springs open and the clown pops out. YAAAH! It scares the wits out of you.";
         : done;
      }
      : match "close box" {
         : if (!is_box_open) {
            : print "It's already closed.";
            : done;
         }
         : set_false "is_box_open";
         : print "You push the clown on the spring back down into the cylinder, close the lid and set the latch, ready for the next unsuspecting victim.";
         : done;
      }
      : match "mount box" {
         : if (is_carried "jack_box") {
            : print "You'll have to drop it first.";
            : done;
         }
         : if (is_box_open) {
            : print "You'll have to close it first.";
            : done;
         }
         : if (is_on_box) {
            : print "You're already standing on it.";
            : done;
         }
         : set_true "is_on_box";
         : print "You get onto the jack-in-the-box.";
         : done;
      }
      : match "dismount box" {
         : if (!is_on_box) {
            : print "You're not on it.";
            : done;
         }
         : set_false "is_on_box";
         : print "You get off the jack-in-the-box.";
         : done;
      }
   }
   // Skipping rope (treasure)
   : if (is_present "skipping_rope") {
      : match "examine rope" {
         : print "It's the skipping rope you made for Cindy.";
         : done;
      }
      : match "jump rope;play rope;use rope" {
         : if (is_at "cold_zone") {
            : print "You can't skip in the snow.";
            : done;
         }
         : print "You start skipping (just to make sure the skipping rope works) and stop when you get tired.";
         : done;
      }
   }
   // Tin drum (treasure)
   : if (is_present "tin_drum") {
      : match "examine drum" {
         : print "It's the tin drum you made for Jimmy.";
         : done;
      }
      : match "hit drum;play drum;use drum" {
         : print "Bang, bang, bang! You make quite a racket when you try to use the drum. Jimmy will love it, but his parents will hate it.";
         : done;
      }
   }
   // Teddy bear (treasure)
   : if (is_present "teddy_bear") {
      : match "examine bear" {
         : print "It's the teddy bear you made for Samantha.";
         : done;
      }
      : match "touch bear;kiss bear;play bear;use bear" {
         : print "It's soft and fluffy and cuddly. Samantha will love it.";
         : done;
      }
   }
   // Pop gun (treasure)
   : if (is_present "pop_gun") {
      : match "examine gun" {
         : print "It's the pop gun you made for Afram.";
         : done;
      }
      : match "fire gun;shoot gun;play gun;use gun" {
         : if (!is_carried "pop_gun") {
            : print {(not_carried)}
            : done;
         }
         : print "You pull the plastic pipe towards you and it compresses the air inside. Pop! The cork pops out. Ooh, that was fun. You replace the cork, ready for the next shot.";
         : done;
      }
   }
   // Kite (treasure)
   : if (is_present "kite") {
      : match "examine kite" {
         : print "It's the kite you made for Li.";
         : done;
      }
      : match "fly kite;play kite;use kite" {
         : if (is_at "cold_zone") {
            : print "You release the kite, so that the wind catches under the sail, and run through the snow. Yep, that works. You then reel it in before you damage it.";
            : done;
         }
         : print "You can't fly it indoors.";
         : done;
      }
   }
   // Piggy bank (treasure)
   : if (is_present "piggy_bank") {
      : match "examine bank" {
         : print "It's the piggy bank you made for Arya.";
         : done;
      }
      : match "play bank;use bank" {
         : print "You don't have any money to put in it.";
         : done;
      }
   }

   // Room 14: Toy Storage
   // Toy storage room
   : if (is_present "storage_room") {
      : match "examine room" {
         : print "The toy storage room is lined with shelves.";
         : done;
      }
   }
   // Storage shelves (supporter)
   : if (is_present "storage_shelves") {
      : match "examine shelves" {
         : disambiguate_s1 "present";
         : append "It's some shelves. ";
         : if (child_count(s1()) == 0) {
            : print "There's nothing on them.";
            : done;
         }
         : append "On the shelves ";
         : if (child_count(s1()) == 1) {
            : append "is ";
         }
         : else {
            : append "are ";
         }
         : look_inside
            of = "storage_shelves"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "storage_shelves") {
            : do_all "storage_shelves";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "storage_shelves" && (s2() == "storage_shelves" || noun2_is "")) {
            : remove_from_container "storage_shelves" quiet = "true";
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "storage_shelves") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried";
         : disambiguate_s2 "present";
         : if (s2() == "storage_shelves") {
            : if (parent_of(s1()) == "storage_shelves") {
               : print "{uc_def_noun1_phrase} {is_or_are} already on the shelves.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (child_count(s2()) == shelves_item_limit) {
               : print "You can't put any more items on the shelves.";
               : done;
            }
            : if (weigh(s1()) > 5) {
               : print "{uc_def_noun1_phrase} won't fit on the shelves.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "storage_shelves" quiet = "true";
            : print "You put {def_noun1_phrase} on the shelves.";
            : done;
         }
      }
      : match "climb shelves" {
         : if (is_on_box) {
            : print "The box is unsteady. You'll need to get off the box first.";
            : done;
         }
         : print "You step onto the first shelf, then lose your grip and fall flat on your face. Oof! You hope nobody saw that.";
         : done;
      }
   }
   // Hand puppet
   : if (is_present "hand_puppet") {
      : match "examine puppet" {
         : print "It's a bit like a sock, except that it's decorated to look like a clown. You can put your hand in the sock and use your fingers to make it talk and turn its head.";
         : done;
      }
      : match "put hand" {
         : if (preposition2_is "in" && noun2_is "puppet") {
            : set_sentence "wear puppet";
         }
      }
      : match "wear puppet;play puppet;use puppet" {
         : print "You put your hand into the puppet and make it come alive. The clown turns its head towards you and you strike up a conversation. \"Good morning Eldrid. Have you finished all your chores for Santa?\" Oops. You'd better stop wasting time, so you remove the puppet and get back to work.";
      }

   }
   // Ice skates
   : if (is_present "ice_skates") {
      : match "examine skates" {
         : print "It's a pair of child's ice skates. Be careful, the blades are very sharp.";
         : done;
      }
      : match "wear skates" {
         : print "You might be an elf, but your feet are still too big to fit into a pair of child's ice skates.";
         : done;
      }
   }
   // Wooden yoyo
   : if (is_present "wooden_yoyo") {
      : match "examine yoyo" {
         : append "It's a gaily decorated wooden yoyo";
         : if (has_not_created "yoyo_string") {
            : print " with a long string.";
            : done;
         }
         : print ", but no longer functional since you cut the string off.";
         : done;
      }
      : match "examine string" {
         : if (has_not_created "yoyo_string") {
            : print "It's attached to the yoyo.";
            : done;
         }
      }
      : match "cut string" {
         : if (has_not_created "yoyo_string") {
            : create "yoyo_string";
            : set_string var = "message" text = "You cut the yoyo string with the sharp blade of the ice skates and it falls to the floor. The yoyo is now a no-no.";
            : gosub "refresh";
         }
      }
      : match "get string" {
         : if (has_not_created "yoyo_string") {
            : print "You can't. It's attached to the yoyo. Maybe you could cut it off.";
            : done;
         }
      }
      : match "play yoyo;use yoyo" {
         : if (has_not_created "yoyo_string") {
            : print "You try to 'rock the cradle' and 'walk the dog', but without much success. You then try 'around the world' and give up when the yoyo hits you on the head.";
            : done;
         }
         : print "You can't do much with a busted yoyo.";
         : done;
      }
   }
   // Yoyo string
   : if (is_present "yoyo_string") {
      : match "examine string" {
         : print "It's the string off the yoyo.";
         : done;
      }
      : match "cut string" {
         : print "If you cut it any shorter, it won't be useful for anything.";
         : done;
      }
   }

   // Room 15: Supplies Hallway (east)

   // Room 16: Woodwork Supplies
   // Woodwork supplies
   : if (is_present "woodwork_supplies") {
      : match "examine woodwork;examine supplies" {
         : print "This is Brayern's domain.";
         : done;
      }
   }
   // Brayern the elf
   : if (is_present "brayern") {
      : match "examine brayern" {
         : print "Brayern is a skilled carpenter. He learned the art of woodcarving at an early age and designed many of Santa's wooden toys. His knowledge of various woods and their properties make him the perfect elf to advise on your woodworking needs.";
         : done;
      }
      : match "ask brayern" {
         : if (preposition2_is "" && noun2_is "") {
            : print "You need to ASK BRAYERN ABOUT something if you want information or ASK BRAYERN FOR something if you want him to give you something.";
            : done;
         }
         : if (preposition2_is "about" && noun2_is "") {
            : print "Brayern gives you a strange look. \"Cat got your tongue? You'll have to ASK ABOUT something.\"";
            : done;
         }
         : if (preposition2_is "about" && !noun2_is "") {
            : set_sentence "ask about $2";
         }
         : if (preposition2_is "for" && noun2_is "") {
            : print "Brayern gives you a strange look. \"Cat got your tongue? You'll have to ASK FOR something.\"";
            : done;
         }
         : if (preposition2_is "for" && !noun2_is "") {
            : set_sentence "ask for $2";
         }
      }
      : match "ask _" {
         : if (preposition1_is "about") {
            : if (noun1_is "") {
               : print "Brayern gives you a strange look. \"Cat got your tongue? You'll have to ASK ABOUT something.\"";
               : done;
            }
            : if (noun1_is "wood") {
               : print "\"If you want wood, you've come to the right place. I have wooden blocks, boards, strips, rods and dowel, or plywood if you need sheets. Just ASK FOR which one you want.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "craft_t";
            : if (s1_has_trait "craft_t") {
               : print "\"That sounds a bit crafty. Try Arlayna in craft supplies. She knows all about crafty stuff.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "fabric_t";
            : if (s1_has_trait "fabric_t") {
               : print "\"The only thing I know about fabrics is that you wear them. Usually. Try asking Liluth in fabric supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "metal_t";
            : if (s1_has_trait "metal_t") {
               : print "\"I don't know much about metals, but Jandor does. You'll find him in metalwork supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "wood_t";
            : if (s1_has_trait "wood_t") {
               : if (noun1_is "block") {
                  : append "\"Wooden blocks are good for carving into bats, cannon bases, pop gun stocks, sailing boat hulls, wooden soldiers, spinning tops and yoyos, or you can cut them up for building blocks.";
               }
               : if (noun1_is "board") {
                  : append "\"Wooden boards are good for shaping into things like rocking horses.";
               }
               : if (noun1_is "strip") {
                  : append "\"Thin wooden strips are good for making kite and xylophone frames.";
               }
               : if (noun1_is "rod") {
                  : append "\"Thick wooden rods are good for fashioning into bat handles and skipping rope handles.";
               }
               : if (noun1_is "dowel") {
                  : append "\"Thin wooden dowel can be cut to length for pop gun barrels and sailing boat masts.";
               }
               : if (noun1_is "plywood") {
                  : append "\"Plywood is good for making board games, doll's houses, jigsaw puzzles, sleds and toy pianos.";
               }
               : print " I have some in stock. If you want some, just ASK FOR it.\"";
               : done;
            }
            : print "\"I don't know anything about that.\"";
            : done;
         }
         : if (preposition1_is "for") {
            : if (noun1_is "") {
               : print "Brayern gives you a strange look. \"Cat got your tongue? You'll have to ASK FOR something.\"";
               : done;
            }
            : if (noun1_is "wood") {
               : print "\"You'll have to be more specific than that. I have wooden blocks, boards, strips, rods, dowel and plywood. Just ASK FOR which one you want.\"";
               : done;
            }
            : if (noun1_is "block") {
               : if (parent_of "wooden_block" != "limbo") {
                  : print "\"I've already given you a wooden block. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "wooden_block";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "board") {
               : if (parent_of "wooden_board" != "limbo") {
                  : print "\"I've already given you a wooden board. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "wooden_board";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "dowel") {
               : if (parent_of "wooden_dowel" != "limbo") {
                  : print "\"I've already given you a wooden dowel. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "wooden_dowel";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "rod") {
               : if (parent_of "wooden_rod" != "limbo") {
                  : print "\"I've already given you a wooden rod. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "wooden_rod";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "strip") {
               : if (parent_of "wooden_strip" != "limbo") {
                  : print "\"I've already given you a wooden strip. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "wooden_strip";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "plywood") {
               : if (parent_of "plywood" != "limbo") {
                  : print "\"I've already given you a sheet of plywood. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "plywood";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : disambiguate_s1 "universal" with_trait = "craft_t";
            : if (s1_has_trait "craft_t") {
               : print "\"That sounds like something you'd find in craft supplies. Try Arlayna. She's got all sorts of crafty stuff.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "fabric_t";
            : if (s1_has_trait "fabric_t") {
               : print "\"Fabrics? That's girlie stuff. Try Liluth in fabric supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "metal_t";
            : if (s1_has_trait "metal_t") {
               : print "\"My speciality is wood, not metal. Try Jandor in metalwork supplies.\"";
               : done;
            }
         }
         : print "\"I don't have any of that. You could try one of the other supplies, but I don't think they'll have any.\"";
         : done;
      }
      : match "give _" {
         : if (noun1_is "cookies") {
            : print "You give one of the cookies to Brayern and keep the rest for later. \"Did you raid the pantry? Thanks, Eldrid.\"";
            : done;
         }
         : print "\"I'm sure you have better uses for that than me.\"";
         : done;
      }
      : match "talk brayern" {
         : if (has_talked_to_brayern) {
            : print "\"If you need anything Eldrid, just ASK FOR what you want. I have wooden blocks, boards, strips, rods, dowel and plywood.\"";
            : done;
         }
         : set_true "has_talked_to_brayern";
         : print "\"Good morning Eldrid. How's your first day on the job?\" He looks over his shoulder, as if to make sure no one is listening. \"You do realise that all the best Christmas toys are made out of wood, don't you? Well, if you want wood, you've come to the right place. I have wooden blocks, boards, strips, rods, dowel and plywood. If you need further info, you can ASK ABOUT something or just ASK FOR what you want.\"";
         : done;
      }
   }
   // Wooden block
   : if (is_present "wooden_block") {
      : match "examine block" {
         : print "It's a plain block of wood, but you can carve it into all sorts of things.";
         : done;
      }
   }
   // Wooden board
   : if (is_present "wooden_board") {
      : match "examine board" {
         : print "It's a wide wooden board, about 30\u00a0mm thick.";
         : done;
      }
   }
   // Wooden dowel
   : if (is_present "wooden_dowel") {
      : match "examine dowel" {
         : print "It's a short length of wooden dowel, about 15\u00a0mm diameter.";
         : done;
      }
   }
   // Wooden rod
   : if (is_present "wooden_rod") {
      : match "examine rod" {
         : print "It's a short length of wooden rod, about 40\u00a0mm diameter.";
         : done;
      }
   }
   // Wooden strip
   : if (is_present "wooden_strip") {
      : match "examine strip" {
         : print "It's a long length of wooden strip, about 15\u00a0mm square.";
         : done;
      }
   }
   // Plywood
   : if (is_present "plywood") {
      : match "examine plywood" {
         : print "It's a large sheet of plywood (or ply, for short), about 10\u00a0mm thick.";
         : done;
      }
   }

   // Room 17: Craft Supplies
   // Craft supplies
   : if (is_present "craft_supplies") {
      : match "examine craft;examine supplies" {
         : print "This is Arlayna's domain.";
         : done;
      }
   }
   // Arlayna the elf
   : if (is_present "arlayna") {
      : match "examine arlayna" {
         : print "Arlayna is a wrinkled old crone who has been making handcrafted toys since time immemorial. Her skills are legendary. She can turn any old piece of junk into a masterpiece that any child would love to own.";
         : done;
      }
      : match "ask arlayna" {
         : if (preposition2_is "" && noun2_is "") {
            : print "You need to ASK ARLAYNA ABOUT something if you want information or ASK ARLAYNA FOR something if you want her to give you something.";
            : done;
         }
         : if (preposition2_is "about" && noun2_is "") {
            : print "Arlayna gives you a quizzical look. \"I'm not a mind reader. You need to ASK ABOUT something.\"";
            : done;
         }
         : if (preposition2_is "about" && !noun2_is "") {
            : set_sentence "ask about $2";
         }
         : if (preposition2_is "for" && noun2_is "") {
            : print "Arlayna gives you a quizzical look. \"I'm not a mind reader. You need to ASK FOR something.\"";
            : done;
         }
         : if (preposition2_is "for" && !noun2_is "") {
            : set_sentence "ask for $2";
         }
      }
      : match "ask _" {
         : if (preposition1_is "about") {
            : if (noun1_is "") {
               : print "Arlayna gives you a quizzical look. \"I'm not a mind reader. You need to ASK ABOUT something.\"";
               : done;
            }
            : if (noun1_is "craft") {
               : print "\"If you want craft supplies, you've come to the right place. I have cardboard, clay, glue, ink, paint and paper. Just ASK FOR which one you want. I'd normally have string, as well, but I'm completely out at the moment.\"";
               : done;
            }
            : if (noun1_is "string") {
               : print "\"String is an essential part of pop guns, spinning tops, yoyos and the rigging on sailing boats. Unfortunately, I'm out of stock.\"";
               : done;
            }
            : if (noun1_is "wood") {
               : print "\"I don't know anything much about wood, but Brayern does.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "craft_t";
            : if (s1_has_trait "craft_t") {
               : if (noun1_is "cardboard") {
                  : append "\"Cardboard can be used for book covers.";
               }
               : if (noun1_is "clay") {
                  : append "\"My clay can be mixed with water to make things like piggy banks and tea sets.";
               }
               : if (noun1_is "glue") {
                  : append "\"Santa's magic glue is normally used for binding books, but it can also be used for mending things that are broken.";
               }
               : if (noun1_is "ink") {
                  : append "\"Ink is normally used for printing books.";
               }
               : if (noun1_is "paint") {
                  : append "\"Santa's magic paint can be used for painting board games and jigsaw puzzles, or decorating building blocks, doll's houses, piggy banks, rocking horses, toy soldiers, spinning tops, tea sets, trains and so on.";
               }
               : if (noun1_is "paper") {
                  : append "\"Paper has lots of uses, but we normally use it for making books.";
               }
               : print " I have some in stock. If you want some, just ASK FOR it.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "fabric_t";
            : if (s1_has_trait "fabric_t") {
               : print "\"If you want to know anything about materials and fabrics, try Liluth in fabric supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "metal_t";
            : if (s1_has_trait "metal_t") {
               : print "\"Jandor is the expert on metals. You'll find him in metalwork supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "wood_t";
            : if (s1_has_trait "wood_t") {
               : print "\"I don't know anything much about wood, but Brayern does.\"";
               : done;
            }
            : print "\"I can't help you with that.\"";
            : done;
         }
         : if (preposition1_is "for") {
            : if (noun1_is "") {
               : print "Arlayna gives you a quizzical look. \"I'm not a mind reader. You need to ASK FOR something.\"";
               : done;
            }
            : if (noun1_is "craft") {
               : print "\"You'll have to be more specific than that. I have cardboard, glue, ink, paint, paper and clay in powdered form. Just ASK FOR which one you want. Unfortunately, I'm all out of string.\"";
               : done;
            }
            : if (noun1_is "cardboard") {
               : if (parent_of "cardboard" != "limbo") {
                  : print "\"I've already given you some cardboard. Come back after you've used it if you need more.\"";
                  : done;
               }
               : create "cardboard";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "clay") {
               : if (parent_of "clay" != "limbo") {
                  : print "\"I've already given you some clay. Come back after you've used it if you need more.\"";
                  : done;
               }
               : create "clay";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "glue") {
               : if (parent_of "glue" != "limbo") {
                  : print "\"I've already given you some glue. Come back later if you run out.\"";
                  : done;
               }
               : create "glue";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "ink") {
               : if (parent_of "ink" != "limbo") {
                  : print "\"I've already given you some ink. Come back later if you run out.\"";
                  : done;
               }
               : create "ink";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "paint") {
               : if (parent_of "paint" != "limbo") {
                  : print "\"I've already given you some paint. Come back later if you run out.\"";
                  : done;
               }
               : create "paint";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "paper") {
               : if (parent_of "paper" != "limbo") {
                  : print "\"I've already given you some paper. Come back after you've used it if you need more.\"";
                  : done;
               }
               : create "paper";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "string") {
               : print "\"I'm all out of string. Didn't I tell you?\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "fabric_t";
            : if (s1_has_trait "fabric_t") {
               : print "\"I only have a few scraps. If you want proper fabrics, see Liluth in fabric supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "metal_t";
            : if (s1_has_trait "metal_t") {
               : print "\"I can't help you with metals. Try Jandor in metalwork supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "wood_t";
            : if (s1_has_trait "wood_t") {
               : print "\"I don't have any wood, but Brayern has plenty. You'll find him in woodwork supplies\"";
               : done;
            }
            : print "\"I don't have any of that. One of the other supplies might have some, though I doubt it.\"";
            : done;
         }
      }
      : match "give _" {
         : if (noun1_is "cookies") {
            : print "You give one of the cookies to Arlayna and keep the rest for later. Arlayna giggles. \"Ooh, you know I love a good cookie. Thanks, Eldrid.\"";
            : done;
         }
         : print "\"Thanks, Eldrid, but I've got everything I need amongst my humble craft supplies.\"";
         : done;
      }
      : match "talk arlayna" {
         : if (has_talked_to_arlayna) {
            : print "\"Do you need any of my wonderful craft supplies? If so, just ASK FOR what you want. I have cardboard, clay, glue, ink, paint and paper, but no string, unfortunately.\"";
            : done;
         }
         : set_true "has_talked_to_arlayna";
         : print "\"Hello, Eldrid. What can I do for you today? If you need any craft supplies, I have cardboard, clay, glue, ink, paint and paper. If you need further information, you can ASK ABOUT something. If you know what you want, you can just ASK FOR something. Oh, but not string, as I don't have any left.\"";
         : done;
      }
   }
   // Cardboard
   : if (is_present "cardboard") {
      : match "examine cardboard" {
         : print "It's a plain sheet of stiff cardboard.";
         : done;
      }
   }
   // Clay
   : if (is_present "clay") {
      : match "examine clay" {
         : print "It's a lump of dry clay.";
         : done;
      }
   }
   // Glue
   : if (is_present "glue") {
      : match "examine glue" {
         : print "It's a tube of Santa's magic multi-purpose glue.";
         : done;
      }
      : match "use glue;squeeze glue" {
         : print "If you want to use the glue to make a toy, just MAKE the toy. If you want to use the glue to repair something, just REPAIR it.";
         : done;
      }

   }
   // Ink
   : if (is_present "ink") {
      : match "examine ink" {
         : print "It's a small jar of black ink.";
         : done;
      }
   }
   // Paint
   : if (is_present "paint") {
      : match "examine paint" {
         : print "It's a tube of Santa's magic multi-coloured paint.";
         : done;
      }
   }
   // Paper
   : if (is_present "paper") {
      : match "examine paper" {
         : print "It's a sheet of plain white paper.";
         : done;
      }
   }

   // Room 18: Supplies Hallway (west)

   // Room 19: Fabric Supplies
   // Fabric supplies
   : if (is_present "fabric_supplies") {
      : match "examine supplies" {
         : print "This is Liluth's domain.";
         : done;
      }
   }
   // Liluth the elf
   : if (is_present "liluth") {
      : match "examine liluth" {
         : print "Liluth is an attractive elf who knows everything there is to know about fabrics and materials. Whether it's natural or synthetic, velvet or canvas, fluffy or smooth, she knows which material is best to use for each toy.";
         : done;
      }
      : match "ask liluth" {
         : if (preposition2_is "" && noun2_is "") {
            : print "You need to ASK LILUTH ABOUT something if you want information or ASK LILUTH FOR something if you want her to give you something.";
            : done;
         }
         : if (preposition2_is "about" && noun2_is "") {
            : print "Liluth gives you a strange look. \"Do you always stop mid-sentence? You need to ASK ABOUT something.\"";
            : done;
         }
         : if (preposition2_is "about" && !noun2_is "") {
            : set_sentence "ask about $2";
         }
          : if (preposition2_is "for" && noun2_is "") {
            : print "Liluth gives you a strange look. \"Do you always stop mid-sentence? You need to ASK FOR something.\"";
            : done;
         }
         : if (preposition2_is "for" && !noun2_is "") {
            : set_sentence "ask for $2";
         }
      }
      : match "ask _" {
         : if (preposition1_is "about") {
            : if (noun1_is "") {
               : print "Liluth gives you a strange look. \"Do you always stop mid-sentence? You need to ASK ABOUT something.\"";
               : done;
            }
            : if (noun1_is "material" || noun1_is "fabrics") {
               : print "\"If you want material, I can help you out, but stocks are low. I have calico, felt, fluffy fabric, leather, linen and plenty of cotton thread to sew it all together. Just ASK FOR which one you want. I'd normally have stuffing, too, but I'm out of stock at the moment.\"";
               : done;
            }
            : if (noun1_is "stuffing") {
               : print "\"I know you need stuffing for clowns, rag dolls and teddy bears, but I'm out of stock at the moment. If you need any stuffing, you'll have to find a substitute.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "craft_t";
            : if (s1_has_trait "craft_t") {
               : print "\"That sounds like something that  Arlayna would know about. You'll find her in craft supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "fabric_t";
            : if (s1_has_trait "fabric_t") {
               : if (noun1_is "calico") {
                  : append "\"Calico is really tough. We normally use it for making marble bags.";
               }
               : if (noun1_is "cotton") {
                  : append "\"Cotton thread is used to sew the fabrics together for things like clowns, rag dolls and teddy bears.";
               }
               : if (noun1_is "felt") {
                  : append "\"Felt is used on the hammers of toy pianos.";
               }
               : if (noun1_is "fabric") {
                  : append "\"Fluffy fabric is my favourite. It's soft and cuddly, so it's the best material to use for teddy bears.";
               }
               : if (noun1_is "leather") {
                  : append "\"Leather can be used for the boots of ice skates and rocking horse seats.";
               }
               : if (noun1_is "linen") {
                  : append "\"Linen is really versatile. You can use it for the bodies of clowns and rag dolls, or the sails on kites and  sailing boats.";
               }
               : print " I have some in stock. If you want some, just ASK FOR it.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "metal_t";
            : if (s1_has_trait "metal_t") {
               : print "\"Come on Eldrid, you can't be serious. If you want to know anything about metals, I'd suggest you try Jandor in metalwork supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "wood_t";
            : if (s1_has_trait "wood_t") {
               : print "\"I only know about soft materials and fabrics. If you want to know about wood, try Brayern in woodwork supplies.\"";
               : done;
            }
            : print "\"I don't know anything about that.\"";
            : done;
         }
         : if (preposition1_is "for") {
            : if (noun1_is "") {
               : print "Liluth gives you a strange look. \"Do you always stop mid-sentence? You need to ASK FOR something.\"";
               : done;
            }
            : if (noun1_is "material" || noun1_is "fabrics") {
               : print "\"You'll have to be more specific than that. I have calico, felt, fluffy fabric, leather, linen and cotton thread to sew it all together. Just ASK FOR which one you want. Unfortunately, I'm all out of stuffing, so I hope you don't need any of that.\"";
               : done;
            }
            : if (noun1_is "cotton") {
               : if (parent_of "cotton" != "limbo") {
                  : print "\"I've already given you some cotton. Come back later if you run out.\"";
                  : done;
               }
               : create "cotton";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "calico") {
               : if (parent_of "calico" != "limbo") {
                  : print "\"I've already given you some calico. Come back later if you run out.\"";
                  : done;
               }
               : create "calico";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "fabric") {
               : if (parent_of "fluffy_fabric" != "limbo") {
                  : print "\"I've already given you some fluffy fabric. Come back after you've used it if you need more.\"";
                  : done;
               }
               : create "fluffy_fabric";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "felt") {
               : if (parent_of "felt" != "limbo") {
                  : print "\"I've already given you some felt. Come back later if you run out.\"";
                  : done;
               }
               : create "felt";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "leather") {
               : if (parent_of "leather" != "limbo") {
                  : print "\"I've already given you some leather. Come back after you've used it if you need more.\"";
                  : done;
               }
               : create "leather";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "linen") {
               : if (parent_of "linen" != "limbo") {
                  : print "\"I've already given you some linen. Come back after you've used it if you need more.\"";
                  : done;
               }
               : create "linen";
               : set_string var = "message" text = "\"I'll leave it on the counter for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "stuffing") {
               : print "\"That's out of stock. Didn't I tell you?\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "craft_t";
            : if (s1_has_trait "craft_t") {
               : print "\"That's more in the craft line. Arlayna can probably help you with that.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "metal_t";
            : if (s1_has_trait "metal_t") {
               : print "\"I don't have any metals. Try Jandor in metalwork supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "wood_t";
            : if (s1_has_trait "wood_t") {
               : print "\"I only deal with soft materials and fabrics. Wood is not exactly soft. Try Brayern for that.\"";
               : done;
            }
            : print "\"I don't have any of that and I don't think any of the other supplies will have any, either.\"";
            : done;
         }
      }
      : match "give _" {
         : if (noun1_is "cookies") {
            : print "You give one of the cookies to Liluth, but she kindly refuses your offer. \"Don't you know that cookies are bad for you?\"";
            : done;
         }
         : print "\"Thanks, but no thanks. I have no use for that.\"";
         : done;
      }
      : match "talk liluth" {
         : if (has_talked_to_liluth) {
            : print "\"Well, Eldrid, in case you've forgotten, I've currently got calico, felt, fluffy fabric, leather, linen and cotton thread in stock, but I'm out of stuffing. Just ASK FOR which one you want.\"";
            : done;
         }
         : set_true "has_talked_to_liluth";
         : print "\"Good morning Eldrid. First day on the job, eh? Do you need any fabrics or materials? If so just ASK ABOUT something if you want more info or ASK FOR what you want. I have calico, felt, fluffy fabric, leather, linen and cotton thread to sew it all together. Unfortunately, I'm all out of stuffing, so I hope you don't need any of that.\"";
         : done;
      }
   }
   // Calico
   : if (is_present "calico") {
      : match "examine calico" {
         : print "It's a sheet of calico. It's tougher than linen, but softer than canvas.";
         : done;
      }
   }
   // Cotton
   : if (is_present "cotton") {
      : match "examine cotton" {
         : print "It's a roll of strong cotton thread. It needs to be strong when making toys for children.";
         : done;
      }
   }
   // Felt
   : if (is_present "felt") {
      : match "examine felt" {
         : print "It's a small quantity of white felt that's used to make the hammers on toy pianos.";
         : done;
      }
   }
   // Fluffy fabric
   : if (is_present "fluffy_fabric") {
      : match "examine fabric" {
         : print "It's a soft, fluffy, light brown fabric. Very cuddly.";
         : done;
      }
   }
   // Leather
   : if (is_present "leather") {
      : match "examine leather" {
         : print "It's a sheet of tan leather made from cow hide.";
         : done;
      }
   }
   // Linen
   : if (is_present "linen") {
      : match "examine linen" {
         : print "It's a sheet of coloured linen.";
         : done;
      }
   }

   // Room 20: Metalwork Supplies
   // Metalwork supplies
   : if (is_present "metalwork_supplies") {
      : match "examine metalwork;examine supplies" {
         : print "This is Jandor's domain.";
         : done;
      }
   }
   // Jandor the elf
   : if (is_present "jandor") {
      : match "examine jandor" {
         : print "Jandor is a skilled engineer and inventor of Santa's magic toy-making machine. He still dabbles in metalwork, but his main role nowadays is to advise and dispense various metals for the toys.";
         : done;
      }
      : match "ask jandor" {
         : if (preposition2_is "" && noun2_is "") {
            : print "You need to ASK JANDOR ABOUT something if you want information or ASK JANDOR FOR something if you want him to give you something.";
            : done;
         }
         : if (preposition2_is "about" && noun2_is "") {
            : print "Jandor gives you a strange look. \"Am I supposed to guess what you want? You need to ASK ABOUT something.\"";
            : done;
         }
         : if (preposition2_is "about" && !noun2_is "") {
            : set_sentence "ask about $2";
         }
          : if (preposition2_is "for" && noun2_is "") {
            : print "Jandor gives you a strange look. \"Am I supposed to guess what you want? You need to ASK FOR something.\"";
            : done;
         }
         : if (preposition2_is "for" && !noun2_is "") {
            : set_sentence "ask for $2";
         }
      }
      : match "ask _" {
         : if (preposition1_is "about") {
            : if (noun1_is "") {
               : print "Jandor gives you a strange look. \"Am I supposed to guess what you want? You need to ASK ABOUT something.\"";
               : done;
            }
            : if (noun1_is "metal") {
               : print "If you want metals, I've got metal bars, metal tubes, stainless steel and wire, as well as gears and widgets. Just ASK FOR what you want. Unfortunately, I'm all out of tin sheets, so I hope you don't want any of that.";
               : done;
            }
            : if (noun1_is "tin") {
               : print "Sheets of tin are mainly used to make toy dump trucks, robots, trains and wagons. There's been a big demand for tin this year, so I'm completely out-of-stock.";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "craft_t";
            : if (s1_has_trait "craft_t") {
               : print "\"Sorry, I don't know anything about craft supplies. Try Arlayna, she knows more about crafts than anyone in Santa's workshop.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "fabric_t";
            : if (s1_has_trait "fabric_t") {
               : print "\"Dear, oh dear. Metals are hard, fabrics are soft. If you want to know anything about materials or fabrics, try Liluth in fabric supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "metal_t";
            : if (s1_has_trait "metal_t") {
               : if (noun1_is "gears") {
                  : append "\"Gears come in various sizes. In Santa's workshop, we use them for toy robots and tricycles.";
               }
               : if (noun1_is "bar") {
                  : append "\"All my metal bars are cylindrical. They're used for the axles for dump trucks, trains and wagons.";
               }
               : if (noun1_is "tube") {
                  : append "\"Metal tubes are used to make cannon barrels, telescopes, tricycle frames and xylophones.";
               }
               : if (noun1_is "steel") {
                  : append "\"Stainless steel is used for the blades on ice skates and the runners on sleds so that they don't rust in snow and ice.";
               }
               : if (noun1_is "widgets") {
                  : append "\"Widgets come in all shapes and sizes. I make them from offcuts and leftovers. The other elves use them when making toy robots.";
               }
               : if (noun1_is "wire") {
                  : append "\"We don't have much use for wire in Santa's workshop, except for toy pianos.";
               }
               : print " I have some in stock. If you want some, just ASK FOR it.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "wood_t";
            : if (s1_has_trait "wood_t") {
               : print "\"This may come as a surprise to you Eldrid, but metals come from below the ground and wood comes from above the ground. If you want to know about wood, see Brayern in woodwork supplies.\"";
               : done;
            }
            : print "\"I don't know anything about that.\"";
            : done;
         }
         : if (preposition1_is "for") {
            : if (noun1_is "") {
               : print "Jandor gives you a strange look. \"Am I supposed to guess what you want? You need to ASK FOR something.\"";
               : done;
            }
            : if (noun1_is "metal") {
               : print "\"You'll have to be more specific than that. I've got gears, metal bars, metal tubes, stainless steel, wire and widgets. Sheets of tin are out-of-stock, though. Just ASK FOR what you want.\"";
               : done;
            }
            : if (noun1_is "gears") {
               : if (parent_of "gears" != "limbo") {
                  : print "\"I've already given you some gears. Come back after you've used the ones I gave you.\"";
                  : done;
               }
               : create "gears";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "bar") {
               : if (parent_of "metal_bar" != "limbo") {
                  : print "\"I've already given you a metal bar. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "metal_bar";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "tube") {
               : if (parent_of "metal_tube" != "limbo") {
                  : print "\"I've already given you a metal tube. Come back after you've used the one I gave you.\"";
                  : done;
               }
               : create "metal_tube";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "steel") {
               : if (parent_of "stainless_steel" != "limbo") {
                  : print "\"I've already given you some stainless steel. Come back after you've used what I gave you.\"";
                  : done;
               }
               : create "stainless_steel";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "widgets") {
               : if (parent_of "widgets" != "limbo") {
                  : print "\"I've already given you some widgets. Come back after you've used the ones I gave you.\"";
                  : done;
               }
               : create "widgets";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "wire") {
               : if (parent_of "wire" != "limbo") {
                  : print "\"I've already given you some wire. Come back after you've used what I gave you.\"";
                  : done;
               }
               : create "wire";
               : set_string var = "message" text = "\"I'll leave it here for you.\"";
               : gosub "refresh";
            }
            : if (noun1_is "tin") {
               : print "\"Sorry, Eldrid. There's no tin left. You'll have to find a substitute.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "craft_t";
            : if (s1_has_trait "craft_t") {
               : print "\"That sounds like something in the craft area. Try Arlayna in craft supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "fabric_t";
            : if (s1_has_trait "fabric_t") {
               : print "\"I can't help you with materials or fabrics. Try Liluth in fabric supplies.\"";
               : done;
            }
            : disambiguate_s1 "universal" with_trait = "wood_t";
            : if (s1_has_trait "wood_t") {
               : print "\"This is metalwork supplies, not woodwork supplies. Try Brayern if you want any wood.\"";
               : done;
            }
            : print "\"I don't have any of that and I don't think you'll find it in any of the other supplies, either.\"";
            : done;
         }
      }
      : match "give _" {
         : if (noun1_is "cookies") {
            : print "You give one of the cookies to Jandor and keep the rest for later. \"Thanks, Eldrid. Does Mrs Claus know that you've been in her cookie box?\"";
            : done;
         }
         : print "\"I'm supposed to give you things, not the other way around.\"";
         : done;
      }
      : match "talk jandor" {
         : if (has_talked_to_jandor) {
            : print "\"Just a reminder, I've got gears, metal bars, metal tubes, stainless steel, wire and widgets, but sheets of tin are out-of-stock. If you want anything, just ASK FOR what you want.\"";
            : done;
         }
         : set_true "has_talked_to_jandor";
         : print "\"Congratulations on your coming-of-age, Eldrid. Can I help you with anything? I've got gears, metal bars, metal tubes, stainless steel, wire and widgets. Sheets of tin are out-of-stock, though. If you need further info, you can ASK ABOUT something or if you need some supplies, you can ASK FOR what you want.\"";
         : done;
      }
   }
   // Gears
   : if (is_present "gears") {
      : match "examine gears" {
         : print "They're metal discs with teeth cut into the outside edge.";
         : done;
      }
   }
   // Metal bar
   : if (is_present "metal_bar") {
      : match "examine bar" {
         : print "It's a short length of cylindrical metal bar about 10\u00a0mm in diameter.";
         : done;
      }
   }
   // Metal tube
   : if (is_present "metal_tube") {
      : match "examine tube" {
         : print "It's a long length of metal tube that could be cut to length for multiple purposes.";
         : done;
      }
   }
   // Stainless steel
   : if (is_present "stainless_steel") {
      : match "examine steel" {
         : print "It's a shiny strip of stainless steel.";
         : done;
      }
   }
   // Widgets
   : if (is_present "widgets") {
      : match "examine widgets" {
         : print "It's a bag of small metal widgets in all sorts of different shapes.";
         : done;
      }
   }
   // Wire
   : if (is_present "wire") {
      : match "examine wire" {
         : print "It looks like a roll of thin piano wire.";
         : done;
      }
   }

   // Room 21: Barn
   // Barn
   : if (is_present "barn") {
      : match "examine barn" {
         : print "The barn is plain and functional, it's only purpose being to garage Santa's sleigh.";
         : done;
      }
   }
   // Santa's sleigh (supporter)
   : if (is_present "sleigh") {
      : match "examine sleigh" {
         : disambiguate_s1 "present";
         : append "It's Santa's sleigh and it's loaded up with presents ready for delivery on Christmas Eve. ";
         : if (child_count(s1()) == 0) {
            : print "None of the presents were made by you.";
            : done;
         }
         : append "Of the presents on the sleigh, yours ";
         : if (child_count(s1()) == 1) {
            : append "is ";
         }
         : else {
            : append "are ";
         }
         : look_inside
            of = "sleigh"
            extract_the = "description"
            store_results_in = "list_object_buffer"
            make_known = "true";
         : print_list_verbose "list_object_buffer" lead_in = "";
         : done;
      }
      : match "get all" {
         : disambiguate_s2 "present";
         : if (s2() == "sleigh") {
            : do_all "sleigh";
         }
      }
      : match "get _" {
         : disambiguate_s1 "present";
         : disambiguate_s2 "present";
         : if (parent_of(s1()) == "sleigh" && (s2() == "sleigh" || noun2_is "")) {
            : remove_from_container "sleigh" quiet = "true";
            : if (s1_has_trait "treasure_t" || noun1_is "box" || noun1_is "rope") {
               : add var ="score" value = "-5";
               : failure;
            }
            : print {(you_can)}
            : done;
         }
      }
      : match "put all" {
         : disambiguate_s2 "present";
         : if (s2() == "sleigh") {
            : do_all "inventory_notworn";
         }
      }
      : match "put _" {
         : disambiguate_s1 "carried" with_trait = "treasure_t";
         : disambiguate_s2 "present";
         : if (s2() == "sleigh") {
            : if (parent_of(s1()) == "sleigh") {
               : print "{uc_def_noun1_phrase} {is_or_are} already on Santa's sleigh.";
               : done;
            }
            : if (!is_carried(s1())) {
               : print {(not_carried)}
               : done;
            }
            : if (!s1_has_trait "treasure_t") {
               : print "You can only put the presents for the children on the sleigh.";
               : done;
            }
            : if (child_count(s2()) == sleigh_item_limit) {
               : print "You can't put any more items on the sleigh.";
               : done;
            }
            : if (weigh(s1()) > 6) {
               : print "{uc_def_noun1_phrase} won't fit on the sleigh.";
               : done;
            }
            : if (s1() == "jack_box" && is_box_open) {
               : print "You should close the jack-in-the-box first, otherwise it won't be a surprise when Jennifer receives it.";
               : done;
            }
            : if (is_worn(s1())) {
               : unwear quiet = "true";
               : print "^n^(first removing {def_noun1_phrase})";
            }
            : insert_in_container "sleigh" quiet = "true";
            : add var ="score" value = "5";
            : success;
            : print "You put {def_noun1_phrase} on Santa's sleigh.";
            : done;
         }
      }
   }

   // Room 22: Outside Santa's Workshop
   // Santa's workshop (floating object)
   : if (is_present "workshop") {
      : match "examine workshop" {
         : print "This is Santa's secret workshop.";
         : done;
      }
   }
   // Snow (floating object)
   : if (is_present "snow") {
      : match "examine snow" {
         : print "It's white fluffy stuff and very, very cold.";
         : done;
      }
      : match "dig _" {
         : if (!(noun1_is "" || noun1_is "snow")) {
            : set_string var = "message" {(message + "You can't dig that.^m^")}
            : print {(message)}
            : done;
         }
         : if (!is_carried "gardening_spade") {
            : print "It's too cold to dig with your bare hands.";
            : done;
         }
         : if (is_at "room30" && has_not_created "plastic_pipe") {
            : create "plastic_pipe";
            : set_string var = "message" {(message + "You find a length of plastic pipe that doesn't look very useful. You wonder if there's anything else hidden under the snow.^m^")}
            : gosub "refresh";
         }
         : if (is_at "room30" && has_not_created "broken_mould") {
            : create "broken_mould";
            : set_string var = "message" {(message + "You find a broken mould. No wonder it's on the dump. You wonder if there's any other goodies on the dump.^m^")}
            : gosub "refresh";
         }
         : if (is_at "room30") {
            : set_string var = "message" {(message + "You can't find anything else of use on the dump. It's just household rubbish and used packaging.^m^")}
            : print {(message)}
            : done;
         }
         : set_string var = "message" {(message + "You dig a hole in the snow, but don't find anything.^m^")}
         : print {(message)}
         : done;
      }
   }

   // Room 23: North Pole
   // North pole
   : if (is_present "north_pole") {
      : match "examine pole" {
         : print "It's painted with red and white stripes like a barber's pole. How tacky. There's a sign on it.";
         : done;
      }
   }
   // North pole
   : if (is_present "wilderness") {
      : match "examine wilderness" {
         : print "Apart from Santa's workshop, there's nothing but snow as far as the eye can see.";
         : done;
      }
   }
   // Sign
   : if (is_present "sign") {
      : match "examine sign" {
         : print "There's something written on it.";
         : done;
      }
      : match "read sign" {
         : if (is_at "room23") {
            : print "Surprise, surprise. It says, 'North Pole'. Who'd have thought it?";
            : done;
         }
         : print "It says, 'Keep Out'. I think you should follow that advice or you might get eaten by a grue.";
         : done;
      }
   }

   // Room 24: Outside Stable
   // Stable (floating object)
   : if (is_present "stable") {
      : match "examine stable" {
         : if (is_at "room24") {
            : print "It looks like the entrance to a horse stable, except that the doors are much wider to accommodate the reindeers' antlers.";
            : done;
         }
         : print "It's only purpose is to provide protection for the reindeer during the cold winter months.";
         : done;
      }
   }

   // Room 25: Inside Stable
   // Stable (see room 24)
   // Ladder (floating object)
   : if (is_present "ladder") {
      : match "examine ladder" {
         : append "It's a wooden ladder that goes ";
         : if (is_at "room25") {
            : print "up to the hay loft.";
            : done;
         }
         : print "down to the stable.";
         : done;
      }
      : match "climb ladder;descend ladder" {
         : if (is_at "room27") {
            : goto "room25";
            : redescribe;
         }
      }
      : match "climb ladder;ascend ladder" {
         : if (is_at "room25" && has_fed_reindeer) {
            : goto "room27";
            : redescribe;
         }
         : if (is_at "room25") {
            : print "Volodar stops you. \"You ain't goin' up there unless ya fed them reindeer.\"";
            : done;
         }
      }
      : match "get ladder" {
         : print "It's not that sort of ladder. It's a permanent fixture and can't be moved.";
         : done;
      }
   }
   // Brazier
   : if (is_present "brazier") {
      : match "examine brazier" {
         : print "It's an old tin drum with holes drilled in the bottom. Burning wood or coals in the bottom of the drum keep the stable nice and warm.";
         : done;
      }
      : match "get brazier" {
         : print "Are you crazy? It's really, really hot!";
         : done;
      }
      : match "touch brazier" {
         : print "Ouch! It's hot.";
         : done;
      }
   }
   // Palettes
   : if (is_present "palettes") {
      : match "examine palettes" {
         : print "They're not important.";
         : done;
      }
      : match "get palettes" {
         : print "They're too heavy and awkward to move.";
         : done;
      }
   }
   // Sacks
   : if (is_present "sacks") {
      : match "examine sacks" {
         : print "They're not important.";
         : done;
      }
      : match "get sacks" {
         : print "They're too heavy for a young elf to move.";
         : done;
      }
   }
   // Volodar the elf
   : if (is_present "volodar") {
      : match "examine volodar" {
         : print "Volodar used to be in charge of security - protecting Santa and Mrs Claus and keeping the location of Santa's workshop secret. He's getting a bit long in the tooth, now, so he looks after the reindeer. He's known to like a drink, but he loves animals, especially reindeer, and the reindeer love him.";
         : done;
      }
      : match "ask volodar" {
         : if (preposition2_is "" && noun2_is "") {
            : print "You need to ASK VOLODAR ABOUT something if you want information or ASK VOLODAR FOR something if you want him to give you something.";
            : done;
         }
         : if (preposition2_is "about" && noun2_is "") {
            : print "What you talkin' 'bout boy? You need to ASK ABOUT somethin'.\"";
            : done;
         }
         : if (preposition2_is "about" && !noun2_is "") {
            : set_sentence "ask about $2";
         }
      }
      : match "ask _" {
         : if (preposition1_is "about") {
            : if (noun1_is "") {
               : print "Volodar gives you a weird look. \"What you talkin' 'bout boy? You need to ASK ABOUT somethin'.\"";
               : done;
            }
            : if (noun1_is "reindeer") {
               : print "\"Did ya know that all Santa's reindeer are female? Ya can tell, 'cause the male reindeer shed their antlers in November and they don't start growin' back until February, whereas the females keep their antlers until May.\"";
               : done;
            }
            : print "\"I don't know nothin' 'bout that.\"";
            : done;
         }
      }
      : match "get volodar" {
         : print "\"What ya doin' boy?\"";
         : done;
      }
      : match "give _" {
         : if (noun1_is "carrots") {
            : print "\"Don't give 'em to me. Give 'em to them reindeer.\"";
            : done;
         }
         : if (noun1_is "cookies") {
            : print "You give one of the cookies to Volodar and keep the rest for later. He scoffs it down. \"Mmm, that 'it the spot. Them reindeer dunno what they're missin' out on. Thanks, Eldrid.\"";
            : done;
         }
         : print "\"I got no use for that. Thanks, anyway.\"";
         : done;
      }
      : match "talk volodar" {
         : if (has_talked_to_volodar) {
            : if (has_fed_reindeer) {
               : print "\"Geez, you're a talkative young scallywag, aren't ya? 'Aven't ya got any other chores ta do?\"";
               : done;
            }
            : print "\"You fed them reindeer yet?\"";
            : done;
         }
         : set_true "has_talked_to_volodar";
         : print "\"G'day Eldrid. I s'pose Santa sent ya down 'ere to 'elp with them reindeer. As it 'appens, I got somethin' for ya to do. Can ya feed 'em? They likes carrots, but I s'pose ya know that already.\"";
         : done;
      }
   }

   // Room 26: Reindeer Stalls
   // Reindeer stalls
   : if (is_present "reindeer_stalls") {
      : match "examine stalls" {
         : print "Each stall has a little plaque mounted over the top with the name of the reindeer.";
         : done;
      }
   }
   // Plaques
   : if (is_present "plaques") {
      : match "examine plaques" {
         : print "There are eight wooden plaques, one mounted above each stall. Each one has the name of a reindeer carved into it.";
         : done;
      }
      : match "read plaques" {
         : print "The plaques read: Dasher, Dancer, Prancer, Vixen, Comet, Cupid, Dunder and Blixem.";
         : done;
      }
   }
   // Reindeer
   : if (is_present "reindeer") {
      : match "examine reindeer" {
         : print "Santa's reindeer (Rangifer tarandus saintnicolas magicalus) look very similar to the other subspecies of reindeer or caribou, but have several distinguishing characteristics, most notably, their ability to fly.";
         : done;
      }
      : match "drop carrots" {
         : if (is_carried "carrots") {
            : destroy "carrots";
            : set_true "has_fed_reindeer";
            : add var ="score" value = "10";
            : success;
            : print "When you drop the carrots, the reindeer wander over and help themselves until there are none left.";
            : done;
         }
      }
      : match "feed reindeer" {
         : if ((preposition2_is "" || preposition2_is "with") && noun2_is "") {
            : if (!is_carried "carrots") {
               : print "You don't have anything to feed the reindeer.";
               : done;
            }
            : print "^n^(with the carrots)";
            : set_sentence "give carrots to $1";
         }
         : if (preposition2_is "with" && !noun2_is "") {
            : set_sentence "give $2 to $1";
         }
      }
      : match "give carrots;feed carrots" {
         : if (!is_carried "carrots") {
            : print "You aren't carrying any carrots.";
            : done;
         }
         : if ((preposition2_is "" || preposition2_is "to") && noun2_is "") {
            : print "^n^(to the reindeer)";
            : set_sentence "give $1 to reindeer";
         }
         : if (preposition2_is "to" && (noun2_is "dasher" || noun2_is "dancer" || noun2_is "prancer" || noun2_is "vixen" || noun2_is "comet" || noun2_is "cupid" || noun2_is "blunder" || noun2_is "blixem")) {
            : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
            : done;
         }
         : if (preposition2_is "to" && noun2_is "reindeer") {
            : destroy "carrots";
            : set_true "has_fed_reindeer";
            : add var ="score" value = "10";
            : success;
            : print "You give a carrot to each of the reindeer, then do a second round and give them each a second carrot. That should keep them satisfied for a while.";
            : done;
         }
      }
   }
   // Dasher
   : if (is_present "dasher") {
      : match "examine dasher" {
         : print "Dasher is the fastest of Santa's reindeer, but she's also very sociable.";
         : done;
      }
      : match "feed dasher" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Dancer
   : if (is_present "dancer") {
      : match "examine dancer" {
         : print "Dancer is a bit of an extrovert and loves to celebrate any occasion.";
         : done;
      }
      : match "feed dancer" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Prancer
   : if (is_present "prancer") {
      : match "examine prancer" {
         : print "Prancer is a bit vain, though affectionate. She has a great memory.";
         : done;
      }
      : match "feed prancer" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Vixen
   : if (is_present "vixen") {
      : match "examine vixen" {
         : print "Vixen loves to be the centre of attention.";
         : done;
      }
      : match "feed vixen" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Comet
   : if (is_present "comet") {
      : match "examine comet" {
         : print "Comet is very affectionate and easy going. She will go out of her way for the other reindeer.";
         : done;
      }
      : match "feed comet" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Cupid
   : if (is_present "cupid") {
      : match "examine cupid" {
         : print "Cupid is very friendly and makes everyone feel comfortable.";
         : done;
      }
      : match "feed cupid" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Dunder
   : if (is_present "dunder") {
      : match "examine dunder" {
         : print "Dunder is very loud. Her name is actually Dutch for 'thunder', but Clement C Moore translated her name to the German 'Donner'.";
         : done;
      }
      : match "feed dunder" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Blixem
   : if (is_present "blixem") {
      : match "examine blixem" {
         : print "Blixem is Dutch for 'lightning'. She's so named because she's as fast as lightning. Clement C Moore translated her name to the German 'Blitzen', but that's wrong.";
         : done;
      }
      : match "feed blixem" {
         : print "It would be unfair to feed one reindeer and not the others. Try FEED REINDEER.";
         : done;
      }
   }
   // Rope
   : if (is_present "rope") {
      : match "examine rope" {
         : print "It's a short length of rope used to lead the reindeer to the sleigh, not that they really need it.";
         : done;
      }
   }

   // Room 27: Hay Loft
   // Hay loft
   : if (is_present "hay_loft") {
      : match "examine loft" {
         : print "You know that the loft is for keeping hay, but what on earth does 'loft' mean?";
         : done;
      }
   }
   // Haystack
   : if (is_present "haystack") {
      : match "examine haystack" {
         : set_string var = "message" text = "It's a large pile of hay used for bedding for the reindeer.";
         : if (has_not_created "needle") {
            : create "needle";
            : set_string var = "message" {(message + " Ooh, you find a needle in the haystack!")}
            : gosub "refresh";
         }
         : print {(message)}
         : done;
      }
      : match "get hay" {
         : if (has_not_created "handful_hay") {
            : if (is_pocketable "handful_hay") {
               : pocket "handful_hay";
               : print "You can't take the whole lot, so you grab a handful of hay from the stack.";
               : done;
            }
            : print "You can't carry any more. Try dropping something.";
            : done;
         }
         : if (!is_present "handful_hay") {
            : print "You've already taken some of the hay. How much hay does one elf need?";
            : done;
         }
      }
   }
   // Handful of hay
   : if (is_present "handful_hay") {
      : match "examine hay" {
         : print "It's a handful of hay. It would make good stuffing for anything that needs to be stuffed. Hmm, maybe not the Christmas turkey.";
         : done;
      }
   }
   // Needle
   : if (is_present "needle") {
      : match "examine needle" {
         : print "It's a sharp sewing needle. I guess somebody must have dropped it when they were getting hay.";
         : done;
      }
   }

   // Room 28: Southwest of Santa's Workshop

   // Room 29: Vegetable Garden
   // Vegetable garden
   : if (is_present "vegetable_garden") {
      : match "examine garden" {
         : print "It would normally be full of carrots and turnips and potatoes and silverbeets and lots of other yummy vegetables, but it's now covered in deep snow.";
         : done;
      }
   }
   // Pole
   : if (is_present "pole") {
      : match "examine pole" {
         : print "It's a pole sticking out of the snow.";
         : done;
      }
      : match "get pole" {
         : if (!is_pocketable "gardening_spade") {
            : print "You can't carry any more. Try dropping something.";
            : done;
         }
         : destroy "pole";
         : pocket "gardening_spade";
         : set_string var = "message" text = "As you pull the pole out of the snow, you realise that it's actually a spade used for gardening.";
         : gosub "refresh";
      }
   }
   // Gardening spade
   : if (is_present "gardening_spade") {
      : match "examine spade" {
         : print "It's a flat-bladed spade used for digging up the carrots and potatoes and turnips and other vegetables.";
         : done;
      }
   }

   // Room 30: Dump
   // Dump
   : if (is_present "dump") {
      : match "examine dump" {
         : print "It's full of rubbish, mainly reject toys and food scraps that will be turned into mulch when the snows melt.";
         : done;
      }
   }
   // Plastic pipe
   : if (is_present "plastic_pipe") {
      : match "examine tube" {
         : print "It's a plastic cylinder, like a conduit, with an internal diameter of about 40\u00a0mm. It looks pretty useless.";
         : done;
      }
   }
   // Broken mould
   : if (is_present "broken_mould") {
      : match "examine mould" {
         : print "It's a broken mould in the shape of a pig.";
         : done;
      }
      : match "repair mould" {
         : if (!is_carried "glue") {
            : print "You have nothing to {verb_phrase} it with.";
            : done;
         }
         : swap o1 = "broken_mould" o2 = "mould";
         : print "You apply Santa's magic glue to the two halves of the broken mould and hold them together. In a matter of minutes, the mould is as good as new. Well, almost.";
         : done;
      }
   }
   // Mould
   : if (is_present "mould") {
      : match "examine mould" {
         : print "It's a mould in the shape of a pig.";
         : done;
      }
   }

   // Room 31: Outside Coal Mine
   // Coal mine
   : if (is_present "coal_mine") {
      : match "examine mine" {
         : if (is_at "room31") {
            : print "It looks dark inside. I hope you've got a light source.";
            : done;
         }
         : print "It's dark in here. Don't blow the candle out or you won't be able to see anything.";
         : done;
      }
   }
   // Mining equipment
   : if (is_present "mining_equipment") {
      : match "examine equipment" {
         : print "You can make out a shovel, a pickaxe and a barrel. They like they've been discarded.";
         : done;
      }
      : match "get equipment" {
         : print "You'll have to tell me which piece of equipment you want, the shovel, the pickaxe or the barrel.";
         : done;
      }
   }
   // Barrel
   : if (is_present "barrel") {
      : match "examine barrel" {
         : print "You have no idea what it was used for, but it looks like it has outlived its usefulness.";
         : done;
      }
      : match "get barrel" {
         : print "It's too heavy.";
         : done;
      }
   }
   // Pickaxe
   : if (is_present "pickaxe") {
      : match "examine pickaxe" {
         : print "It's no doubt used for mining, so you'd better leave it alone.";
         : done;
      }
      : match "get pickaxe" {
         : print "Leave it for the miners. Someone may need it.";
         : done;
      }
   }
   // Shovel
   : if (is_present "shovel") {
      : match "examine shovel" {
         : print "It's almost as big as you are. You'd better leave it for the adults. You'll need something smaller.";
         : done;
      }
      : match "get shovel" {
         : print "Leave it for the miners. Someone may need it.";
         : done;
      }
   }

   // Room 32: Inside Coal Mine
   // Lump of coal
   : if (is_present "coal") {
      : match "examine coal" {
         : print "It's a lump of black coal, roughly the size of a goose egg.";
         : done;
      }
      : match "get coal" {
         : if (is_beside "coal" && !has_moved_coal) {
            : set_true "has_moved_coal";
            : add var ="score" value = "5";
            : success;
         }
      }
   }

   // Post processing of verbs (in alphabetical order)
   // About (meta command)
   : match "about -" {
      : decrement "turns";
      : gosub "version";
      : print "This game was originally written for the <Adventuron Christmas Jam<13>>[https://itch.io/jam/an-adventuron-christmas-jam], 17 November to 22 December 2020. See the jam page for the jam rules.\n^n^Game design, coding and graphics by <Garry Francis<13>>[https://warrigal.itch.io].\nGermania One font by John Vargas Beltrán, licensed under the <Open Font License<13>>[https://scripts.sil.org/OFL].\nTitle screen adapted from an image by paci77.\nAdventuron written by <Chris Ainsley<13>>[https://adventuron.itch.io].^m^";
      : done;
   }
   // Apply
   : match "apply *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Ascend
   : match "ascend *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Ask
   : match "ask *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "There's no response.";
      : done;
   }
   // Attack
   : match "attack *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : if (s1_has_trait "character_t") {
         : print {("Elves don't go around "+ original "verb" + "ing other living things.")}
         : done;
      }

      : print "Your blows have no effect.";
      : done;
   }
   // Break
   : match "break *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "There's no need to resort to violence.";
      : done;
   }
   // Burst
   : match "burst *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Clean
   : match "clean *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "{uc_def_noun1_phrase} {is_or_are} not dirty.";
      : done;
   }
   // Climb
   : match "climb *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Close
   : match "close *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Consult
   : match "consult *" {
      : disambiguate_s1 "present";
      : if (!is_present (s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Cut
   : match "cut *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Dance
   : match "dance -" {
      : print "You do a little jig and nearly trip over.";
      : done;
   }
   // Deflate
   : match "deflate *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Descend
   : match "descend *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Dig
   : match "dig *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : if (is_at "room32") {
         : print "Clang! The ground is too hard for digging in here.";
         : done;
      }
      : print "Clang! The floor is too hard for digging in here.";
      : done;
   }
   // Dismount
   : match "dismount *" {
      : disambiguate_s1 "present";
      : if (!is_present (s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Drink
   : match "drink *" {
      : disambiguate_s1 "present";
      : if (!is_present (s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Drop
   : match "drop *" {
      : disambiguate_s1 "carried";
      : if (noun1_is "all") {
         : do_all "inventory_notworn";
      }
      : if (!is_carried(s1())) {
         : print {(not_carried)}
         : done;
      }
      : if (is_worn(s1())) {
         : print "You'll have to remove {def_noun1} first.";
         : done;
      }
      : if (is_carried (s1()) && !is_worn (s1())) {
         : drop quiet = "true";
         : set_string var = "message" {(you_can)}
         : gosub "refresh";
      }
   }
   // Eat
   : match "eat *" {
      : disambiguate_s1 "carried";
      : if (!is_carried(s1())) {
         : print {(not_carried)}
         : done;
      }
      : print "If you {verb_phrase} {def_noun1_phrase}, it will surely give you indigestion.";
      : done;
   }
   // Empty
   : match "empty *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Examine
   : match "examine *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "You see nothing special.";
      : done;
   }
   // Extinguish
   : match "extinguish *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Feed
   : match "feed *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : if (!s1_has_trait "character_t") {
         : print "{uc_def_noun1_phrase} doesn't appear to be hungry.";
         : done;
      }
      : print "You can't go around feeding inanimate objects.";
      : done;
   }
   // Fill
   : match "fill *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Find
   : match "find *" {
      : if (noun1_is "gingerbread") {
         : if (has_not_created "gingerbread" && has_talked_to_mrs_claus) {
            : print "It's on the top shelf in the pantry. You know this because Mrs Claus told you so.";
            : done;
         }
         : if (has_not_created "gingerbread") {
            : print "Mrs Claus knows where it is.";
            : done;
         }
      }
      : disambiguate_s1 "present";
      : if (is_worn (s1())) {
         : print "You're wearing {def_noun1_phrase}.";
         : done;
      }
      : if (is_carried (s1())) {
         : print "You're carrying {def_noun1_phrase}.";
         : done;
      }
      : if (is_present (s1())) {
         : print "{uc_def_noun1_phrase} {is_or_are} here.";
         : done;
      }
      : print "I can only tell you what you see as you move about and manipulate things. I can't tell you where remote things are.";
      : done;
   }
   // Fire
   : match "fire *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Fly
   : match "fly -" {
      : print "You're not a bird.";
      : done;
   }
   : match "fly *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Get
   : match "get *" {
      : disambiguate_s1 "present";
      : if (noun1_is "all") {
         : do_all "current_location_objects";
      }
      : if (is_worn(s1())) {
         : print "You're already wearing {def_noun1_phrase}.";
         : done;
      }
      : if (is_carried(s1())) {
         : print "You're already carrying {def_noun1_phrase}.";
         : done;
      }
      : if (!is_present(s1())) {
         : print "{not_present}";
         : done;
      }
      : if (!is_pocketable (s1())) {
         : print "You can't carry any more. Try dropping something.";
         : done;
      }
      : if (is_beside (s1())) {
         : get quiet = "true";
         : set_string var = "message" {(you_can)}
         : gosub "refresh";
      }
   }
   // Give
   : match "give *" {
      : print "There's no one to {verb_phrase} {def_noun1_phrase} to.";
      : done;
   }
   // Help (meta command)
   : match "help -" {
      : decrement "turns";
      : print "Tell the program what you want to do by entering simple English commands. Commands consist of a verb-phrase only (like <SLEEP<12>> or <GET OFF<12>>), a verb-phrase followed by a noun-phrase (like <CHOP TREE<12>> or <SHARPEN THE BLUNT AXE<12>>) or a verb-phrase followed by two noun-phrases (like <ASK THE ELF ABOUT THE TOOLS<12>> or <GIVE THE COOKIES TO SANTA CLAUS<12>>).\nHere's some common commands (with abbreviations in brackets):\nUse <GO NORTH<12>>, <GO SOUTH<12>>, <GO EAST<12>>, <GO WEST<12>>, <GO UP<12>>, <GO DOWN<12>> (<N<12>>, <S<12>>, <E<12>>, <W<12>>, <U<12>>, <D<12>>) and verbs like <CLIMB<12>> to move around.\nUse <EXAMINE<12>> (<X<12>>) to get more information about an object.\nUse <GET<12>> or <TAKE<12>> to pick up an object.\nUse <DROP<12>> or <DISCARD<12>> to drop an object.\nUse <INVENTORY<12>> (<I<12>>) to see what you're carrying.\nUse <LOOK<12>> (<L<12>>) to redisplay the room description.\nUse <OPEN<12>>, <CLOSE<12>>, <LIGHT<12>>, <EXTINGUISH<12>>, <EAT<12>>, <READ<12>> and anything else that seems appropriate for the situation.\nWhen you encounter a character, use <TALK<12>> to talk to them, <ASK ABOUT<12>> to ask them about something in particular, <GIVE<12>> to give them something and <ASK FOR<12>> to get them to give you something.\nUse <HINT<12>> to get a hint, but don't use this unless you're really desperate.\nUse <WAIT<12>> (<Z<12>>) to pass time.\nUse <TURNS<12>> to see how many turns you've taken or <SCORE<12>> to see both your score and the number of turns you've taken.\nUse <SAVE<12>> or <RAMSAVE<12>> to save the game.\nUse <LOAD<12>>, <RAMLOAD<12>> or <RESTORE<12>> to restore a saved game.\nUse <QUIT<12>> (<Q<12>>) or <RESTART<12>> to start again.\nUse <VERSION<12>> to get version info.\nThere are many other verbs you can use and most verbs have synonyms. If something doesn't work, just experiment and try something else.\nSee the <game page<13>>[https://warrigal.itch.io/santas-trainee-elf] for full instructions.";
      : done;
   }
   // Hint
   : match "hint -" {
      : if (is_at "room01" && !has_talked_to_santa) {
         : print "TALK TO SANTA CLAUS.";
         : done;
      }
      : if (is_at "room01" && parent_of "candle" == "mantelpiece") {
         : print "EXAMINE everything, especially the thing above the fireplace.";
         : done;
      }
      : if (is_at "room02" && parent_of "wine_bottle" == "dining_tables") {
         : print "EXAMINE everything, especially the dining tables.";
         : done;
      }
      : if (is_at "room03" && !has_talked_to_mrs_claus) {
         : print "TALK TO MRS CLAUS.";
         : done;
      }
      : if (is_at "room03" && !has_given_gingerbread) {
         : print "GIVE MRS CLAUS what she asked you to get.";
         : done;
      }
      : if (is_at "room04" && has_not_created "gingerbread" && !has_talked_to_mrs_claus) {
         : print "EXAMINE SHELVES after talking to Mrs Claus.";
         : done;
      }
      : if (is_at "room04" && has_not_created "gingerbread" && !is_on_box) {
         : print "EXAMINE SHELVES? REACH SHELVES? CLIMB SHELVES?";
         : done;
      }
      : if (is_at "room04" && has_not_created "gingerbread" && has_not_created "jack_box") {
         : print "You need to get higher. One of the toys will help, but you haven't made it yet.";
         : done;
      }
      : if (is_at "room04" && has_not_created "gingerbread") {
         : print "It might help if you open it.";
         : done;
      }
      : if (is_at "room05") {
         : print "The mailroom is downstairs.";
         : done;
      }
      : if (is_at "room06") {
         : print "Santa's bedroom is off limits. Really. So don't bother trying.";
         : done;
      }
      : if (is_at "room07" && has_not_created "spring") {
         : print "EXAMINE BUNK and follow the advice.";
         : done;
      }
      : if (is_at "room07" && parent_of "jumper" == "foot_locker") {
         : print "EXAMINE everything, especially the thing at the foot of your bunk.";
         : done;
      }
      : if (is_at "room08" && parent_of "cardboard_cylinder" == "waste_basket") {
         : print "EXAMINE everything, especially the thing beside the toilet.";
         : done;
      }
      : if (is_at "room08" && parent_of "water" != "wine_bottle") {
         : print "You can get some water if you have something to put it in.";
         : done;
      }
      : if (is_at "room09") {
         : print "The mailroom is to the south.";
         : done;
      }
      : if (is_at "room10") {
         : print "Knowledge can be acquired to the south.";
         : done;
      }
      : if (is_at "room11") {
         : print "This is where you learnt how to make toys. 'Kindroth's Guide' is a great help if you've forgotten your lessons.";
         : done;
      }
      : if (is_at "room12" && !has_talked_to_neldor) {
         : print "TALK TO NELDOR.";
         : done;
      }
      : if (is_at "room12") {
         : print "ASK NELDOR ABOUT the children on the list.";
         : done;
      }
      : if (is_at "room13") {
         : print "Bring all the materials here, then MAKE the toy you need.";
         : done;
      }
      : if (is_at "room14") {
         : print "EXAMINE everything, especially the shelves.";
         : done;
      }
      : if (is_at "room15") {
         : print "Woodwork supplies are to the north and craft supplies are to the south.";
         : done;
      }
      : if (is_at "room16" && !has_talked_to_brayern) {
         : print "TALK TO BRAYERN.";
         : done;
      }
      : if (is_at "room16") {
         : print "ASK BRAYERN ABOUT something to get further information or ASK BRAYERN FOR something to get his supplies.";
         : done;
      }
      : if (is_at "room17" && !has_talked_to_arlayna) {
         : print "TALK TO ARLAYNA.";
         : done;
      }
      : if (is_at "room17") {
         : print "ASK ARLAYNA ABOUT something to get further information or ASK ARLAYNA FOR something to get her supplies.";
         : done;
      }
      : if (is_at "room18") {
         : print "Fabric supplies are to the north and metalwork supplies are to the south.";
         : done;
      }
      : if (is_at "room19" && !has_talked_to_liluth) {
         : print "TALK TO LILUTH.";
         : done;
      }
      : if (is_at "room19") {
         : print "ASK LILUTH ABOUT something to get further information or ASK LILUTH FOR something to get her supplies.";
         : done;
      }
      : if (is_at "room20" && !has_talked_to_jandor) {
         : print "TALK TO JANDOR.";
         : done;
      }
      : if (is_at "room20") {
         : print "ASK JANDOR ABOUT something to get further information or ASK JANDOR FOR something to get his supplies.";
         : done;
      }
      : if (is_at "room21") {
         : print "When you've got a present, PUT it ON SLEIGH.";
         : done;
      }
      : if (is_at "room22") {
         : print "I hope you've been drawing a map.";
         : done;
      }
      : if (is_at "room23") {
         : print "Yep, that confirms it. Santa's secret workshop is definitely at the North Pole.";
         : done;
      }
      : if (is_at "room24") {
         : print "It's warmer inside.";
         : done;
      }
      : if (is_at "room25" && !has_talked_to_volodar) {
         : print "TALK TO VOLODAR.";
         : done;
      }
      : if (is_at "room25" && !has_fed_reindeer) {
         : print "Did you EXAMINE everything in the pantry?";
         : done;
      }
      : if (is_at "room26" && !has_talked_to_volodar) {
         : print "Volodar will tell you what to do.";
         : done;
      }
      : if (is_at "room26" && !has_fed_reindeer) {
         : print "Well, what are you waiting for? Do what Volodar asked you to do.";
         : done;
      }
      : if (is_at "room27" && has_not_created "needle") {
         : print "Finding something here would be like finding a needle in a haystack.";
         : done;
      }
      : if (is_at "room27" && has_not_created "handful_hay") {
         : print "You can't get the whole haystack, but you can get some hay.";
         : done;
      }
      : if (is_at "room28") {
         : print "Did you EXAMINE THE WINDOWs from the hallways? Now it's time to explore what you saw.";
         : done;
      }
      : if (is_at "room29" && has_not_created "gardening_spade") {
         : print "The pole is buried in the snow. I wonder what's at the end of it.";
         : done;
      }
      : if (is_at "room30" && has_not_created "plastic_pipe") {
         : print "I really dig dumps. They conceal all sorts of goodies.";
         : done;
      }
      : if (is_at "room30" && has_not_created "broken_mould") {
         : print "If at first you succeed, try, try again.";
         : done;
      }
      : if (is_at "room31") {
         : print "Why not go inside?";
         : done;
      }
      : if (is_at "room32" && !is_present "candle") {
         : print "You need a light source. Did you EXAMINE everything in the lounge room?";
         : done;
      }
      : if (is_at "room32" && !is_candle_lit) {
         : print "An unlit candle is as useful as an ashtray on a motorbike. You need a  flame to light it.";
         : done;
      }
      : print "Elves don't need to ask for hints.";
      : done;
   }
   // Hit
   : match "hit *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : if (preposition2_is "" && noun2_is "") {
         : print "You vent your frustration and {verb_phrase} {def_noun1_phrase}. Feeling better now?";
         : done;
      }
      : if (!preposition2_is "with") {
         : print "You can only {verb_phrase} {def_noun1_phrase} with something.";
         : done;
      }
      : if (noun2_is "") {
         : print "You need to tell me what to {verb_phrase} {def_noun1_phrase} with.";
         : done;
      }
      : disambiguate_s2 "carried";
      : if (!is_carried (s2())) {
         : print "You can't {verb_phrase} {def_noun1_phrase} with something you're not carrying.";
         : done;
      }
      : print "You vent your frustration and {verb_phrase} {def_noun1_phrase} with {def_noun2_phrase}. Feeling better now?";
      : done;
   }
   // Inventory (meta command)
   : match "inventory -" {
      : decrement "turns";
      : inventory;
   }
   // Jump
   : match "jump *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "You can't {verb_phrase} over {def_noun1_phrase}.";
      : done;
   }
   // Kick
   : match "kick *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "Ow! You hurt your foot.";
      : done;
   }
   // Kiss
   : match "kiss *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "No way!";
      : done;
   }
   // Light
   : match "light *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {("You don't see any " + original "noun1" + " here.")}
         : done;
      }
      : if (!is_at "room01" && !is_at "room25") {
         : print "You can't see anywhere to {verb_phrase} {def_noun1_phrase}.";
         : done;
      }
      : if (s1_has_trait "wood_t") {
         : print "Resources are scarce at the moment, so I don't think it's a good idea to throw good building materials on the fire.";
         : done;
      }
      : print "You're not a pyromanic.";
      : done;
   }
   // Listen
   : match "listen -" {
      : if (is_at "room01" && has_talked_to_santa) {
         : print "You hear the heavy breathing of Santa over the crackles and pops of the fire.";
         : done;
      }
      : if (is_at "room01") {
         : print "You hear the characteristic crackles and pops of the fire.";
         : done;
      }
      : print "You don't hear anything out of the ordinary.";
      : done;
   }
   // Look (meta command)
   : match "look -" {
      : decrement "turns";
      : redescribe;
   }
   // Mount
   : match "mount *" {
      : disambiguate_s1 "present";
      : if (!is_present (s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // No
   : match "no -" {
      : print "There's no need to be so negative.";
      : done;
   }
   // Open
   : match "open *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Play
   : match "play *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "You can't {verb_phrase} with {that_or_those}.";
      : done;
   }
   // Pour
   : match "pour *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Pull, push
   : match "pull *;push *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "{uc_def_noun1_phrase} won't budge.";
      : done;
   }
   // Put
   : match "put *" {
      : disambiguate_s1 "carried";
      : if (!is_carried(s1())) {
         : print {(not_carried)}
         : done;
      }
      : print "There's no container around.";
      : done;
   }
   // Ramload (meta command)
   : match "ramload -" {
      : decrement "turns";
      : ramload;
   }
   // Ramsave (meta command)
   : match "ramsave -" {
      : decrement "turns";
      : ramsave;
   }
   // Reach
   : match "reach *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "Yep, you can {verb_phrase} {def_noun1_phrase}.";
      : done;
   }
   // Read
   : match "read *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "There's nothing legible on {that_or_those}.";
      : done;
   }
   // Remove
   : match "remove *" {
      : if (noun1_is "all") {
         : do_all "inventory_worn";
      }
   }
   // Repair
   : match "repair *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "{uc_def_noun1_phrase} {is_or_are} not broken.";
      : done;
   }
   // Restore (meta command)
   : match "restore -" {
      : decrement "turns";
      : load;
   }
   // Save (meta command)
   : match "save -" {
      : decrement "turns";
      : save;
   }
   // Say
   : match "say *" {
      : if (noun1_is "xyzzy") {
      : print {("You say \"" + original "noun1" + "\", but nothing happens. I think you're in the wrong adventure.")}
      : done;
      }
      : else {
         : print {("You say \"" + lower(original "noun1") + "\", but nothing happens.")}
         : done;
      }
   }
   // Score (meta command)
   : match "score -" {
      : decrement "turns";
      : print {("You have scored " + score + (score == 1 ? " point" : " points") + " out of 100 in " + turns + (turns == 1 ? " turn." : " turns."))}
      : done;
   }
   // Seal
   : match "seal *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Search
   : match "search *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "You don't find anything.";
      : done;
   }
   // Show
   : match "show *" {
      : disambiguate_s1 "carried";
      : if (!is_carried(s1())) {
         : print {(not_carried)}
         : done;
      }
      : if (preposition2_is "to" && !noun2_is "" && s2_has_trait "character_t") {
         : print "{uc_def_noun2_phrase} doesn't seem interested.";
         : done;
      }
      : print "Nobody seems interested.";
      : done;
   }
   // Sit
   : match "sit _;sit down" {
      : print "This is no time to rest.";
      : done;
   }
   // Sleep
   : match "sleep -" {
      : print "You're not sleepy.";
      : done;
   }
   // Smell
   : match "smell *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "You don't smell anything out of the ordinary.";
      : done;
   }
   // Squeeze
   : match "squeeze *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Swim
   : match "swim -" {
      : if (is_at "cold_zone") {
         : print "I think skiing would be more appropriate than swimming, but you don't have any skis and you don't know how to ski anyway.";
         : done;
      }
      : print "It's a bit dry for swimming here.";
      : done;
   }
   // Talk
   : match "talk *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "There's no response.";
      : done;
   }
   // Tear
   : match "tear *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Think
   : match "think -" {
      : print "You {verb_phrase} about nothing in particular.";
      : done;
   }
   // Throw
   : match "throw *" {
      : disambiguate_s1 "carried";
      : if (!is_carried(s1())) {
         : print {(not_carried)}
         : done;
      }
      : drop quiet = "true";
      : set_string var = "message" {("{uc_def_noun1_phrase} doesn't go far.")}
      : gosub "refresh";
   }
   // Touch
   : match "touch *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "You feel nothing unexpected.";
      : done;
   }
   // Turns (meta command)
   : match "turns -"  {
      : decrement "turns";
      : print {("You have taken " + turns + (turns == 1 ? " turn." : " turns."))}
      : done;
   }
   // Unseal
   : match "unseal *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print {(you_cant)}
      : done;
   }
   // Use
   : match "use *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "'Use' is a pretty vague word. Please be more specific.";
      : done;
   }
   // Version (meta command)
   : match "version -" {
      : decrement "turns";
      : gosub "version";
      : done;
   }
   // Wait
   : match "wait -;z -" {
      : print "Time passes...";
      : done;
   }
   // Wake
   : match "wake *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "{uc_def_noun1_phrase} is not asleep.";
      : done;
   }
   // Wear
   : match "wear *" {
      : if (noun1_is "all") {
         : do_all "inventory_notworn_wearable";
      }
      : disambiguate_s1 "present";
      : if (is_worn(s1())) {
         : print "You're already wearing {def_noun1_phrase}.";
         : done;
      }
      : if (!is_carried(s1())) {
         : print {(not_carried)}
         : done;
      }
   }
   // Write
   : match "write *" {
      : disambiguate_s1 "present";
      : if (!is_present(s1())) {
         : print {(not_present)}
         : done;
      }
      : print "You can't {verb_phrase} on {def_noun1_phrase}.";
      : done;
   }
   // Xyzzy
   : match "xyzzy -" {
      : print "You say \"{verb_phrase}\", but nothing happens. I think you're in the wrong adventure.";
      : done;
   }
   // Yes
   : match "yes -" {
      : print "Yeah, yeah, yeah. Always the yes man...or woman.";
      : done;
   }
}

######################################
#  On pre describe
######################################
on_pre_describe {
   // Floating objects in alphabetical order
   : if (is_just_entered()) {
      : create "floor";
      : if (is_at "cold_zone") {
         : create "snow";
      }
      : if (!is_at "cold_zone") {
         : create "roof";
      }
      : if (is_at "hall_zone") {
         : create "hallway";
      }
      : if (is_at "window_zone") {
         : create "window";
      }
      : if (is_at "workshop_zone") {
         : create "workshop";
      }
      : if (!(is_at "room23" || is_at "room24" || is_at "room31" || is_at "room32")) {
         : create "wall";
         : create "walls";
      }
      : if (is_at "room01" || is_at "room21") {
         : create "christmas_presents";
      }
      : if (is_at "room05" || is_at "room09") {
         : create "stairs";
      }
      : if (is_at "room06" || is_at "room22" || is_at "room24") {
         : create "door";
      }
      : if (is_at "room13" || is_at "room14" || is_at "room21" || is_at "room30") {
         : create "toy";
         : create "toys";
      }
      : if (is_at "room22" || is_at "room28") {
         : create "workshop";
      }
      : if (is_at "room23" || is_at "room32") {
         : create "sign";
      }
      : if (is_at "room24" || is_at "room25") {
         : create "stable";
      }
      : if (is_at "room25" || is_at "room27") {
         : create "ladder";
      }
      : if (is_at "room31" || is_at "room32") {
         : create "coal_mine";
      }
      : if (is_at "room32" && is_dark) {
         : set_graphic graphic = "room32" target = "room32";
      }
      : else {
         : set_graphic graphic = "room32a" target = "room32";
      }
   }
}

######################################
#  On describe
######################################
on_describe {
   : if (is_refresh) {
      : set_false "is_refresh";
      : print {(message)}
   }
}

######################################
#  On tick
######################################
on_tick {
   : increment "turns";
   : set_string var = "message" text = "";
   : if (is_just_entered() && turns == 1) {
      : gosub "version";
      : print "Type <ABOUT<12>> for further info or <HELP<12>> to see a list of useful commands.";
   }
   : if (score == 100) {
      : refresh_status_bar;
      : print "^c^[[Click, tap or press <Enter<12>> to continue]]";
      : press_any_key;
      : clear_screen;
      : print "Congratulations, Eldrid. You have completed all your chores. Santa will be very pleased when he wakes up and finds out.\nThe reindeer are fed, all the presents are loaded onto the sleigh and Mrs Claus will have a gingerbread house ready to celebrate when Santa returns from his annual journey around the world.\nWhen Santa sets off tomorrow, you can take pride knowing that the happiness on the children's faces when they find their presents under the Christmas tree is partly down to you. Well, maybe not Oliver, but that will teach him to be nice next year.";
      : print "^c^[[Click, tap or press <Enter<12>> to continue]]";
      : press_any_key;
      : clear_screen;
      : ask_bool {
         var = is_amusing
         question = Now that you've completed the game, would you like to see some amusing things to try (Y/N)?
         force_show_numbering = false
         do_not_show_answers = true
      }
      : if (is_amusing) {
         : clear_screen;
         : print "Firstly, make sure you examine yourself and every noun in every header and room description.";
         : print "Try unusual verbs like BREAK, DANCE, EAT, HIT, KICK, KISS, PRAY, SHOUT, SING, SWIM (indoors and outdoors), TOUCH (hot things) and magic words such as XYZZY.";
         : print "Try burning things.";
         : print "Try deflating, cutting and stepping on the balloon or bursting it with the lit candle.";
         : print "Try examining, opening and cleaning the windows in the hallways.";
         : print "Try opening the door to Santa's bedroom.";
         : print "Try standing on your foot locker and taking the things from your bunk.";
         : print "Try giving the cookies to the various characters.";
         : print "Try talking to characters multiple times, especially Mrs Claus and Volodar before and after completing their chores.";
         : print "Try asking Volodar about the reindeer.";
         : print "Try using or playing with the various toys, e.g. wear the hand puppet, open the jack-in-the-box, hit the toy drum, fire the pop gun, fly the kite (indoors and outdoors).";
         : print "^n^Finally, for a bit of a giggle:\n- Take Santa's belt.\n- Extinguish the fire in the fireplace.\n- Cut or tear your jumper.\n- Open, close and use the toilet.\n- Take the toilet paper and used tissues.\n- Examine the blackboard.\n- Write or draw on the blackboard.\n- Examine and sit on the chairs in the classroom.\n- Climb the shelves in the pantry and toy storage.\n- Examine the mailbag and read the mail in the mailroom.\n- Ask Neldor about people in the Adventuron Telegram group.^m^";
      }
      : print "^c^[[Click, tap or press <Enter<12>> to restart]]";
      : win_game;
   }
}

######################################
#  Vocabulary
######################################
vocabulary {
   : experimental_replace text = "board game" with = "game";
   : experimental_replace text = "building blocks" with = "blocks";
   : experimental_replace text = "doll's house" with = "dollhouse";
   : experimental_replace text = "doll house" with = "dollhouse";
   : experimental_replace text = "dump truck" with = "truck";
   : experimental_replace text = "rag doll" with = "doll";
   : experimental_replace text = "rocking horse" with = "horse";
   : experimental_replace text = "tea set" with = "set";
   : experimental_replace text = "toy piano" with = "piano";
   // Verbs
   : verb / aliases = [about, credits, info]
   : verb / aliases = [apply, stick]
   : verb / aliases = [ascend]
   : verb / aliases = [ask, question]
   : verb / aliases = [attack, fight, kill, murder, punch, thump]
   : verb / aliases = [break, crack, crash, destroy, smash]
   : verb / aliases = [burst, perforate, pierce, poke, pop, prick, puncture, rupture]
   : verb / aliases = [clean, rub, scrub, wash, wipe]
   : verb / aliases = [climb, scale]
   : verb / aliases = [close, shut]
   : verb / aliases = [consult]
   : verb / aliases = [cut, chop, slice]
   : verb / aliases = [dance]
   : verb / aliases = [deflate, collapse, flatten, shrink, squash]
   : verb / aliases = [descend]
   : verb / aliases = [dig]
   : verb / aliases = [dismount]
   : verb / aliases = [drink, sip, swallow]
   : verb / aliases = [drop, discard]
   : verb / aliases = [eat, consume, taste]
   : verb / aliases = [empty]
   : verb / aliases = [enter, in]
   : verb / aliases = [examine, check, describe, inspect, watch, x]
   : verb / aliases = [exit, out]
   : verb / aliases = [extinguish, smother, unlight]
   : verb / aliases = [feed]
   : verb / aliases = [fill]
   : verb / aliases = [find]
   : verb / aliases = [fire, shoot]
   : verb / aliases = [fly]
   : verb / aliases = [get, carry, hold, pick, purloin, steal, take]
   : verb / aliases = [give, offer]
   : verb / aliases = [go, run, walk]
   : verb / aliases = [hint]
   : verb / aliases = [hit, bash, strike]
   : verb / aliases = [jump, hop, skip]
   : verb / aliases = [kick]
   : verb / aliases = [kiss, caress, embrace, hug]
   : verb / aliases = [light, burn]
   : verb / aliases = [listen, hear]
   : verb / aliases = [make, assemble, build, construct, create]
   : verb / aliases = [mount]
   : verb / aliases = [move, shift]
   : verb / aliases = [no, nah, nope]
   : verb / aliases = [open]
   : verb / aliases = [play]
   : verb / aliases = [pour]
   : verb / aliases = [pray, worship]
   : verb / aliases = [pull, drag]
   : verb / aliases = [push, force, heave, press, shove]
   : verb / aliases = [put, insert, place]
   : verb / aliases = [quit, q]
   : verb / aliases = [reach]
   : verb / aliases = [read, browse, scan]
   : verb / aliases = [remove, disrobe, doff, shed]
   : verb / aliases = [repair, fix, glue, mend]
   : verb / aliases = [restore, load]
   : verb / aliases = [say, utter]
   : verb / aliases = [scream, holler, shout, yell]
   : verb / aliases = [seal, cork]
   : verb / aliases = [show, display, present]
   : verb / aliases = [sing]
   : verb / aliases = [sleep, nap, snooze]
   : verb / aliases = [smell, sniff]
   : verb / aliases = [squeeze]
   : verb / aliases = [swim, dive]
   : verb / aliases = [talk, speak]
   : verb / aliases = [tear, rip, shred]
   : verb / aliases = [talk, speak]
   : verb / aliases = [think, ponder, wonder]
   : verb / aliases = [throw, chuck, toss]
   : verb / aliases = [touch, feel, fondle, grope]
   : verb / aliases = [turn, rotate, twist]
   : verb / aliases = [unseal, uncork]
   : verb / aliases = [use, utilise, utilize]
   : verb / aliases = [wake, arouse, awake, rouse]
   : verb / aliases = [wear, don]
   : verb / aliases = [write, draw]
   : verb / aliases = [xyzzy, abracadabra, plover, plugh, sesame, yoho]
   : verb / aliases = [yes, yeah, yep]

   // Adjectives
   : adjective / aliases = [assembly]
   : adjective / aliases = [broken]
   : adjective / aliases = [cardboard]
   : adjective / aliases = [christmas, xmas]
   : adjective / aliases = [cookie]
   : adjective / aliases = [dining]
   : adjective / aliases = [elves]
   : adjective / aliases = [fluffy]
   : adjective / aliases = [foot]
   : adjective / aliases = [hand]
   : adjective / aliases = [handful]
   : adjective / aliases = [jam]
   : adjective / aliases = [lounge]
   : adjective / aliases = [lump, chunk]
   : adjective / aliases = [mrs, missus, ms]
   : adjective / aliases = [plastic]
   : adjective / aliases = [rows]
   : adjective / aliases = [santas]
   : adjective / aliases = [skipping]
   : adjective / aliases = [storage]
   : adjective / aliases = [text]
   : adjective / aliases = [vegetable]
   : adjective / aliases = [waste]
   : adjective / aliases = [wine]
   : adjective / aliases = [wood, wooden]
   : adjective / aliases = [woodwork]

   // Nouns
   : noun / aliases = [afram]
   : noun / aliases = [area, factory]
   : noun / aliases = [arlayna]
   : noun / aliases = [arya, aria]
   : noun / aliases = [ball]
   : noun / aliases = [balloon]
   : noun / aliases = [bank]
   : noun / aliases = [barn]
   : noun / aliases = [basket]
   : noun / aliases = [bat]
   : noun / aliases = [bear]
   : noun / aliases = [blixem]
   : noun / aliases = [bank]
   : noun / aliases = [boat, sailing]
   : noun / aliases = [book]
   : noun / aliases = [bottle]
   : noun / aliases = [box]
   : noun / aliases = [brayern]
   : noun / aliases = [blocks, building]
   : noun / aliases = [bunk, bed, mattress]
   : noun / aliases = [bunkroom]
   : noun / aliases = [bunks, beds]
   : noun / aliases = [candle]
   : noun / aliases = [cannon]
   : noun / aliases = [carrots, carrot]
   : noun / aliases = [chair]
   : noun / aliases = [chris]
   : noun / aliases = [cindy]
   : noun / aliases = [classroom]
   : noun / aliases = [claus]
   : noun / aliases = [clay]
   : noun / aliases = [clown]
   : noun / aliases = [coal]
   : noun / aliases = [comet]
   : noun / aliases = [cookies, biscuits, bickies]
   : noun / aliases = [cork]
   : noun / aliases = [cotton]
   : noun / aliases = [craft, craftwork]
   : noun / aliases = [cupid]
   : noun / aliases = [cylinder]
   : noun / aliases = [dancer]
   : noun / aliases = [dasher]
   : noun / aliases = [decoration, bauble, tinsel]
   : noun / aliases = [decorations, baubles]
   : noun / aliases = [doll, rag]
   : noun / aliases = [dollhouse, doll-house, house]
   : noun / aliases = [door, entrance, entry]
   : noun / aliases = [dowel]
   : noun / aliases = [drum]
   : noun / aliases = [dump-truck, dumptruck, truck]
   : noun / aliases = [dump]
   : noun / aliases = [dunder]
   : noun / aliases = [fabric]
   : noun / aliases = [fireplace, fire, flame]
   : noun / aliases = [floor, ground]
   : noun / aliases = [game]
   : noun / aliases = [garden]
   : noun / aliases = [garry]
   : noun / aliases = [gingerbread]
   : noun / aliases = [glue]
   : noun / aliases = [gun]
   : noun / aliases = [hallway, hall]
   : noun / aliases = [hay]
   : noun / aliases = [haystack, stack]
   : noun / aliases = [horse, rocking]
   : noun / aliases = [ice, skate, skates]
   : noun / aliases = [jacks]
   : noun / aliases = [jandor]
   : noun / aliases = [jennifer, jenny]
   : noun / aliases = [jigsaw, puzzle]
   : noun / aliases = [jimmy, jim]
   : noun / aliases = [jumper]
   : noun / aliases = [kitchen]
   : noun / aliases = [kite]
   : noun / aliases = [ladder]
   : noun / aliases = [li]
   : noun / aliases = [liluth]
   : noun / aliases = [linen]
   : noun / aliases = [list]
   : noun / aliases = [locker]
   : noun / aliases = [loft, hayloft]
   : noun / aliases = [lounge]
   : noun / aliases = [mail, letters]
   : noun / aliases = [mantelpiece, mantel]
   : noun / aliases = [marble, marbles]
   : noun / aliases = [me, self, myself, eldrid]
   : noun / aliases = [metal, metals]
   : noun / aliases = [metalwork]
   : noun / aliases = [mine]
   : noun / aliases = [mould]
   : noun / aliases = [needle]
   : noun / aliases = [neldor]
   : noun / aliases = [oliver]
   : noun / aliases = [paint]
   : noun / aliases = [pantry, stock]
   : noun / aliases = [paper]
   : noun / aliases = [piano]
   : noun / aliases = [plaques, plaque]
   : noun / aliases = [pole]
   : noun / aliases = [gun]
   : noun / aliases = [prancer]
   : noun / aliases = [presents]
   : noun / aliases = [puppet]
   : noun / aliases = [reindeer]
   : noun / aliases = [robot]
   : noun / aliases = [rod]
   : noun / aliases = [roof, ceiling]
   : noun / aliases = [room]
   : noun / aliases = [rope, skipping]
   : noun / aliases = [rubber]
   : noun / aliases = [samantha, sam]
   : noun / aliases = [santa]
   : noun / aliases = [shelves, shelf]
   : noun / aliases = [skates, skate, ice]
   : noun / aliases = [sled]
   : noun / aliases = [sleigh]
   : noun / aliases = [snow]
   : noun / aliases = [soldiers]
   : noun / aliases = [spring]
   : noun / aliases = [stable]
   : noun / aliases = [stairs, stair, steps, step, stairway]
   : noun / aliases = [stalls, stall]
   : noun / aliases = [string]
   : noun / aliases = [strip]
   : noun / aliases = [supplies]
   : noun / aliases = [table, tables]
   : noun / aliases = [set, tea]
   : noun / aliases = [telescope]
   : noun / aliases = [tin]
   : noun / aliases = [tissues, tissue]
   : noun / aliases = [toilet, lavatory]
   : noun / aliases = [tool, machine, hammer, nail, saw, screw, screwdriver]
   : noun / aliases = [tools, machines, hammers, nails, saws, screws, screwdrivers]
   : noun / aliases = [top, spinning]
   : noun / aliases = [toy, aeroplane, airplane, car, plane, wheel]
   : noun / aliases = [toys, aeroplanes, airplanes, cars, planes, wheels]
   : noun / aliases = [train]
   : noun / aliases = [tree]
   : noun / aliases = [tricycle]
   : noun / aliases = [trumpet]
   : noun / aliases = [tube]
   : noun / aliases = [twine]
   : noun / aliases = [utensil, accoutrement, bowl, dish, jar, jug, pan, plate, pot]
   : noun / aliases = [utensils, accoutrements, bowls, dishes, jars, jugs, pans, plates, pots]
   : noun / aliases = [vixen]
   : noun / aliases = [volodar]
   : noun / aliases = [wagon]
   : noun / aliases = [wall]
   : noun / aliases = [walls]
   : noun / aliases = [window]
   : noun / aliases = [workshop]
   : noun / aliases = [xylophone]
   : noun / aliases = [yoyo]
   : noun / aliases = [xyzzy, abracadabra, plover, plugh, sesame, yoho]

   // Prepositions
   : preposition / aliases = [about]
   : preposition / aliases = [for]
   : preposition / aliases = [in, into, inside]
   : preposition / aliases = [to]
   : preposition / aliases = [off]
   : preposition / aliases = [on, onto]
   : preposition / aliases = [out]
   : preposition / aliases = [with]
}

######################################
#  Subroutines
######################################
subroutines {
   refresh : subroutine {
      : set_true "is_refresh";
      : redescribe;
   }
   version : subroutine {
      : print {("^n^" + sys(9000) + "\nVersion " + sys(9070) + "\n" + sys(9120) + "\nCompiled with Adventuron version " + sys(8000) + "^m^")}
      : return;
   }
   test_parser : subroutine {
      : match "_ _" {
         : mask {
            : print {("^n^verb = " + original "verb")}
            : print {("^n^preposition1 = " + original "preposition1")}
            : print {("^n^noun1 = " + original "noun1")}
            : print {("^n^preposition2 = " + original "preposition2")}
            : print {("^n^noun2 = " + original "noun2")}
            : print {("^n^s1 = " + s1())}
            : print {("^n^s2 = " + s2() + "^m^")}
         }
      }
   }
   test_scope : subroutine {
      : match "_ _" {
         : mask {
            : print {("^n^Scope of " + s1() + ":")}
            : if (is_exists (s1())) {
               : print "^n^exists";
            }
            : if (is_present (s1())) {
               : print "^n^present";
            }
            : if (is_beside (s1())) {
               : print "^n^beside";
            }
            : if (is_carried (s1())) {
               : print "^n^carried";
            }
            : if (is_holding (s1())) {
               : print "^n^holding";
            }
            : if (is_worn (s1())) {
               : print "^n^worn";
            }
            : print "^m^";
         }
      }
   }
}

######################################
#  Themes
######################################
themes {
   my_theme : theme {
      colors {
         exit_list_header_pen = 10
         exit_list_item_pen = 15
         exit_list_punctuation_pen = 15
         inventory_header_pen = 15
         pen = 15
         prompt_pen = 15
         response_pen = 15
         status_bar_paper = #050
         status_bar_pen = 15
         textbox_pen = 5
         yousee_header_pen = 10
         yousee_item_pen = 15
         yousee_item_punctuation_pen = 15
      }
      lister_exits {
         exit_list_capitalization = lower
         exit_list_style = concise
         experimental_enable_direction_arrows = false
         is_list_enter = false
         is_list_exit = false
         is_show_blocked_exits = false
      }
      lister_inventory {
         item_capitalization = original
         list_type = list
      }
      lister_objects {
         item_capitalization = original
         list_type = single_line
      }
      screen {
         content_width = 320
         snap_mode = free
         status_bar_padding_bottom = 2
         status_bar_padding_horz = 4
         status_bar_padding_top = 2
         // widescreen_horz_ratio = 1
      }
      status_bar {
         : header_text visible_if_dark = "true";
         : dynamic_text "header_score";
      }
      system_messages {
         all_treasures_found_win_game = Congratulations, you found all the treasures. You have won!
         already_in_container = {uc_def_noun1_phrase} {is_or_are} already in {def_noun2_phrase}.
         ask_new_game = Would you like to start a new game?
         ask_quit = Do you wish to quit the game?
         be_more_specific = Please be more specific.\s
         cannot_carry_any_more = You can't carry any more.
         cant_see_one_of_those = You can't see one of those.
         cant_take = You can't {verb_phrase} {def_noun1_phrase}.
         dont_have_one_of_those = You don't have one of those.
         exit_list_additional_exits_are_located_verbose = Additional exits are located\s
         exit_list_end_text = .
         exit_list_end_text_verbose = .
         exit_list_from_here_you_can_go_verbose = You can go\s
         exit_list_header_concise = Exits:\s
         exit_list_last_sep_verbose = and\s
         exit_list_sep_verbose = ,\s
         exit_list_there_are_no_obvious_exits = There are no obvious exits.
         exit_list_to_the_verbose = to the
         exit_list_you_can_also_go_verbose = You can also go\s
         i_cant_do_that = Not right now.
         inventory_list_empty = nothing
         inventory_list_end_text = .
         inventory_list_final_separator = \sand\s
         inventory_list_header = You're carrying:
         inventory_list_header_verbose = You're carrying\s
         inventory_list_separator = ,\s
         it_is_dark = It's dark. You can't see a thing.
         must_remove_first = Try removing {def_noun1_phrase} first.
         not_carried = You can't {verb_phrase} something you're not carrying.
         not_present = {uc_def_noun1_phrase} {is_or_are} not here.
         nothing_to_get = You look around but can't see any ${noun} anywhere.
         object_list_empty = nothing
         object_list_end_text = .
         object_list_final_separator = \sand\s
         object_list_header = You see:\s
         object_list_header_verbose = You see\s
         object_list_separator = ,\s
         ok = Okay.
         on_drop = You {verb_phrase} {def_noun1_phrase}.
         on_get = You {verb_phrase} {def_noun1_phrase}.
         on_put = You {verb_phrase} {def_noun1_phrase} in {def_noun2_phrase}.
         on_put_non_container = {uc_def_noun1_phrase} {is_or_are} not a container.
         on_put_non_surface = {uc_def_noun1_phrase} {is_or_are} not a surface.
         on_remove = You {verb_phrase} {def_noun1_phrase}.
         on_wear = You {verb_phrase} {def_noun1_phrase}.
         post_quit = You have quit the game.
         prior_prompt = What now?
         prompt = >>
         question_prompt_char = ?
         there_is_nothing_you_can = There is nothing you can {verb_phrase} at the moment.
         treasure_suffix =
         unknown_noun = This game does not require use of the word '${noun}'.
         unknown_verb = This game does not require use of the word '${verb}'.
         worn_suffix = \s(worn)
         you_already_wear = You're already wearing {def_noun1_phrase}.
         you_are_already_carrying = You already have {def_noun1_phrase}.
         you_are_not_holding = You're not holding {def_noun1_phrase}.
         you_cant_go_that_direction = You can't go that way.
         you_cant_wear = You can't {verb_phrase} {that_or_those}.
         you_dont_wear = You're not wearing {that_or_those}.
         you_see_nothing_special = You see nothing special.
      }
      theme_settings {
         capitalization = original
         failure_jingle = on
         font = userfont_germaniaone
         header_capitalization = original
         layout_dynamic -> ("SB " +
            (is_mobile() ? "G-" : "G LOCK") +
            " D"+
            (is_dark ? "" : " X O")
         )
         success_jingle = on
         wingame_jingle = on
      }
   }
}

######################################
#  Assets
######################################
assets {
   fonts {
      userfont_germaniaone : ttf {
         filepath = "https://fonts.gstatic.com/s/germaniaone/v8/Fh4yPjrqIyv2ucM2qzBjeS3uywhP.woff2"
         snap_vert = "false"
         horz_pixels = "8"
         vert_pixels = "14"
         experimental_line_height_ratio = 1.2
         }
   }
   graphics {
      title : base64_png "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";
      room01 : base64_png "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";
      room02 : base64_png "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";
      room03 : base64_png "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";
      room04 : base64_png "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";
      room05 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgBAMAAACeZbYbAAAAA3NCSVQICAjb4U/gAAAAHlBMVEWZ/5n/zP/MoG3MmTOZZjOJZT1HXkxgLwdQJg0AAAAJI2kKAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xMi8yMOC3dW4AAAHUSURBVHic7doxboMwFAZgVkZGVksMHKFH6AEYegEkThBxg47AAPVt62cTqwSM4qq4v5T/DQ5y8swn4j9WpWaFVCaFeQVAIJDA/ya8JLDUwQIB3kLVE0gggSuwP4owFPDrc1dYwPf9A3wjkEACCSSQQAIJJJBAAgkkkEACCSSQQAJTAUut41Y2DSmB5aSUjlnZNyQCmtupZohY2TcQ6L4wcztVfTy/cu4bCCTwNYDwKcYHwp8khcxFrXxvSAWczJbff+qkDhouB6qYOmggEB4IvwfNRV6NZi6vBvnpMdcyM8gqMrN5d9Pg3r7yqBvtE4gBbhquB9banQvPA0vVjAmBqtbgQHNwQQPl7I/bg2mBhRMOuEDzd7gR1gMwUFmhBgY2IlQaGDhouxGBgVk+uWcIC8xyuxFHXOAq1L8E7m/zTIWBmwkTEqnKRWW9Pht9gx+z4D97nlUfBm4+pppFXqrFRWWx17eT0Tf4MRHw1ouwXnCB5ru3woTAwNYMAVehBgauUYkFHt3nz+oxlNM9zBEpbi+sTjWzvFT3sbNRmX/MPIyPDW2bFth2biPiAp1QaWDgGhVg4OyiMuMCz6KCATyJCggwHBUYYCgqOMBAVICAx1HZN3wDaXsYI1Uh/iYAAAAASUVORK5CYII=";
      room06 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgBAMAAACeZbYbAAAAA3NCSVQICAjb4U/gAAAAJFBMVEWZ/5n/zP933Xfdqt3MmTOXmZiZZjNHXkxgLwdQJg0QLUsAAABc6d8sAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xMi8yMOC3dW4AAAJ4SURBVHic7ds9boMwFAfw9AbtFZKlEmOXSD2HFzhIhx4gSJyg6sxClghKi/IuV9vYgMtHSm2HfyreEibnJxsTv8fLZrvdPYnYimiudvpCfJ42PO4eeNxf/2qDDwyIwIFxJYjQwDimAhwYJ5RjAwURHMjXOXcApNE4WQP5JBbWwGawXlgBqdJEUOD5qIlEmMAsa4k5JrAl8kcOJrBLtAEObeHKDVAQ1ToXFsC3Xrw7A2ZH/gX1JBZ/BX72J/DDKfBcL7T4aQEF6oXmjxxQYJaRIsICOVEecoCBcp1hgOUAkE8iEDAcAh5X4H8ERivQDph2gREosLwVYIoIZKhApkwSGCICBYqFrAtkUEAWpkwELlBF1K43MJALGUuRgHKUsgVqLAxQZcMigIE65JDIwFaJDFSrvgLn7GJSmwQRaNZmWiwmEPFEvQJXIA4QNO28USDQYcEAIubFtwNErSyYQMC8eBCIdKJuVhU2LzZqM3VeDJV2mrUZWQfJoJKmH0CWpWBZnVk8AsyLJTA1KwsR0pFfrGqnNhOJQSukpMkoHpFur0AERkbamcC8jlXAztzJ6kcO80K7lDoyJo+QehbKyCwpkE3Xh5fSR2VOnlVjj+fiEVm3RvkE8smz737zByQ3/YOegInqkgEFkqsmWy9AfeeBAts7DxPouJd/AeC+/30TMQ6cNUwTvwCS+SC/EOPAWcM0cRlI80a+OjCZOfK1gcnckUduNl/AoIqhgY9i0MO8bec4poHyEEsvS8YkUPpeF/VNAhPp+4IFPsvMfWHfBFD6Dkv7xoH7avkNMglE2CBTwPoPB19L80aBCYpvBBhgbBARg8AAZIOI+AY43TkMvatV2QAAAABJRU5ErkJggg==";
      room07 : base64_png "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";
      room08 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgCAMAAABblVsaAAAAA3NCSVQICAjb4U/gAAAATlBMVEX////t7e3l5+nk5OTN5MjQ0dPDxMnFvL25u8ilwbyVvOXKr5qpq6p/p6aNo5mrnH2piF2ZiWdjhImNc1BmZmZOYmNeTj8dWXU2SkkAAABae4pIAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xNC8yMMXcKrIAAAPdSURBVHic7dqHctswDAbgtI0a151O0tR4/xctJWvRAsABDtHCf5e7nJbNzyCp9fRLFnhuPfBNlKc2ACE83oc+BuBnIu/UCgW0W6mAsiigMD3g+yYjILpCAe1WYsX2vvrbrFBAu5UKKIsCCqOAwiigMAoojAIKo4DCKKAwCijMUQEDb80xBzoioJH7c4vc8ICAs95kqIBBgDbfQKiAAYBbP5ng0QAxP5HgwQBxP4mgAu4dsD/b2g0g5ScQzAwI8NUkijADIO0XL5gXEHq8HjFCUAEHwEEOmgV0X+9lBZzhYgTTA3J+hCC8vLwEAvYPfxfA26PgaEBoH9D1SlBWwDkNA04VqIBxgHPteQOmHAPbBrTf6WMBs78b0yCgIfuxhAdEs6m+KccB/LJEAcMBAT4t4WdhBcTHwKcldKPLvCO9D8DAKxGrAn0bHRgndtOA1hiYCfByGZy+UxkZ2wS0ZuFsgENmRaQIl6XVAcPuB0aNW5GAluL4kdOp4wIZxlj9jnSRMfByl7no0GIMKsdjAMKG0Fak42Ss/lSuBOAzvAKOeOFn53WKAgY8Fy4E2AdHhN9eKQw4Co4/HuNXZBIZAXHEnQLe3o2Bv32G/wq9B0d8mdd1bMS9At5q6waYsbb8YgPaiHUB3/wHYSYVABfEmoCG7w3N3fSBbzTloxbgiFgNEOdbTx5TeMVqFbjUoU9SA6J8WztLcZ+AP72SGJDgc/yIKCFU7cKVAPGxz+VnBBWQ5ouswI/DAVJ8N8LgMRA+YgGtozcDyPFNhkGzcCSgOeq/dXjD3QA6+daKXueBxi8C8E5vMtw9oHOSiEhKQPrCfC+AxI1SQSIBz0gXPp8V0B/QxCrk87BEAUMAt1FABVRABVRABUwPaE4cFdAtSL6eOVz5KaATkHvAdb1ShAroCUgJKqAvIEGogP6AqOAjAEYEBWRyvVKEjwDYTTl1myCLzEIckNl3RfhwgIC2OAVgd1oTEkX4SIA4FrbQE9CnCJsH7FIBAgZo7Y4WYfOAfA+mALeCxg/f31GExwQ0o+A0G0/zLLPtWn5ThK0DnuAkCYTuvinC1gGBKBXX0qCNT0wRPhBgkJRgsX1afVhACewsaPpx64DRIsGwaDc2RVgMsIu5ZnUmgxSxOdmN/SIGxM9T735ZQbuTAXp+wCL41ydSwI7gC+dIBygVhHKAHVV+JfySrkCKsABg8NlqKxmKMDsg2Xvp4Y8ugVJrfHeB7IB072W+ZH1Abs3dSJgXkOZL7VdtJ9l5DA9I997IVhUETL4KJ+QAmd7LDH8ZGpWBybeHW8EIGUCGL7a1ZQGjDxlC+B/OjMfMExWITgAAAABJRU5ErkJggg==";
      room09 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgBAMAAACeZbYbAAAAA3NCSVQICAjb4U/gAAAAIVBMVEXt1ZfQpjrMoG3MmTOMjDSZZjOJZT1iYiRgLwdQJg0AAACjgH6TAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xMi8yMOC3dW4AAAOcSURBVHic7do7buMwEAZg1uoMpNoqUOEiR9guACsfYQ+whS9AQCcIfIPtBEFYeeeUO8OXKMsOLIqK/iIEYtCGbX0ZcviSlcIqVNd0bJWq/APtDbopFfuqBEhmb9G0VF1dxeApouOABWTfWxuDR6ZBA1qfA0rw4ICSIMq3bgMIFN9ZOeCwEljRw5LtkwTuigE/HpVLtk8SeA7M/IfLA10Cz4C542BxIPteWzUF0opxsDiQ4yeNmQIJqQ+GBPZAcsFbB7zcS+FMIPuqLgKjbSXw359ZyQTyAFO1HsgDWFMI+GsewJ9ZwCSBu3NqAwE6XwAaOCD76pjAE+CamakgsEsTOAWSafNwZYHTBPZAP8wgANn31t4A4zADAKzqJIHtQ5MMM/sD0xlYHqrpMLM78CaBiYbpMLM30PpaFYPHNiwg++z+SIA+eFBASWAKwMHAAdn32la4QB5gXknhAn0C4wLZF1b3kEBZ4odDhBtgM35dvm8tUBK4ux/BVaxSQEmQdg7kL5AI7g+UGZjUBOhsrol3B/oEDsBqtIEA0xUCb4EHY7CAdok6AgezO5DsiiX1/YUChoj5D8oMF1IXAsii+niOz7pwmwEUaBMEC8ikuv7duieyx1TAQN8dYYGyx5ysEMCAMsPF+U2mD/mEPURwVV/avYA2gccj3mTpJ9UyrBxgzGLZwylgoCRwiwj0qftWj6eUYMBKOj53wDR1sYCcIyS3QXKB88s8Ux4DZy8yUBI4GVC4ugD48JbMZ+XyGDh7qwVeLscrP+nO8gpX0YCX6wRIk5M2ACBdPwLQNnGv9YmrOMDrRwQ2Hqi7syZ3R25vIL+eAN0pvgNyHEO+fAKcX+aZsiCLu6NrV1v3Hc9WBUg9/9GqWyJ3y5JNU3dMt+hJZtBp/GRhXxmg2fB3WWWAZdam38Bv4FPAm2EGEuimD/+jOzjg0IT5TY/zGxiQKM5vmMDBUB8nYEygaTyw13Y9iAc0ESjrQUygXb5IvvDbIYHpnaQWElh86bcOSGHBCgvsNQOly4ECh8YDT9nA+WWeKc/uSXh0DkDKBG67q5MbXR7YEzpQEzpQ05cCH3TNz4AaFUhrgPeuU644oOkjcPkhgt60nByw6cMKQS+egbcFSuYy0CRBXehThw3LCwsHC1wati+KoAhPtieuAG4avwMD6/r3KuCm8Xs/IAPf3wUJDNQHbuEDMlC/cCP/kFN+VKA0sgUOoED9crDDTH/KB/4Hnw/mz8kxKcUAAAAASUVORK5CYII=";
      room10 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgBAMAAACeZbYbAAAAA3NCSVQICAjb4U/gAAAAG1BMVEXt1ZfNuoLQpjqXmZiMjDRgLwdQJg0QLUsAAAByzk29AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xMi8yMOC3dW4AAAJYSURBVHic7du9TsMwEMDxvgIDUueKN8iA5ypDVyQs+Ql4AQ/pSNVW3GMTOx92nCYBicr/ipwYOjD8uMu5uUvYPC3H5yZn8IFbETjw47pAzA/UWk5woDYzRATQEeHA6TpjgFN1JgDlqqfrTAB+HTvijSMHAayqQEzrDAEGYnopYoAxEQp0xHGdUcDqWOOSOuOAX02h+zrzgF2h2yMHCKwqaYlYYE30NzlgoK8zGlgnkQM83wQeV+DPga8r8K+A6pGACgi0KuqYFfgLYHEDaFHANoWFCulkAYsxsGABvcp6YIEEOqItGqDXWhzQh+q1BQkoLs4xsPmMAbbTsAswsAvvJAODkgxsq74CfwiUEEzgcDcTsEwg8Y56Bf5TIOibZAXeBUiaSWaAW8kaI2Aydopc9cx39f1jCeh+hwA8PwzQJnMxBvj6UMBmcLcdkNDFPbAdO+sPzdCk9ZsQzsEU2I+d9d+AOKi7dYwFDu4mAtp4s6AYt/wi/frN9qsP5S5PyLM6bUbLI5H+YOEB1WDsNIDHsQNglDt//p0AD7QDUAZDuwlv+CCAarhSEM5bHw1wUFqTvB6VGSjJ8khgr0bJYLuVJg8AjNdv4+SRgDeTxwFOJA8CnE4eAjiXPAJwOejA58wzyWJI5qlu0Zd77FwIk30uXvBd2cCtw4GBz872Du5ifxMrZc6YBXrfIatvFug3R4dLWe4yxgzQN4hxvhdkBr3vvfbtX8o9MIO+gV2D7Hfuh5fBrkEcLqNvEtj8w8HF44jXoNGhQfY5fRPAuEGyFngCuI0aJG+By/IbVE2FvnR1hzEAAAAASUVORK5CYII=";
      room11 : base64_png "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";
      room12 : base64_png "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";
      room13 : base64_png "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";
      room14 : base64_png "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";
      room15 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgBAMAAACeZbYbAAAAA3NCSVQICAjb4U/gAAAAGFBMVEXO5+r137TMmTNhjqGZZjNgLwdQJg0AAAAO0l3IAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xMi8yMOC3dW4AAADCSURBVHic7dexDcJADEDRW4GKERiAghGYIMoGGQHWR6KhuJhE/idhov8GsL8sXXHtVFz7dcAWAykDqYMGnp+hwX3ZwCkyD+4zEDOQSgfOa0+4VOBj6dQKvPcHvBi4l4EfBlIGUgZSBlIGUgZSBlIGUgZSBlIGUgZSBlIGUgZSBlIGUgZSBlL1A/s1e8SBuXmxds24xYGpeV8YSBlIGUgZSBlIGUgZSBlIGUgZSBlI5QP7vvd3eXDfHwSu7amkSZJ0bC+BBm2Ge14pEQAAAABJRU5ErkJggg==";
      room16 : base64_png "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";
      room17 : base64_png "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";
      room18 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgBAMAAACeZbYbAAAAA3NCSVQICAjb4U/gAAAAJFBMVEXO5+r137Tnv5vMmTOXmZhhjqGZZjM+ZHVgLwdQJg0QLUsAAADMoZhwAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xMi8yMOC3dW4AAAIqSURBVHic7do9bsIwGMZxdqZeoUsvkimeew+2DL0AEieoumYKSz9oi/DlapuY2HE+cImaf1Q/EhKT89P74sivxep+PG93M2a1BKCkA49ymDg/cLuV73DgdjdARAA1EQ7s73MUUPYmaplOYF+fo1a+LBbkJqA8WiIUeNpbYscrBwGsqobY7jME2BDbP0UM0CXeAuzawsdpgJoY9jka+BzkZTJgtVcPaPU5FvgVFvBjUuDp3OhLn3lA2+j6lQMEVpWsiVigIppDDhho+owBHjqAqoh04D4BrwfmiwGKBJwQKIDAUjg7JgF/AcwcYEkCZi4wJwLzqswy9cECbURTzowLzLKcDjQtBwHNKgcXeP6OAdbTsA4YaGOWJAMbJRlYdz0BrwQ6azGB/t1Mg2UCiSfqBExADhA6di4UCDoseEDi2LkcYOlMdXggauz0gMSx03b1PDTlSwI+hI8bSj8wbh2b1t1MWY+d9rse9IrPx4j0A6OWuaQHaG5qNLBQIQGDwZ0DzE39XKDQR34O0LubEXpRPewxgdL+vYIIFN7YuZMwoFM7c/vxXZCA0hva1RuwqIMACv9KwRaPADRt9VrrFA8AVBb/8sgrHgBYeMB28WDAsHgkYGfxOMCe4kGA/cVjAAeKxwCOJQETMAEnBoY+cyD5v8BN1wP/LFcA5WrWjPrW8/pGgetXNvBpbt8IcDO7bwQ48wYZBc69QXTYP8DVIBDhGwACNogOeoOo/ACn9fcU891dgwAAAABJRU5ErkJggg==";
      room19 : base64_png "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";
      room21 : base64_png "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";
      room22 : base64_png "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";
      room23 : base64_png "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";
      room24 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgBAMAAACeZbYbAAAAA3NCSVQICAjb4U/gAAAAG1BMVEXq7eTgqlPHn2G6mW6ZmcxpRSQqNVI8IgsAAACXuq0kAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xOS8yMDe28m8AAANOSURBVHic7do5b9swFABgFlKArloKzl7MUYAWjxr8A7oEyJrF6NwpKxW01c8udVrH4+NhXm7FoSj8EPrL482QXLFSk7G8vLov36fKc4xAtHxZ5aOUOkIMSPz6qmr+Ajugd989hZhC7SO+fIsU5ubAWp7A1rp8mqdQGkESyAvbIgdKUygDIgn0ApQnytznFJiphJLP0RHiDlgR5VwDf4wm0CWwqx7vhiCwRhPocBT3QHxBgYALH7yKvhXF7Z0CGRKf8QIOfBM/YbMoQ0C0fbtyEcDbDyPg7SaAkurQ+RoAKn3Ogdh0uAcSPaBNE6uBAAfpgLL6OuB7QaFR0APhwG858N7G+xTugEQPKByn08/Tef0PwwNyYGYBLOW7LPfAeytrA6uwwFmoAk5dMBsm0UDAspr7oS6wigXcdkIJMAsLrIyBaFW+gKU+UHEMfrME4sfkl1eoE4KjGM+fpwyW40hWA9WnTF/AXpgssC/7TggAd7vKgMAydeDlCYCqPljnUYF18sD86YHXuMDrPwC8/lLeLntZi4eadxoAGDeDB/AAHsADeAAPoHeg1lpsdT8Yci12esPqo4md3lH/n8DUm9jtJboHYJeoZjubcIoHAgM53Tg+ihYPBAayolk7OGV4IDBQfO/KIVwMD4QGsqJdOBin01InC4QGntriz93BaTOvxZKAI6DBuZjTxXagWWwW4ED4c3E3HEaHIC2AcCB4E4/ffp5FDA9EALJpUuZ0vR8EAxGA53FS/hhGBcMDMYDjpMzpdkcNBWIAh0lZaHZbfiAQBdgTpqWD4YEowK4R58WX4YE4QDEM5u0LwwNxgGIi4Q0E7HaBTQpAVkyT8gbIeBvvXLxMVFtoZjD8WvwUfTD1UZz8PJj6SpL8Wpz6bib5/WCMHXWd+JmkNnmzYHiqcwI0eVQR5VxMiPZabHyz4GQtNsigj7uZXAWs9YFebrd0XmCGuh+EXtldlO8HiT7wsRvWEnxMXqpeHtUGQHraOhjFA3vf9rmn6nFZ//7yU94CY8UPXKKTqXKgVNADQrLz9Wkvl7/b9r/kq/WfIcqdalUyHFgDPwFXaf2HHNw3lFwK1Pnpx4CKBI5FBqz1gV8sm1izeglQ3ydSaDVI9BK4buS/x+Rwa7oTZDUAAAAASUVORK5CYII=";
      room25 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgCAMAAABblVsaAAAAA3NCSVQICAjb4U/gAAAAXVBMVEXu6Pb/y5nwuqbgnJD4iiTxdB7WZyThYCjZYhy0ZGXTYiLQWhe5Sxf/MwAAZ2rMMwAAZgCZNABERESeLCGSLRaLKxB9Ix57ICozMzNfKBd+IAwiIiJnAAEzAAAAAACvQXt+AAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xOS8yMDe28m8AAAdXSURBVHic7dyJeto4EABgN95ATKChC2WzpJn3f8xah6WZ0eVDtuWE+fql2A7F/Ixm5INWsBMBl8sF9m2oxWhAG3sTsBfL/5cTEAv6W3L37Ttp45AO+SzBpRar4YAUETrEFc1I9OA7WDz9Lg798PIBakS8F4UYJvkO7LPvnXrZAVUe4nFQwGBO+eHy0+EN0MsNqJ+FCsnKiRjn22M+DWgp1gRkO7YaYoyP6+nBUwbgjvfmfXgorRZ253TLKAtwt+vaiha8rBiAXx5ArUIfrZeiAECciCsDkiFgAOlspUhAg7g6oH2sAQFYvy0WsENcMUgG6scpirIAd3BbM4B2MbEmSfEAJICohjwAxwHiMfwAHAGIFh6Ag8Mpgg/AoYB0Lv0AHAFIUvABOBwQLWwS0EzBVhJkc+vNAcIPGS7h+OOLRLwCAaRFcGuAms9HCL9/A3zmj1fggNvNQMCALSEHfH4Wbymvn/hcGCBZ2BYgpABF5DR8hVcKqKbPaGFLgCAHbkjQAGY0bP1cwNQYLhlQ8IEqgCB/BACf8wzmtoF4AfEpwo0AthrCT/NJQvEnApghEQXfV8hAsZdvb2+sAEaHMDbMDMiLoFsFywJUeDqAV8FEBkrB/ICJPlwUINJThC1aJXLRnU+vAujrwyUBgk48gC4TW7qqqsAk4jqA0SpYECAovrMKLViJ0Lu+BuCNXRosHNDwCcEzB8TzmAUB4324JEDMJwTBCCpF8r5mAQTwAtoFt42UBHjmIZOysoQzAwIcvxigqIQIsKJDuM3YrIBwPAYAY2OYUXhOkKViQcCKNBF4eZE7kAdQ8B1fXUB+NMfbCAf8xxPwXyTyAXr8xCh2ANUlbgkoAxDjJMB2DLtNJJWCxQB6848DCkE5K9RD+MWGUpwACL6TCawIggDbFuCZA+oZtWoiUo0qjgf0T2NcQCpYCqB3AIMzhitzlcR2YcCME1IwAIgFewCu1EQCBVD9JIA/HEDEOBtguAg605j7/eALulo+637PN43xAypBPJe2l+kCp7NmArwE+zAFHJeAMwMaQdBnaMKAMxzK+TIwAjiqBGYA9PtpwE7QAsJyx8KkCIIi2xyg7iRgThIueDLBB4gFywY0gmc5crpzhLfvAgh9JPsBqiV1xvBWMOC4LuICCjqAp56AQT8mqABvSwNG28hME+nWDp7a6PPV65ifJwVXAgxNZGYDVDEZ0E3B75KBMnYU0OsZmgMWBmhrIK2Ccx0Lg+QDRjUCEAtav2UBjWAPwExNRAA6fP4RnQI8d7+gXu5WNmCuY+En4AUw2FOSgEJO/KBvaXHAQBWcB1C14H6CvqxmgPos9LqAF38fnmMIQ9eDiVcQUO7OHxLM0FfXFwWM9OEZmojh8wiGAP84gQ3LALQ1EFfB/IDYj4hJQFdQZaAI1/A7Aj5RQC7oEtpjYTs8GOG3AmR+SNAcnVBD37GwhZSERQDSb2sawewnE7ifASSlEedl5FBOvoAG5K+7KKBOwTTgqAREgK5fJ8iGtiVMHAubbDyxkCsXBfT24byAvABaQHeLPWkY9WvTz7FDitkAg9eFLeDFNxXMC+jzU1SeLdAP8BzLQJ2DKC1GAx4B3O+J0CLoS8EVAbVgjyO5jzbe+d6/v//bhnqM7k0YDyhuzvLcXISLID8TnaOJ9ACMp2BfQDck4AuNCbd2HL23t4UAuzaS91h4GKASTAKeewJOG8Li7qJiARvwAwrBtF8c0Mb0LgzxIbx3r6hnvzPBx9Q0TSQF02ezlGAIMO80Jgzonci4gPnngU0TBlRDGNJ9eDHAYBcOTmRyA9Z1wM8FrGuwB4DxC0ulAHpSMD9gjQybBgHWFLfGgHv3Ww5MsAfg55Qe0gfQc2fgPICKqq4bDlgj31oL4u/K+RTlygTg58QOrAT9t/iSFDwwQQI4ooO4TaTGIfVMpuEtyk9uwYA/2+Av0O55ugtPo0OEAwH3+D+hHZF+zjURCmjCFbRbOOBPmZY/1UO15zHAPHSGcNuAOgVla8bJ2G8eOHvYw2E0hpcBVMXOs76tj/i7cobtqh5dZUQBr8uF8NKPEOmqgLLDdCF2zLCVCujPS3NZZ3AMAmx8fq0g2kWjVirgxZlLo89fxv3uI+p7YT0EWAM00HDBhgsCUisS0E3BPf78M2Sgg9QBXkHPaSKAJO3Qw1MQ8LQkICqCdgUBHDeNFoBddFPnEGDj8bOCCI0Bnk6u3+m0OiBbM6aLyKi6d9rwsFYdrg+wcbOODWEF2DF2SwsP4SsdsGoNXjUCUD1RAzYuIAqycSigGsIUcPEaeJVg7ir7cBrgAD93q3x9VgJLayJqZ2Lbhod6ogIc8XT6D/EEtICnAOBpecBZosryNoCcSKCA8NGNW/TXA5CEUPtlQp9XUFs+PgKAKwzhWSIHIMIzfh3gO4B/CL+7NX2TkQGQ+XWAWhB+iQvpNFAN3nzkBgQlaJpLuxGcHjX5JQuK/IAiCfVPVRm/lJcTcwCyeAAmIgH4tf2yAJoBS2Yz3wTwL3WuXYQpdVazAAAAAElFTkSuQmCC";
      room26 : base64_png "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";
      room27 : base64_png "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";
      room28 : base64_png "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";
      room29 : base64_png "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";
      room30 : base64_png "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";
      room31 : base64_png "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";
      room32 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAUAAAABgAgMAAAARJUO7AAAAA3NCSVQICAjb4U/gAAAACVBMVEX/////yEMAAADKUVZYAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAJXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyBNWCAyMDA0h3aszwAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMi8xMS8yMPIC2oAAAAB3SURBVHic7c6xDYAwEEPRLEPDPndCGSH7pKEPIjclyQZBMqL5LlxZT04hTgIEBAQEBAQEBAQEBAQcuT4CTxnYyuyedaDPrkLQZpvy4R5xCx923yKOWpRgbkowrObmtjRdA+vAzIXgiwACAgICAgICAgICAgL+Dj5XDeOhiwaP4QAAAABJRU5ErkJggg==";
      room32a : base64_png "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";
      room20 : base64_png "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";
   }
}
